/* eslint-disable */

/**
 * This file was auto generated by `ts-autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the ts-autoapi cli.
 */
import { api, type Config, type Api } from 'ts-autoapi'
import {
  GetGrantsQuery,
  UnnamedModel,
  Application_grant,
  UnnamedModel$1,
  UnnamedModel$2,
  UnnamedModel$3,
  UnnamedModel$4,
  UnnamedModel$5
} from './models/applications.d'

/**
 * List your grants
**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
 */
export const getGrants = api<(query?: GetGrantsQuery, config?: Config<GetGrantsQuery, any>) => Application_grant[]>`GET /applications/grants`

export type GetGrants = Api<typeof getGrants>

/**
 * Get a single grant
**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
 */
export const getGrantsByGrantId = api<(paths?: number, config?: Config<any, any>) => any>`GET /applications/grants/{grant_id}`

export type GetGrantsByGrantId = Api<typeof getGrantsByGrantId>

/**
 * Delete a grant
**Deprecation Notice:** GitHub Enterprise Server will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.0/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.0/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).

Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const deleteGrantsByGrantId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /applications/grants/{grant_id}`

export type DeleteGrantsByGrantId = Api<typeof deleteGrantsByGrantId>

/**
 * Delete an app authorization
OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
 */
export const deleteByClientIdGrant = api<(paths?: string, body?: UnnamedModel$1, config?: Config<any, UnnamedModel$1>) => any>`DELETE /applications/{client_id}/grant`

export type DeleteByClientIdGrant = Api<typeof deleteByClientIdGrant>

/**
 * Revoke a grant for an application
**Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.

Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub Enterprise Server](https://github.com/settings/applications#authorized).
 */
export const deleteByClientIdGrantsAndAccessToken = api<(paths?: [clientid: string, accesstoken: string], config?: Config<any, any>) => any>`DELETE /applications/{client_id}/grants/{access_token}`

export type DeleteByClientIdGrantsAndAccessToken = Api<typeof deleteByClientIdGrantsAndAccessToken>

/**
 * Check a token
OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
 */
export const postByClientIdToken = api<(paths?: string, body?: UnnamedModel$2, config?: Config<any, UnnamedModel$2>) => any>`POST /applications/{client_id}/token`

export type PostByClientIdToken = Api<typeof postByClientIdToken>

/**
 * Reset a token
OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const patchByClientIdToken = api<(paths?: string, body?: UnnamedModel$3, config?: Config<any, UnnamedModel$3>) => any>`PATCH /applications/{client_id}/token`

export type PatchByClientIdToken = Api<typeof patchByClientIdToken>

/**
 * Delete an app token
OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const deleteByClientIdToken = api<(paths?: string, body?: UnnamedModel$4, config?: Config<any, UnnamedModel$4>) => any>`DELETE /applications/{client_id}/token`

export type DeleteByClientIdToken = Api<typeof deleteByClientIdToken>

/**
 * Create a scoped access token
Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const postByClientIdTokenScoped = api<(paths?: string, body?: UnnamedModel$5, config?: Config<any, UnnamedModel$5>) => any>`POST /applications/{client_id}/token/scoped`

export type PostByClientIdTokenScoped = Api<typeof postByClientIdTokenScoped>

/**
 * Check an authorization
**Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const getByClientIdTokensAndAccessToken = api<(paths?: [clientid: string, accesstoken: string], config?: Config<any, any>) => any>`GET /applications/{client_id}/tokens/{access_token}`

export type GetByClientIdTokensAndAccessToken = Api<typeof getByClientIdTokensAndAccessToken>

/**
 * Reset an authorization
**Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
 */
export const postByClientIdTokensAndAccessToken = api<(paths?: [clientid: string, accesstoken: string], config?: Config<any, any>) => any>`POST /applications/{client_id}/tokens/{access_token}`

export type PostByClientIdTokensAndAccessToken = Api<typeof postByClientIdTokensAndAccessToken>

/**
 * Revoke an authorization for an application
**Deprecation Notice:** GitHub Enterprise Server will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).

OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
 */
export const deleteByClientIdTokensAndAccessToken = api<(paths?: [clientid: string, accesstoken: string], config?: Config<any, any>) => any>`DELETE /applications/{client_id}/tokens/{access_token}`

export type DeleteByClientIdTokensAndAccessToken = Api<typeof deleteByClientIdTokensAndAccessToken>
