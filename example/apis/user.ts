/* eslint-disable */

/**
 * This file was auto generated by `ts-autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the ts-autoapi cli.
 */
import { api, type Config, type Api } from 'ts-autoapi'
import {
  UnnamedModel,
  UnnamedModel$1,
  Private_user,
  GetEmailsQuery,
  Email,
  GetFollowersQuery,
  GetFollowingQuery,
  GetGpgKeysQuery,
  Gpg_key,
  UnnamedModel$4,
  GetInstallationsQuery,
  UnnamedModel$5,
  GetInstallationsByInstallationIdRepositoriesQuery,
  UnnamedModel$6,
  GetIssuesQuery,
  GetKeysQuery,
  Key,
  UnnamedModel$7,
  GetMembershipsOrgsQuery,
  UnnamedModel$8,
  GetOrgsQuery,
  UnnamedModel$9,
  GetPublicEmailsQuery,
  GetReposQuery,
  UnnamedModel$10,
  GetRepositoryInvitationsQuery,
  GetStarredQuery,
  GetSubscriptionsQuery,
  GetTeamsQuery
} from './models/user.d'

/**
 * Get the authenticated user
If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.

If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
 */
export const get = api<(config?: Config<any, any>) => any>`GET /user`

export type Get = Api<typeof get>

/**
 * Update the authenticated user
**Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
 */
export const patch = api<(body?: UnnamedModel, config?: Config<any, UnnamedModel>) => Private_user>`PATCH /user`

export type Patch = Api<typeof patch>

/**
 * List email addresses for the authenticated user
Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
 */
export const getEmails = api<(query?: GetEmailsQuery, config?: Config<GetEmailsQuery, any>) => Email[]>`GET /user/emails`

export type GetEmails = Api<typeof getEmails>

/**
 * Add an email address for the authenticated user
This endpoint is accessible with the `user` scope.
 */
export const postEmails = api<(body?: any, config?: Config<any, any>) => any>`POST /user/emails`

export type PostEmails = Api<typeof postEmails>

/**
 * Delete an email address for the authenticated user
This endpoint is accessible with the `user` scope.
 */
export const deleteEmails = api<(body?: any, config?: Config<any, any>) => any>`DELETE /user/emails`

export type DeleteEmails = Api<typeof deleteEmails>

/**
 * List followers of the authenticated user
Lists the people following the authenticated user.
 */
export const getFollowers = api<(query?: GetFollowersQuery, config?: Config<GetFollowersQuery, any>) => any[]>`GET /user/followers`

export type GetFollowers = Api<typeof getFollowers>

/**
 * List the people the authenticated user follows
Lists the people who the authenticated user follows.
 */
export const getFollowing = api<(query?: GetFollowingQuery, config?: Config<GetFollowingQuery, any>) => any[]>`GET /user/following`

export type GetFollowing = Api<typeof getFollowing>

/**
 * Check if a person is followed by the authenticated user
 */
export const getFollowingByUsername = api<(paths?: string, config?: Config<any, any>) => any>`GET /user/following/{username}`

export type GetFollowingByUsername = Api<typeof getFollowingByUsername>

/**
 * Follow a user
Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."

Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const putFollowingByUsername = api<(paths?: string, config?: Config<any, any>) => any>`PUT /user/following/{username}`

export type PutFollowingByUsername = Api<typeof putFollowingByUsername>

/**
 * Unfollow a user
Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
 */
export const deleteFollowingByUsername = api<(paths?: string, config?: Config<any, any>) => any>`DELETE /user/following/{username}`

export type DeleteFollowingByUsername = Api<typeof deleteFollowingByUsername>

/**
 * List GPG keys for the authenticated user
Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getGpgKeys = api<(query?: GetGpgKeysQuery, config?: Config<GetGpgKeysQuery, any>) => Gpg_key[]>`GET /user/gpg_keys`

export type GetGpgKeys = Api<typeof getGpgKeys>

/**
 * Create a GPG key for the authenticated user
Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const postGpgKeys = api<(body?: UnnamedModel$4, config?: Config<any, UnnamedModel$4>) => any>`POST /user/gpg_keys`

export type PostGpgKeys = Api<typeof postGpgKeys>

/**
 * Get a GPG key for the authenticated user
View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getGpgKeysByGpgKeyId = api<(paths?: number, config?: Config<any, any>) => any>`GET /user/gpg_keys/{gpg_key_id}`

export type GetGpgKeysByGpgKeyId = Api<typeof getGpgKeysByGpgKeyId>

/**
 * Delete a GPG key for the authenticated user
Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteGpgKeysByGpgKeyId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /user/gpg_keys/{gpg_key_id}`

export type DeleteGpgKeysByGpgKeyId = Api<typeof deleteGpgKeysByGpgKeyId>

/**
 * List app installations accessible to the user access token
Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.

You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.

You can find the permissions for the installation under the `permissions` key.
 */
export const getInstallations = api<(query?: GetInstallationsQuery, config?: Config<GetInstallationsQuery, any>) => UnnamedModel$5>`GET /user/installations`

export type GetInstallations = Api<typeof getInstallations>

/**
 * List repositories accessible to the user access token
List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.

You must use a [user-to-server OAuth access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.

The access the user has to each repository is included in the hash under the `permissions` key.
 */
export const getInstallationsByInstallationIdRepositories = api<(paths?: number, query?: GetInstallationsByInstallationIdRepositoriesQuery, config?: Config<GetInstallationsByInstallationIdRepositoriesQuery, any>) => UnnamedModel$6>`GET /user/installations/{installation_id}/repositories`

export type GetInstallationsByInstallationIdRepositories = Api<typeof getInstallationsByInstallationIdRepositories>

/**
 * Add a repository to an app installation
Add a single repository to an installation. The authenticated user must have admin access to the repository.

You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.0/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const putInstallationsByInstallationIdRepositoriesAndRepositoryId = api<(paths?: [installationid: number, repositoryid: number], config?: Config<any, any>) => any>`PUT /user/installations/{installation_id}/repositories/{repository_id}`

export type PutInstallationsByInstallationIdRepositoriesAndRepositoryId = Api<typeof putInstallationsByInstallationIdRepositoriesAndRepositoryId>

/**
 * Remove a repository from an app installation
Remove a single repository from an installation. The authenticated user must have admin access to the repository.

You must use a personal access token (which you can create via the [command line](https://docs.github.com/enterprise-server@3.0/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
 */
export const deleteInstallationsByInstallationIdRepositoriesAndRepositoryId = api<(paths?: [installationid: number, repositoryid: number], config?: Config<any, any>) => any>`DELETE /user/installations/{installation_id}/repositories/{repository_id}`

export type DeleteInstallationsByInstallationIdRepositoriesAndRepositoryId = Api<typeof deleteInstallationsByInstallationIdRepositoriesAndRepositoryId>

/**
 * List user account issues assigned to the authenticated user
List issues across owned and member repositories assigned to the authenticated user.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const getIssues = api<(query?: GetIssuesQuery, config?: Config<GetIssuesQuery, any>) => any[]>`GET /user/issues`

export type GetIssues = Api<typeof getIssues>

/**
 * List public SSH keys for the authenticated user
Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getKeys = api<(query?: GetKeysQuery, config?: Config<GetKeysQuery, any>) => Key[]>`GET /user/keys`

export type GetKeys = Api<typeof getKeys>

/**
 * Create a public SSH key for the authenticated user
Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const postKeys = api<(body?: UnnamedModel$7, config?: Config<any, UnnamedModel$7>) => any>`POST /user/keys`

export type PostKeys = Api<typeof postKeys>

/**
 * Get a public SSH key for the authenticated user
View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const getKeysByKeyId = api<(paths?: number, config?: Config<any, any>) => any>`GET /user/keys/{key_id}`

export type GetKeysByKeyId = Api<typeof getKeysByKeyId>

/**
 * Delete a public SSH key for the authenticated user
Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteKeysByKeyId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /user/keys/{key_id}`

export type DeleteKeysByKeyId = Api<typeof deleteKeysByKeyId>

/**
 * List organization memberships for the authenticated user
 */
export const getMembershipsOrgs = api<(query?: GetMembershipsOrgsQuery, config?: Config<GetMembershipsOrgsQuery, any>) => any[]>`GET /user/memberships/orgs`

export type GetMembershipsOrgs = Api<typeof getMembershipsOrgs>

/**
 * Get an organization membership for the authenticated user
 */
export const getMembershipsOrgsByOrg = api<(paths?: string, config?: Config<any, any>) => any>`GET /user/memberships/orgs/{org}`

export type GetMembershipsOrgsByOrg = Api<typeof getMembershipsOrgsByOrg>

/**
 * Update an organization membership for the authenticated user
 */
export const patchMembershipsOrgsByOrg = api<(paths?: string, body?: UnnamedModel$8, config?: Config<any, UnnamedModel$8>) => any>`PATCH /user/memberships/orgs/{org}`

export type PatchMembershipsOrgsByOrg = Api<typeof patchMembershipsOrgsByOrg>

/**
 * List organizations for the authenticated user
List organizations for the authenticated user.

**OAuth scope requirements**

This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
 */
export const getOrgs = api<(query?: GetOrgsQuery, config?: Config<GetOrgsQuery, any>) => any[]>`GET /user/orgs`

export type GetOrgs = Api<typeof getOrgs>

/**
 * Create a user project
 */
export const postProjects = api<(body?: UnnamedModel$9, config?: Config<any, UnnamedModel$9>) => any>`POST /user/projects`

export type PostProjects = Api<typeof postProjects>

/**
 * List public email addresses for the authenticated user
Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
 */
export const getPublicEmails = api<(query?: GetPublicEmailsQuery, config?: Config<GetPublicEmailsQuery, any>) => any[]>`GET /user/public_emails`

export type GetPublicEmails = Api<typeof getPublicEmails>

/**
 * List repositories for the authenticated user
Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.

The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
 */
export const getRepos = api<(query?: GetReposQuery, config?: Config<GetReposQuery, any>) => any[]>`GET /user/repos`

export type GetRepos = Api<typeof getRepos>

/**
 * Create a repository for the authenticated user
Creates a new repository for the authenticated user.

**OAuth scope requirements**

When using [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:

*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
*   `repo` scope to create a private repository.
 */
export const postRepos = api<(body?: UnnamedModel$10, config?: Config<any, UnnamedModel$10>) => any>`POST /user/repos`

export type PostRepos = Api<typeof postRepos>

/**
 * List repository invitations for the authenticated user
When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 */
export const getRepositoryInvitations = api<(query?: GetRepositoryInvitationsQuery, config?: Config<GetRepositoryInvitationsQuery, any>) => any[]>`GET /user/repository_invitations`

export type GetRepositoryInvitations = Api<typeof getRepositoryInvitations>

/**
 * Accept a repository invitation
 */
export const patchRepositoryInvitationsByInvitationId = api<(paths?: number, config?: Config<any, any>) => any>`PATCH /user/repository_invitations/{invitation_id}`

export type PatchRepositoryInvitationsByInvitationId = Api<typeof patchRepositoryInvitationsByInvitationId>

/**
 * Decline a repository invitation
 */
export const deleteRepositoryInvitationsByInvitationId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /user/repository_invitations/{invitation_id}`

export type DeleteRepositoryInvitationsByInvitationId = Api<typeof deleteRepositoryInvitationsByInvitationId>

/**
 * List repositories starred by the authenticated user
Lists repositories the authenticated user has starred.

You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:
 */
export const getStarred = api<(query?: GetStarredQuery, config?: Config<GetStarredQuery, any>) => any[]>`GET /user/starred`

export type GetStarred = Api<typeof getStarred>

/**
 * Check if a repository is starred by the authenticated user
 */
export const getStarredByOwnerAndRepo = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`GET /user/starred/{owner}/{repo}`

export type GetStarredByOwnerAndRepo = Api<typeof getStarredByOwnerAndRepo>

/**
 * Star a repository for the authenticated user
Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const putStarredByOwnerAndRepo = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`PUT /user/starred/{owner}/{repo}`

export type PutStarredByOwnerAndRepo = Api<typeof putStarredByOwnerAndRepo>

/**
 * Unstar a repository for the authenticated user
 */
export const deleteStarredByOwnerAndRepo = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`DELETE /user/starred/{owner}/{repo}`

export type DeleteStarredByOwnerAndRepo = Api<typeof deleteStarredByOwnerAndRepo>

/**
 * List repositories watched by the authenticated user
Lists repositories the authenticated user is watching.
 */
export const getSubscriptions = api<(query?: GetSubscriptionsQuery, config?: Config<GetSubscriptionsQuery, any>) => any[]>`GET /user/subscriptions`

export type GetSubscriptions = Api<typeof getSubscriptions>

/**
 * List teams for the authenticated user
List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/).
 */
export const getTeams = api<(query?: GetTeamsQuery, config?: Config<GetTeamsQuery, any>) => any[]>`GET /user/teams`

export type GetTeams = Api<typeof getTeams>
