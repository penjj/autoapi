/* eslint-disable */

/**
 * This file was auto generated by `ts-autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the ts-autoapi cli.
 */
import { api, type Config, type Api } from 'ts-autoapi'
import {
  GetHooksQuery,
  UnnamedModel,
  Global_hook,
  UnnamedModel$1,
  UnnamedModel$2,
  UnnamedModel$4,
  Global_hook_2,
  GetKeysQuery,
  Public_key_full,
  UnnamedModel$6,
  Ldap_mapping_team,
  UnnamedModel$7,
  Ldap_mapping_user,
  UnnamedModel$9,
  UnnamedModel$10,
  GetPreReceiveEnvironmentsQuery,
  Pre_receive_environment,
  UnnamedModel$12,
  UnnamedModel$13,
  Pre_receive_environment_download_status,
  GetPreReceiveHooksQuery,
  Pre_receive_hook,
  UnnamedModel$17,
  UnnamedModel$18,
  GetTokensQuery,
  Authorization,
  UnnamedModel$20,
  UnnamedModel$21,
  UnnamedModel$22
} from './models/admin.d'

/**
 * List global webhooks
 */
export const getHooks = api<(query?: GetHooksQuery, config?: Config<GetHooksQuery, any>) => Global_hook[]>`GET /admin/hooks`

export type GetHooks = Api<typeof getHooks>

/**
 * Create a global webhook
 */
export const postHooks = api<(body?: UnnamedModel$2, config?: Config<any, UnnamedModel$2>) => any>`POST /admin/hooks`

export type PostHooks = Api<typeof postHooks>

/**
 * Get a global webhook
 */
export const getHooksByHookId = api<(paths?: number, config?: Config<any, any>) => any>`GET /admin/hooks/{hook_id}`

export type GetHooksByHookId = Api<typeof getHooksByHookId>

/**
 * Update a global webhook
Parameters that are not provided will be overwritten with the default value or removed if no default exists.
 */
export const patchHooksByHookId = api<(paths?: number, body?: UnnamedModel$4, config?: Config<any, UnnamedModel$4>) => Global_hook_2>`PATCH /admin/hooks/{hook_id}`

export type PatchHooksByHookId = Api<typeof patchHooksByHookId>

/**
 * Delete a global webhook
 */
export const deleteHooksByHookId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /admin/hooks/{hook_id}`

export type DeleteHooksByHookId = Api<typeof deleteHooksByHookId>

/**
 * Ping a global webhook
This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the webhook.
 */
export const postHooksByHookIdPings = api<(paths?: number, config?: Config<any, any>) => any>`POST /admin/hooks/{hook_id}/pings`

export type PostHooksByHookIdPings = Api<typeof postHooksByHookIdPings>

/**
 * List public keys
 */
export const getKeys = api<(query?: GetKeysQuery, config?: Config<GetKeysQuery, any>) => Public_key_full[]>`GET /admin/keys`

export type GetKeys = Api<typeof getKeys>

/**
 * Delete a public key
 */
export const deleteKeysByKeyIds = api<(paths?: string, config?: Config<any, any>) => any>`DELETE /admin/keys/{key_ids}`

export type DeleteKeysByKeyIds = Api<typeof deleteKeysByKeyIds>

/**
 * Update LDAP mapping for a team
Updates the [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. [LDAP synchronization](https://docs.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync) must be enabled to map LDAP entries to a team. Use the [Create a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams/#create-a-team) endpoint to create a team with LDAP mapping.

If you pass the `hellcat-preview` media type, you can also update the LDAP mapping of a child team.
 */
export const patchLdapTeamsByTeamIdMapping = api<(paths?: number, body?: UnnamedModel$6, config?: Config<any, UnnamedModel$6>) => Ldap_mapping_team>`PATCH /admin/ldap/teams/{team_id}/mapping`

export type PatchLdapTeamsByTeamIdMapping = Api<typeof patchLdapTeamsByTeamIdMapping>

/**
 * Sync LDAP mapping for a team
Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
 */
export const postLdapTeamsByTeamIdSync = api<(paths?: number, config?: Config<any, any>) => any>`POST /admin/ldap/teams/{team_id}/sync`

export type PostLdapTeamsByTeamIdSync = Api<typeof postLdapTeamsByTeamIdSync>

/**
 * Update LDAP mapping for a user
 */
export const patchLdapUsersByUsernameMapping = api<(paths?: string, body?: UnnamedModel$7, config?: Config<any, UnnamedModel$7>) => Ldap_mapping_user>`PATCH /admin/ldap/users/{username}/mapping`

export type PatchLdapUsersByUsernameMapping = Api<typeof patchLdapUsersByUsernameMapping>

/**
 * Sync LDAP mapping for a user
Note that this API call does not automatically initiate an LDAP sync. Rather, if a `201` is returned, the sync job is queued successfully, and is performed when the instance is ready.
 */
export const postLdapUsersByUsernameSync = api<(paths?: string, config?: Config<any, any>) => any>`POST /admin/ldap/users/{username}/sync`

export type PostLdapUsersByUsernameSync = Api<typeof postLdapUsersByUsernameSync>

/**
 * Create an organization
 */
export const postOrganizations = api<(body?: UnnamedModel$9, config?: Config<any, UnnamedModel$9>) => any>`POST /admin/organizations`

export type PostOrganizations = Api<typeof postOrganizations>

/**
 * Update an organization name
 */
export const patchOrganizationsByOrg = api<(paths?: string, body?: UnnamedModel$10, config?: Config<any, UnnamedModel$10>) => any>`PATCH /admin/organizations/{org}`

export type PatchOrganizationsByOrg = Api<typeof patchOrganizationsByOrg>

/**
 * List pre-receive environments
 */
export const getPreReceiveEnvironments = api<(query?: GetPreReceiveEnvironmentsQuery, config?: Config<GetPreReceiveEnvironmentsQuery, any>) => Pre_receive_environment[]>`GET /admin/pre-receive-environments`

export type GetPreReceiveEnvironments = Api<typeof getPreReceiveEnvironments>

/**
 * Create a pre-receive environment
 */
export const postPreReceiveEnvironments = api<(body?: UnnamedModel$12, config?: Config<any, UnnamedModel$12>) => any>`POST /admin/pre-receive-environments`

export type PostPreReceiveEnvironments = Api<typeof postPreReceiveEnvironments>

/**
 * Get a pre-receive environment
 */
export const getPreReceiveEnvironmentsByPreReceiveEnvironmentId = api<(paths?: number, config?: Config<any, any>) => any>`GET /admin/pre-receive-environments/{pre_receive_environment_id}`

export type GetPreReceiveEnvironmentsByPreReceiveEnvironmentId = Api<typeof getPreReceiveEnvironmentsByPreReceiveEnvironmentId>

/**
 * Update a pre-receive environment
You cannot modify the default environment. If you attempt to modify the default environment, you will receive a `422 Unprocessable Entity` response.
 */
export const patchPreReceiveEnvironmentsByPreReceiveEnvironmentId = api<(paths?: number, body?: UnnamedModel$13, config?: Config<any, UnnamedModel$13>) => any>`PATCH /admin/pre-receive-environments/{pre_receive_environment_id}`

export type PatchPreReceiveEnvironmentsByPreReceiveEnvironmentId = Api<typeof patchPreReceiveEnvironmentsByPreReceiveEnvironmentId>

/**
 * Delete a pre-receive environment
If you attempt to delete an environment that cannot be deleted, you will receive a `422 Unprocessable Entity` response.

The possible error messages are:

*   _Cannot modify or delete the default environment_
*   _Cannot delete environment that has hooks_
*   _Cannot delete environment when download is in progress_
 */
export const deletePreReceiveEnvironmentsByPreReceiveEnvironmentId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /admin/pre-receive-environments/{pre_receive_environment_id}`

export type DeletePreReceiveEnvironmentsByPreReceiveEnvironmentId = Api<typeof deletePreReceiveEnvironmentsByPreReceiveEnvironmentId>

/**
 * Start a pre-receive environment download
Triggers a new download of the environment tarball from the environment's `image_url`. When the download is finished, the newly downloaded tarball will overwrite the existing environment.

If a download cannot be triggered, you will receive a `422 Unprocessable Entity` response.

The possible error messages are:

* _Cannot modify or delete the default environment_
* _Can not start a new download when a download is in progress_
 */
export const postPreReceiveEnvironmentsByPreReceiveEnvironmentIdDownloads = api<(paths?: number, config?: Config<any, any>) => any>`POST /admin/pre-receive-environments/{pre_receive_environment_id}/downloads`

export type PostPreReceiveEnvironmentsByPreReceiveEnvironmentIdDownloads = Api<typeof postPreReceiveEnvironmentsByPreReceiveEnvironmentIdDownloads>

/**
 * Get the download status for a pre-receive environment
In addition to seeing the download status at the "[Get a pre-receive environment](#get-a-pre-receive-environment)" endpoint, there is also this separate endpoint for just the download status.
 */
export const getPreReceiveEnvironmentsByPreReceiveEnvironmentIdDownloadsLatest = api<(paths?: number, config?: Config<any, any>) => Pre_receive_environment_download_status>`GET /admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest`

export type GetPreReceiveEnvironmentsByPreReceiveEnvironmentIdDownloadsLatest = Api<typeof getPreReceiveEnvironmentsByPreReceiveEnvironmentIdDownloadsLatest>

/**
 * List pre-receive hooks
 */
export const getPreReceiveHooks = api<(query?: GetPreReceiveHooksQuery, config?: Config<GetPreReceiveHooksQuery, any>) => Pre_receive_hook[]>`GET /admin/pre-receive-hooks`

export type GetPreReceiveHooks = Api<typeof getPreReceiveHooks>

/**
 * Create a pre-receive hook
 */
export const postPreReceiveHooks = api<(body?: UnnamedModel$17, config?: Config<any, UnnamedModel$17>) => any>`POST /admin/pre-receive-hooks`

export type PostPreReceiveHooks = Api<typeof postPreReceiveHooks>

/**
 * Get a pre-receive hook
 */
export const getPreReceiveHooksByPreReceiveHookId = api<(paths?: number, config?: Config<any, any>) => any>`GET /admin/pre-receive-hooks/{pre_receive_hook_id}`

export type GetPreReceiveHooksByPreReceiveHookId = Api<typeof getPreReceiveHooksByPreReceiveHookId>

/**
 * Update a pre-receive hook
 */
export const patchPreReceiveHooksByPreReceiveHookId = api<(paths?: number, body?: UnnamedModel$18, config?: Config<any, UnnamedModel$18>) => any>`PATCH /admin/pre-receive-hooks/{pre_receive_hook_id}`

export type PatchPreReceiveHooksByPreReceiveHookId = Api<typeof patchPreReceiveHooksByPreReceiveHookId>

/**
 * Delete a pre-receive hook
 */
export const deletePreReceiveHooksByPreReceiveHookId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /admin/pre-receive-hooks/{pre_receive_hook_id}`

export type DeletePreReceiveHooksByPreReceiveHookId = Api<typeof deletePreReceiveHooksByPreReceiveHookId>

/**
 * List personal access tokens
Lists personal access tokens for all users, including admin users.
 */
export const getTokens = api<(query?: GetTokensQuery, config?: Config<GetTokensQuery, any>) => Authorization[]>`GET /admin/tokens`

export type GetTokens = Api<typeof getTokens>

/**
 * Delete a personal access token
Deletes a personal access token. Returns a `403 - Forbidden` status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.
 */
export const deleteTokensByTokenId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /admin/tokens/{token_id}`

export type DeleteTokensByTokenId = Api<typeof deleteTokensByTokenId>

/**
 * Create a user
If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also [update the LDAP mapping](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user) for the user.

The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send `"octo_cat"` as the login, a user named `"octo-cat"` will be created.

If the login name or email address is already associated with an account, the server will return a `422` response.
 */
export const postUsers = api<(body?: UnnamedModel$20, config?: Config<any, UnnamedModel$20>) => any>`POST /admin/users`

export type PostUsers = Api<typeof postUsers>

/**
 * Update the username for a user
 */
export const patchUsersByUsername = api<(paths?: string, body?: UnnamedModel$21, config?: Config<any, UnnamedModel$21>) => any>`PATCH /admin/users/{username}`

export type PatchUsersByUsername = Api<typeof patchUsersByUsername>

/**
 * Delete a user
Deleting a user will delete all their repositories, gists, applications, and personal settings. [Suspending a user](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#suspend-a-user) is often a better option.

You can delete any user account except your own.
 */
export const deleteUsersByUsername = api<(paths?: string, config?: Config<any, any>) => any>`DELETE /admin/users/{username}`

export type DeleteUsersByUsername = Api<typeof deleteUsersByUsername>

/**
 * Create an impersonation OAuth token
 */
export const postUsersByUsernameAuthorizations = api<(paths?: string, body?: UnnamedModel$22, config?: Config<any, UnnamedModel$22>) => any>`POST /admin/users/{username}/authorizations`

export type PostUsersByUsernameAuthorizations = Api<typeof postUsersByUsernameAuthorizations>

/**
 * Delete an impersonation OAuth token
 */
export const deleteUsersByUsernameAuthorizations = api<(paths?: string, config?: Config<any, any>) => any>`DELETE /admin/users/{username}/authorizations`

export type DeleteUsersByUsernameAuthorizations = Api<typeof deleteUsersByUsernameAuthorizations>
