/* eslint-disable */

/**
 * This file was auto generated by `ts-autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the ts-autoapi cli.
 */
import { api, type Config, type Api } from 'ts-autoapi'
import {
  GetQuery,
  UnnamedModel,
  Thread,
  UnnamedModel$2,
  Thread_subscription,
  UnnamedModel$3
} from './models/notifications.d'

/**
 * List notifications for the authenticated user
List all notifications for the current user, sorted by most recently updated.
 */
export const get = api<(query?: GetQuery, config?: Config<GetQuery, any>) => Thread[]>`GET /notifications`

export type Get = Api<typeof get>

/**
 * Mark notifications as read
Marks all notifications as "read" removes it from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const put = api<(body?: UnnamedModel$2, config?: Config<any, UnnamedModel$2>) => any>`PUT /notifications`

export type Put = Api<typeof put>

/**
 * Get a thread
 */
export const getThreadsByThreadId = api<(paths?: number, config?: Config<any, any>) => any>`GET /notifications/threads/{thread_id}`

export type GetThreadsByThreadId = Api<typeof getThreadsByThreadId>

/**
 * Mark a thread as read
 */
export const patchThreadsByThreadId = api<(paths?: number, config?: Config<any, any>) => any>`PATCH /notifications/threads/{thread_id}`

export type PatchThreadsByThreadId = Api<typeof patchThreadsByThreadId>

/**
 * Get a thread subscription for the authenticated user
This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#get-a-repository-subscription).

Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
 */
export const getThreadsByThreadIdSubscription = api<(paths?: number, config?: Config<any, any>) => Thread_subscription>`GET /notifications/threads/{thread_id}/subscription`

export type GetThreadsByThreadIdSubscription = Api<typeof getThreadsByThreadIdSubscription>

/**
 * Set a thread subscription
If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.

You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.

Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#delete-a-thread-subscription) endpoint.
 */
export const putThreadsByThreadIdSubscription = api<(paths?: number, body?: UnnamedModel$3, config?: Config<any, UnnamedModel$3>) => any>`PUT /notifications/threads/{thread_id}/subscription`

export type PutThreadsByThreadIdSubscription = Api<typeof putThreadsByThreadIdSubscription>

/**
 * Delete a thread subscription
Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
 */
export const deleteThreadsByThreadIdSubscription = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /notifications/threads/{thread_id}/subscription`

export type DeleteThreadsByThreadIdSubscription = Api<typeof deleteThreadsByThreadIdSubscription>
