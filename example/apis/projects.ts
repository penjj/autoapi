/* eslint-disable */

/**
 * This file was auto generated by `autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the autoapi cli.
 */
import { api, type Config, type Api } from 'autoapi'
import {
  Project_card,
  UnnamedModel,
  UnnamedModel$1,
  Project_column,
  UnnamedModel$2,
  GetColumnsByColumnIdCardsQuery,
  UnnamedModel$3,
  UnnamedModel$4,
  GetByProjectIdCollaboratorsQuery,
  Project_collaborator_permission,
  GetByProjectIdColumnsQuery,
  UnnamedModel$5
} from './models/projects.d'

/**
 * Get a project card
 */
export const getColumnsCardsByCardId = api<(paths?: number, config?: Config<any, any>) => Project_card>`GET /projects/columns/cards/{card_id}`

export type GetColumnsCardsByCardId = Api<typeof getColumnsCardsByCardId>

/**
 * Update an existing project card
 */
export const patchColumnsCardsByCardId = api<(paths?: number, body?: UnnamedModel, config?: Config<any, UnnamedModel>) => any>`PATCH /projects/columns/cards/{card_id}`

export type PatchColumnsCardsByCardId = Api<typeof patchColumnsCardsByCardId>

/**
 * Delete a project card
 */
export const deleteColumnsCardsByCardId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /projects/columns/cards/{card_id}`

export type DeleteColumnsCardsByCardId = Api<typeof deleteColumnsCardsByCardId>

/**
 * Move a project card
 */
export const postColumnsCardsByCardIdMoves = api<(paths?: number, body?: UnnamedModel$1, config?: Config<any, UnnamedModel$1>) => any>`POST /projects/columns/cards/{card_id}/moves`

export type PostColumnsCardsByCardIdMoves = Api<typeof postColumnsCardsByCardIdMoves>

/**
 * Get a project column
 */
export const getColumnsByColumnId = api<(paths?: number, config?: Config<any, any>) => Project_column>`GET /projects/columns/{column_id}`

export type GetColumnsByColumnId = Api<typeof getColumnsByColumnId>

/**
 * Update an existing project column
 */
export const patchColumnsByColumnId = api<(paths?: number, body?: UnnamedModel$2, config?: Config<any, UnnamedModel$2>) => any>`PATCH /projects/columns/{column_id}`

export type PatchColumnsByColumnId = Api<typeof patchColumnsByColumnId>

/**
 * Delete a project column
 */
export const deleteColumnsByColumnId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /projects/columns/{column_id}`

export type DeleteColumnsByColumnId = Api<typeof deleteColumnsByColumnId>

/**
 * List project cards
 */
export const getColumnsByColumnIdCards = api<(paths?: number, query?: GetColumnsByColumnIdCardsQuery, config?: Config<GetColumnsByColumnIdCardsQuery, any>) => any[]>`GET /projects/columns/{column_id}/cards`

export type GetColumnsByColumnIdCards = Api<typeof getColumnsByColumnIdCards>

/**
 * Create a project card
 */
export const postColumnsByColumnIdCards = api<(paths?: number, body?: any, config?: Config<any, any>) => any>`POST /projects/columns/{column_id}/cards`

export type PostColumnsByColumnIdCards = Api<typeof postColumnsByColumnIdCards>

/**
 * Move a project column
 */
export const postColumnsByColumnIdMoves = api<(paths?: number, body?: UnnamedModel$3, config?: Config<any, UnnamedModel$3>) => any>`POST /projects/columns/{column_id}/moves`

export type PostColumnsByColumnIdMoves = Api<typeof postColumnsByColumnIdMoves>

/**
 * Get a project
Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const getByProjectId = api<(paths?: number, config?: Config<any, any>) => any>`GET /projects/{project_id}`

export type GetByProjectId = Api<typeof getByProjectId>

/**
 * Update a project
Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const patchByProjectId = api<(paths?: number, body?: UnnamedModel$4, config?: Config<any, UnnamedModel$4>) => any>`PATCH /projects/{project_id}`

export type PatchByProjectId = Api<typeof patchByProjectId>

/**
 * Delete a project
Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
 */
export const deleteByProjectId = api<(paths?: number, config?: Config<any, any>) => any>`DELETE /projects/{project_id}`

export type DeleteByProjectId = Api<typeof deleteByProjectId>

/**
 * List project collaborators
Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
 */
export const getByProjectIdCollaborators = api<(paths?: number, query?: GetByProjectIdCollaboratorsQuery, config?: Config<GetByProjectIdCollaboratorsQuery, any>) => any[]>`GET /projects/{project_id}/collaborators`

export type GetByProjectIdCollaborators = Api<typeof getByProjectIdCollaborators>

/**
 * Add project collaborator
Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
 */
export const putByProjectIdCollaboratorsAndUsername = api<(paths?: [projectid: number, username: string], body?: any | null, config?: Config<any, any | null>) => any>`PUT /projects/{project_id}/collaborators/{username}`

export type PutByProjectIdCollaboratorsAndUsername = Api<typeof putByProjectIdCollaboratorsAndUsername>

/**
 * Remove user as a collaborator
Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
 */
export const deleteByProjectIdCollaboratorsAndUsername = api<(paths?: [projectid: number, username: string], config?: Config<any, any>) => any>`DELETE /projects/{project_id}/collaborators/{username}`

export type DeleteByProjectIdCollaboratorsAndUsername = Api<typeof deleteByProjectIdCollaboratorsAndUsername>

/**
 * Get project permission for a user
Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
 */
export const getByProjectIdCollaboratorsAndUsernamePermission = api<(paths?: [projectid: number, username: string], config?: Config<any, any>) => Project_collaborator_permission>`GET /projects/{project_id}/collaborators/{username}/permission`

export type GetByProjectIdCollaboratorsAndUsernamePermission = Api<typeof getByProjectIdCollaboratorsAndUsernamePermission>

/**
 * List project columns
 */
export const getByProjectIdColumns = api<(paths?: number, query?: GetByProjectIdColumnsQuery, config?: Config<GetByProjectIdColumnsQuery, any>) => any[]>`GET /projects/{project_id}/columns`

export type GetByProjectIdColumns = Api<typeof getByProjectIdColumns>

/**
 * Create a project column
 */
export const postByProjectIdColumns = api<(paths?: number, body?: UnnamedModel$5, config?: Config<any, UnnamedModel$5>) => any>`POST /projects/{project_id}/columns`

export type PostByProjectIdColumns = Api<typeof postByProjectIdColumns>
