/* eslint-disable */

/**
 * This file was auto generated by `autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the autoapi cli.
 */

export interface UnnamedModel {
  name?: string

  space?: number

  private_repos?: number

  filled_seats?: number

  seats?: number

}

/**
 * Organization Full
 */
export interface Organization_full {
  login?: string

  id?: number

  node_id?: string

  url?: string

  repos_url?: string

  events_url?: string

  hooks_url?: string

  issues_url?: string

  members_url?: string

  public_members_url?: string

  avatar_url?: string

  description?: string | null

  name?: string

  company?: string

  blog?: string

  location?: string

  email?: string

  twitter_username?: string | null

  is_verified?: boolean

  has_organization_projects?: boolean

  has_repository_projects?: boolean

  public_repos?: number

  public_gists?: number

  followers?: number

  following?: number

  html_url?: string

  created_at?: string

  type?: string

  total_private_repos?: number

  owned_private_repos?: number

  private_gists?: number | null

  disk_usage?: number | null

  collaborators?: number | null

  billing_email?: string | null

  plan?: UnnamedModel

  default_repository_permission?: string | null

  members_can_create_repositories?: boolean | null

  two_factor_requirement_enabled?: boolean | null

  members_allowed_repository_creation_type?: string

  members_can_create_public_repositories?: boolean

  members_can_create_private_repositories?: boolean

  members_can_create_internal_repositories?: boolean

  members_can_create_pages?: boolean

  members_can_create_public_pages?: boolean

  members_can_create_private_pages?: boolean

  members_can_fork_private_repositories?: boolean | null

  updated_at?: string

}

export interface UnnamedModel$1 {
  /**
   * Billing email address. This address is not publicized.
   */
  billing_email?: string

  /**
   * The company name.
   */
  company?: string

  /**
   * The publicly visible email address.
   */
  email?: string

  /**
   * The Twitter username of the company.
   */
  twitter_username?: string

  /**
   * The location.
   */
  location?: string

  /**
   * The shorthand name of the company.
   */
  name?: string

  /**
   * The description of the company.
   */
  description?: string

  /**
   * Toggles whether an organization can use organization projects.
   */
  has_organization_projects?: boolean

  /**
   * Toggles whether repositories that belong to the organization can use repository projects.
   */
  has_repository_projects?: boolean

  /**
   * Default permission level members have for organization repositories:  
\* `read` - can pull, but not push to or administer this repository.  
\* `write` - can pull and push, but not administer this repository.  
\* `admin` - can pull, push, and administer this repository.  
\* `none` - no permissions granted by default.
   */
  default_repository_permission?: string

  /**
   * Toggles the ability of non-admin organization members to create repositories. Can be one of:  
\* `true` - all organization members can create repositories.  
\* `false` - only organization owners can create repositories.  
Default: `true`  
**Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
   */
  members_can_create_repositories?: boolean

  /**
   * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  
\* `true` - all organization members can create internal repositories.  
\* `false` - only organization owners can create internal repositories.  
Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_internal_repositories?: boolean

  /**
   * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  
\* `true` - all organization members can create private repositories.  
\* `false` - only organization owners can create private repositories.  
Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_private_repositories?: boolean

  /**
   * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  
\* `true` - all organization members can create public repositories.  
\* `false` - only organization owners can create public repositories.  
Default: `true`. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
   */
  members_can_create_public_repositories?: boolean

  /**
   * Specifies which types of repositories non-admin organization members can create. Can be one of:  
\* `all` - all organization members can create public and private repositories.  
\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  
\* `none` - only admin members can create repositories.  
**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
   */
  members_allowed_repository_creation_type?: string

  /**
   * Toggles whether organization members can create GitHub Pages sites. Can be one of:  
\* `true` - all organization members can create GitHub Pages sites.  
\* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
   */
  members_can_create_pages?: boolean

  /**
   * Toggles whether organization members can fork private organization repositories. Can be one of:  
\* `true` - all organization members can fork private repositories within the organization.  
\* `false` - no organization members can fork private repositories within the organization.
   */
  members_can_fork_private_repositories?: boolean

  blog?: string

}

export interface Actions_organization_permissions {
  /**
   * The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
   */
  enabled_repositories?: string

  /**
   * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
   */
  selected_repositories_url?: string

  allowed_actions?: any

  selected_actions_url?: any

}

export interface UnnamedModel$2 {
  enabled_repositories?: any

  allowed_actions?: any

}

export interface GetByOrgActionsPermissionsRepositoriesQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$3 {
  total_count?: number

  repositories?: any[]

}

export interface UnnamedModel$4 {
  /**
   * Unique identifier of the repository.
   */
  selected_repository_ids?: number[]

}

export interface GetByOrgActionsRunnerGroupsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface Runner_groups_org {
  id?: number

  name?: string

  visibility?: string

  default?: boolean

  /**
   * Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
   */
  selected_repositories_url?: string

  runners_url?: string

  inherited?: boolean

  inherited_allows_public_repositories?: boolean

  allows_public_repositories?: boolean

}

export interface UnnamedModel$5 {
  total_count?: number

  runner_groups?: Runner_groups_org[]

}

export interface UnnamedModel$6 {
  /**
   * Name of the runner group.
   */
  name?: string

  /**
   * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
   */
  visibility?: string

  /**
   * Unique identifier of the repository.
   */
  selected_repository_ids?: number[]

  /**
   * Unique identifier of the runner.
   */
  runners?: number[]

  /**
   * Whether the runner group can be used by `public` repositories.
   */
  allows_public_repositories?: boolean

}

export interface UnnamedModel$7 {
  /**
   * Name of the runner group.
   */
  name?: string

  /**
   * Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
   */
  visibility?: string

  /**
   * Whether the runner group can be used by `public` repositories.
   */
  allows_public_repositories?: boolean

}

export interface GetByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesQuery {
  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Results per page (max 100)
   */
  perpage?: number

}

export interface UnnamedModel$8 {
  total_count?: number

  repositories?: any[]

}

export interface UnnamedModel$9 {
  /**
   * Unique identifier of the repository.
   */
  selected_repository_ids?: number[]

}

export interface GetByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$10 {
  total_count?: number

  runners?: any[]

}

export interface UnnamedModel$11 {
  /**
   * Unique identifier of the runner.
   */
  runners?: number[]

}

export interface GetByOrgActionsRunnersQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$12 {
  total_count?: number

  runners?: any[]

}

export interface GetByOrgActionsSecretsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Secrets for GitHub Actions for an organization.
 */
export interface Organization_actions_secret {
  /**
   * The name of the secret.
   */
  name?: string

  created_at?: string

  updated_at?: string

  /**
   * Visibility of a secret
   */
  visibility?: string

  selected_repositories_url?: string

}

export interface UnnamedModel$13 {
  total_count?: number

  /**
   * Secrets for GitHub Actions for an organization.
   */
  secrets?: Organization_actions_secret[]

}

/**
 * The public key used for setting Actions Secrets.
 */
export interface Actions_public_key {
  /**
   * The identifier for the key.
   */
  key_id?: string

  /**
   * The Base64 encoded public key.
   */
  key?: string

  id?: number

  url?: string

  title?: string

  created_at?: string

}

export interface UnnamedModel$14 {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-an-organization-public-key) endpoint.
   */
  encrypted_value?: string

  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string

  /**
   * Configures the access that repositories have to the organization secret. Can be one of:  
\- `all` - All repositories in an organization can access the secret.  
\- `private` - Private repositories in an organization can access the secret.  
\- `selected` - Only specific repositories can access the secret.
   */
  visibility?: string

  selected_repository_ids?: string[]

}

export interface GetByOrgActionsSecretsAndSecretNameRepositoriesQuery {
  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Results per page (max 100)
   */
  perpage?: number

}

export interface UnnamedModel$15 {
  total_count?: number

  repositories?: any[]

}

export interface UnnamedModel$16 {
  selected_repository_ids?: number[]

}

export interface GetByOrgEventsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOrgHooksQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$17 {
  url?: string

  insecure_ssl?: string

  content_type?: string

  secret?: string

}

/**
 * Org Hook
 */
export interface Org_hook {
  id?: number

  url?: string

  ping_url?: string

  name?: string

  events?: string[]

  active?: boolean

  config?: UnnamedModel$17

  updated_at?: string

  created_at?: string

  type?: string

}

/**
 * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#create-hook-config-params).
 */
export interface UnnamedModel$18 {
  url?: any

  content_type?: any

  secret?: any

  insecure_ssl?: any

  username?: string

  password?: string

}

export interface UnnamedModel$19 {
  /**
   * Must be passed as "web".
   */
  name?: string

  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#create-hook-config-params).
   */
  config?: UnnamedModel$18

  events?: string[]

  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   */
  active?: boolean

}

/**
 * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#update-hook-config-params).
 */
export interface UnnamedModel$20 {
  url?: any

  content_type?: any

  secret?: any

  insecure_ssl?: any

}

export interface UnnamedModel$21 {
  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#update-hook-config-params).
   */
  config?: UnnamedModel$20

  events?: string[]

  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   */
  active?: boolean

  name?: string

}

export interface UnnamedModel$22 {
  url?: any

  content_type?: any

  secret?: any

  insecure_ssl?: any

}

export interface GetByOrgInstallationsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$23 {
  total_count?: number

  installations?: any[]

}

export interface GetByOrgIssuesQuery {
  /**
   * Indicates which sorts of issues to return. Can be one of:  
\* `assigned`: Issues assigned to you  
\* `created`: Issues created by you  
\* `mentioned`: Issues mentioning you  
\* `subscribed`: Issues you're subscribed to updates for  
\* `all` or `repos`: All issues the authenticated user can see, regardless of participation or creation
   */
  filter?: string

  /**
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   */
  state?: string

  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string

  /**
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   */
  sort?: string

  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: string

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOrgMembersQuery {
  /**
   * Filter members returned in the list. Can be one of:  
\* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.  
\* `all` - All members the authenticated user can see.
   */
  filter?: string

  /**
   * Filter members returned by their role. Can be one of:  
\* `all` - All members of the organization, regardless of role.  
\* `admin` - Organization owners.  
\* `member` - Non-owner organization members.
   */
  role?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$24 {
  can_create_repository?: boolean

}

/**
 * Org Membership
 */
export interface Org_membership {
  url?: string

  /**
   * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
   */
  state?: string

  /**
   * The user's membership type in the organization.
   */
  role?: string

  organization_url?: string

  organization?: any

  user?: any

  permissions?: UnnamedModel$24

}

export interface UnnamedModel$25 {
  /**
   * The role to give the user in the organization. Can be one of:  
\* `admin` - The user will become an owner of the organization.  
\* `member` - The user will become a non-owner member of the organization.
   */
  role?: string

}

export interface GetByOrgOutsideCollaboratorsQuery {
  /**
   * Filter the list of outside collaborators. Can be one of:  
\* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.  
\* `all`: All outside collaborators.
   */
  filter?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOrgPreReceiveHooksQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: string

  /**
   * The sort order for the response collection.
   */
  sort?: string

}

export interface Org_pre_receive_hook {
  id?: number

  name?: string

  enforcement?: string

  configuration_url?: string

  allow_downstream_configuration?: boolean

}

export interface UnnamedModel$26 {
  /**
   * The state of enforcement for the hook on this repository.
   */
  enforcement?: string

  /**
   * Whether repositories can override enforcement.
   */
  allow_downstream_configuration?: boolean

}

export interface GetByOrgProjectsQuery {
  /**
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   */
  state?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Projects are a way to organize columns and cards of work.
 */
export interface Project {
  owner_url?: string

  url?: string

  html_url?: string

  columns_url?: string

  id?: number

  node_id?: string

  /**
   * Name of the project
   */
  name?: string

  /**
   * Body of the project
   */
  body?: string | null

  number?: number

  /**
   * State of the project; either 'open' or 'closed'
   */
  state?: string

  creator?: any

  created_at?: string

  updated_at?: string

  /**
   * The baseline permission that all organization members have on this project. Only present if owner is an organization.
   */
  organization_permission?: string

  /**
   * Whether or not this project can be seen by everyone. Only present if owner is an organization.
   */
  private?: boolean

}

export interface UnnamedModel$27 {
  /**
   * The name of the project.
   */
  name?: string

  /**
   * The description of the project.
   */
  body?: string

}

export interface GetByOrgPublicMembersQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOrgReposQuery {
  /**
   * Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Note: For GitHub AE, can be one of `all`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. However, the `internal` value is not yet supported when a GitHub App calls this API with an installation access token.
   */
  type?: string

  /**
   * Can be one of `created`, `updated`, `pushed`, `full_name`.
   */
  sort?: string

  /**
   * Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc`
   */
  direction?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$28 {
  /**
   * The name of the repository.
   */
  name?: string

  /**
   * A short description of the repository.
   */
  description?: string

  /**
   * A URL with more information about the repository.
   */
  homepage?: string

  /**
   * Whether the repository is private.
   */
  private?: boolean

  /**
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.  
The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
   */
  visibility?: string

  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   */
  has_issues?: boolean

  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   */
  has_projects?: boolean

  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   */
  has_wiki?: boolean

  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   */
  is_template?: boolean

  /**
   * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
   */
  team_id?: number

  /**
   * Pass `true` to create an initial commit with empty README.
   */
  auto_init?: boolean

  /**
   * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
   */
  gitignore_template?: string

  /**
   * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
   */
  license_template?: string

  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   */
  allow_squash_merge?: boolean

  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   */
  allow_merge_commit?: boolean

  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   */
  allow_rebase_merge?: boolean

  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   */
  delete_branch_on_merge?: boolean

}

export interface GetByOrgTeamsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$29 {
  pull?: boolean

  triage?: boolean

  push?: boolean

  maintain?: boolean

  admin?: boolean

}

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id?: number

  node_id?: string

  name?: string

  slug?: string

  description?: string | null

  privacy?: string

  permission?: string

  permissions?: UnnamedModel$29

  url?: string

  html_url?: string

  members_url?: string

  repositories_url?: string

  parent?: any

}

export interface UnnamedModel$30 {
  /**
   * The name of the team.
   */
  name?: string

  /**
   * The description of the team.
   */
  description?: string

  maintainers?: string[]

  repo_names?: string[]

  /**
   * The level of privacy this team should have. The options are:  
**For a non-nested team:**  
\* `secret` - only visible to organization owners and members of this team.  
\* `closed` - visible to all members of this organization.  
Default: `secret`  
**For a parent or child team:**  
\* `closed` - visible to all members of this organization.  
Default for child team: `closed`
   */
  privacy?: string

  /**
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
\* `pull` - team members can pull, but not push to or administer newly-added repositories.  
\* `push` - team members can pull and push, but not administer newly-added repositories.
   */
  permission?: string

  /**
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number

  /**
   * The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the "[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.0/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team)" endpoint to change the LDAP DN. For more information, see "[Using LDAP](https://docs.github.com/enterprise-server@3.0/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync)."
   */
  ldap_dn?: string

}

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team_full {
  /**
   * Unique identifier of the team
   */
  id?: number

  node_id?: string

  /**
   * URL for the team
   */
  url?: string

  html_url?: string

  /**
   * Name of the team
   */
  name?: string

  slug?: string

  description?: string | null

  /**
   * The level of privacy this team should have
   */
  privacy?: string

  /**
   * Permission that the team will have for its repositories
   */
  permission?: string

  members_url?: string

  repositories_url?: string

  parent?: any

  members_count?: number

  repos_count?: number

  created_at?: string

  updated_at?: string

  organization?: any

  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string

}

export interface UnnamedModel$31 {
  /**
   * The name of the team.
   */
  name?: string

  /**
   * The description of the team.
   */
  description?: string

  /**
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  
**For a non-nested team:**  
\* `secret` - only visible to organization owners and members of this team.  
\* `closed` - visible to all members of this organization.  
**For a parent or child team:**  
\* `closed` - visible to all members of this organization.
   */
  privacy?: string

  /**
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
\* `pull` - team members can pull, but not push to or administer newly-added repositories.  
\* `push` - team members can pull and push, but not administer newly-added repositories.  
\* `admin` - team members can pull, push and administer newly-added repositories.
   */
  permission?: string

  /**
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number | null

}

export interface GetByOrgTeamsAndTeamSlugDiscussionsQuery {
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Pinned discussions only filter
   */
  pinned?: string

}

/**
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export interface Team_discussion {
  author?: any

  /**
   * The main text of the discussion.
   */
  body?: string

  body_html?: string

  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version?: string

  comments_count?: number

  comments_url?: string

  created_at?: string

  last_edited_at?: string | null

  html_url?: string

  node_id?: string

  /**
   * The unique sequence number of a team discussion.
   */
  number?: number

  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   */
  pinned?: boolean

  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   */
  private?: boolean

  team_url?: string

  /**
   * The title of the discussion.
   */
  title?: string

  updated_at?: string

  url?: string

  reactions?: any

}

export interface UnnamedModel$32 {
  /**
   * The discussion post's title.
   */
  title?: string

  /**
   * The discussion post's body text.
   */
  body?: string

  /**
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   */
  private?: boolean

}

export interface UnnamedModel$33 {
  /**
   * The discussion post's title.
   */
  title?: string

  /**
   * The discussion post's body text.
   */
  body?: string

}

export interface GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsQuery {
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * A reply to a discussion within a team.
 */
export interface Team_discussion_comment {
  author?: any

  /**
   * The main text of the comment.
   */
  body?: string

  body_html?: string

  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   */
  body_version?: string

  created_at?: string

  last_edited_at?: string | null

  discussion_url?: string

  html_url?: string

  node_id?: string

  /**
   * The unique sequence number of a team discussion comment.
   */
  number?: number

  updated_at?: string

  url?: string

  reactions?: any

}

export interface UnnamedModel$34 {
  /**
   * The discussion comment's body text.
   */
  body?: string

}

export interface UnnamedModel$35 {
  /**
   * The discussion comment's body text.
   */
  body?: string

}

export interface GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactionsQuery {
  /**
   * Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export interface Reaction {
  id?: number

  node_id?: string

  user?: any

  /**
   * The reaction to use
   */
  content?: string

  created_at?: string

}

export interface UnnamedModel$36 {
  /**
   * The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the team discussion comment.
   */
  content?: string

}

export interface GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactionsQuery {
  /**
   * Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$37 {
  /**
   * The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the team discussion.
   */
  content?: string

}

export interface GetByOrgTeamsAndTeamSlugMembersQuery {
  /**
   * Filters members returned by their role in the team. Can be one of:  
\* `member` - normal members of the team.  
\* `maintainer` - team maintainers.  
\* `all` - all members of the team.
   */
  role?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Team Membership
 */
export interface Team_membership {
  url?: string

  /**
   * The role of the user in the team.
   */
  role?: string

  /**
   * The state of the user's membership in the team.
   */
  state?: string

}

export interface UnnamedModel$38 {
  /**
   * The role that this user should have in the team. Can be one of:  
\* `member` - a normal member of the team.  
\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
   */
  role?: string

}

export interface GetByOrgTeamsAndTeamSlugProjectsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$39 {
  read?: boolean

  write?: boolean

  admin?: boolean

}

/**
 * A team's access to a project.
 */
export interface Team_project {
  owner_url?: string

  url?: string

  html_url?: string

  columns_url?: string

  id?: number

  node_id?: string

  name?: string

  body?: string | null

  number?: number

  state?: string

  creator?: any

  created_at?: string

  updated_at?: string

  /**
   * The organization permission for this project. Only present when owner is an organization.
   */
  organization_permission?: string

  /**
   * Whether the project is private or not. Only present when owner is an organization.
   */
  private?: boolean

  permissions?: UnnamedModel$39

}

export interface GetByOrgTeamsAndTeamSlugReposQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$40 {
  admin?: boolean

  pull?: boolean

  triage?: boolean

  push?: boolean

  maintain?: boolean

}

/**
 * A team's access to a repository.
 */
export interface Team_repository {
  /**
   * Unique identifier of the repository
   */
  id?: number

  node_id?: string

  /**
   * The name of the repository.
   */
  name?: string

  full_name?: string

  license?: any

  forks?: number

  permissions?: UnnamedModel$40

  owner?: any

  /**
   * Whether the repository is private or public.
   */
  private?: boolean

  html_url?: string

  description?: string | null

  fork?: boolean

  url?: string

  archive_url?: string

  assignees_url?: string

  blobs_url?: string

  branches_url?: string

  collaborators_url?: string

  comments_url?: string

  commits_url?: string

  compare_url?: string

  contents_url?: string

  contributors_url?: string

  deployments_url?: string

  downloads_url?: string

  events_url?: string

  forks_url?: string

  git_commits_url?: string

  git_refs_url?: string

  git_tags_url?: string

  git_url?: string

  issue_comment_url?: string

  issue_events_url?: string

  issues_url?: string

  keys_url?: string

  labels_url?: string

  languages_url?: string

  merges_url?: string

  milestones_url?: string

  notifications_url?: string

  pulls_url?: string

  releases_url?: string

  ssh_url?: string

  stargazers_url?: string

  statuses_url?: string

  subscribers_url?: string

  subscription_url?: string

  tags_url?: string

  teams_url?: string

  trees_url?: string

  clone_url?: string

  mirror_url?: string | null

  hooks_url?: string

  svn_url?: string

  homepage?: string | null

  language?: string | null

  forks_count?: number

  stargazers_count?: number

  watchers_count?: number

  size?: number

  /**
   * The default branch of the repository.
   */
  default_branch?: string

  open_issues_count?: number

  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   */
  is_template?: boolean

  topics?: string[]

  /**
   * Whether issues are enabled.
   */
  has_issues?: boolean

  /**
   * Whether projects are enabled.
   */
  has_projects?: boolean

  /**
   * Whether the wiki is enabled.
   */
  has_wiki?: boolean

  has_pages?: boolean

  /**
   * Whether downloads are enabled.
   */
  has_downloads?: boolean

  /**
   * Whether the repository is archived.
   */
  archived?: boolean

  /**
   * Returns whether or not this repository disabled.
   */
  disabled?: boolean

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string

  pushed_at?: string | null

  created_at?: string | null

  updated_at?: string | null

  /**
   * Whether to allow rebase merges for pull requests.
   */
  allow_rebase_merge?: boolean

  template_repository?: any

  temp_clone_token?: string

  /**
   * Whether to allow squash merges for pull requests.
   */
  allow_squash_merge?: boolean

  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean

  /**
   * Whether to allow merge commits for pull requests.
   */
  allow_merge_commit?: boolean

  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean

  subscribers_count?: number

  network_count?: number

  open_issues?: number

  watchers?: number

  master_branch?: string

}

export interface UnnamedModel$41 {
  /**
   * The permission to grant the team on this repository. Can be one of:  
\* `pull` - team members can pull, but not push to or administer this repository.  
\* `push` - team members can pull and push, but not administer this repository.  
\* `admin` - team members can pull, push and administer this repository.  
\* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  
\* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  
  
If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   */
  permission?: string

}

export interface GetByOrgTeamsAndTeamSlugTeamsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}
