/* eslint-disable */

/**
 * This file was auto generated by `autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the autoapi cli.
 */

export interface UnnamedModel {
  /**
   * The name of the team.
   */
  name?: string

  /**
   * The description of the team.
   */
  description?: string

  /**
   * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  
**For a non-nested team:**  
\* `secret` - only visible to organization owners and members of this team.  
\* `closed` - visible to all members of this organization.  
**For a parent or child team:**  
\* `closed` - visible to all members of this organization.
   */
  privacy?: string

  /**
   * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  
\* `pull` - team members can pull, but not push to or administer newly-added repositories.  
\* `push` - team members can pull and push, but not administer newly-added repositories.  
\* `admin` - team members can pull, push and administer newly-added repositories.
   */
  permission?: string

  /**
   * The ID of a team to set as the parent team.
   */
  parent_team_id?: number | null

}

export interface GetByTeamIdDiscussionsQuery {
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$1 {
  /**
   * The discussion post's title.
   */
  title?: string

  /**
   * The discussion post's body text.
   */
  body?: string

  /**
   * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
   */
  private?: boolean

}

export interface UnnamedModel$2 {
  /**
   * The discussion post's title.
   */
  title?: string

  /**
   * The discussion post's body text.
   */
  body?: string

}

export interface GetByTeamIdDiscussionsAndDiscussionNumberCommentsQuery {
  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$3 {
  /**
   * The discussion comment's body text.
   */
  body?: string

}

export interface UnnamedModel$4 {
  /**
   * The discussion comment's body text.
   */
  body?: string

}

export interface GetByTeamIdDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactionsQuery {
  /**
   * Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment.
   */
  content?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$5 {
  /**
   * The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the team discussion comment.
   */
  content?: string

}

export interface GetByTeamIdDiscussionsAndDiscussionNumberReactionsQuery {
  /**
   * Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion.
   */
  content?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$6 {
  /**
   * The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the team discussion.
   */
  content?: string

}

export interface GetByTeamIdMembersQuery {
  /**
   * Filters members returned by their role in the team. Can be one of:  
\* `member` - normal members of the team.  
\* `maintainer` - team maintainers.  
\* `all` - all members of the team.
   */
  role?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$7 {
  /**
   * The role that this user should have in the team. Can be one of:  
\* `member` - a normal member of the team.  
\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
   */
  role?: string

}

export interface GetByTeamIdProjectsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$8 {
  /**
   * The permission to grant to the team for this project. Can be one of:  
\* `read` - team members can read, but not write to or administer this project.  
\* `write` - team members can read and write, but not administer this project.  
\* `admin` - team members can read, write and administer this project.  
Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  permission?: string

}

export interface GetByTeamIdReposQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$9 {
  /**
   * The permission to grant the team on this repository. Can be one of:  
\* `pull` - team members can pull, but not push to or administer this repository.  
\* `push` - team members can pull and push, but not administer this repository.  
\* `admin` - team members can pull, push and administer this repository.  
  
If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
   */
  permission?: string

}

export interface GetByTeamIdTeamsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}
