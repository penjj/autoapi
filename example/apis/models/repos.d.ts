/* eslint-disable */

/**
 * This file was auto generated by `ts-autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the ts-autoapi cli.
 */

export interface UnnamedModel {
  admin?: boolean

  maintain?: boolean

  push?: boolean

  triage?: boolean

  pull?: boolean

}

/**
 * Code of Conduct Simple
 */
export interface Code_of_conduct_simple {
  url?: string

  key?: string

  name?: string

  html_url?: string | null

}

/**
 * Full Repository
 */
export interface Full_repository {
  id?: number

  node_id?: string

  name?: string

  full_name?: string

  owner?: any

  private?: boolean

  html_url?: string

  description?: string | null

  fork?: boolean

  url?: string

  archive_url?: string

  assignees_url?: string

  blobs_url?: string

  branches_url?: string

  collaborators_url?: string

  comments_url?: string

  commits_url?: string

  compare_url?: string

  contents_url?: string

  contributors_url?: string

  deployments_url?: string

  downloads_url?: string

  events_url?: string

  forks_url?: string

  git_commits_url?: string

  git_refs_url?: string

  git_tags_url?: string

  git_url?: string

  issue_comment_url?: string

  issue_events_url?: string

  issues_url?: string

  keys_url?: string

  labels_url?: string

  languages_url?: string

  merges_url?: string

  milestones_url?: string

  notifications_url?: string

  pulls_url?: string

  releases_url?: string

  ssh_url?: string

  stargazers_url?: string

  statuses_url?: string

  subscribers_url?: string

  subscription_url?: string

  tags_url?: string

  teams_url?: string

  trees_url?: string

  clone_url?: string

  mirror_url?: string | null

  hooks_url?: string

  svn_url?: string

  homepage?: string | null

  language?: string | null

  forks_count?: number

  stargazers_count?: number

  watchers_count?: number

  size?: number

  default_branch?: string

  open_issues_count?: number

  is_template?: boolean

  topics?: string[]

  has_issues?: boolean

  has_projects?: boolean

  has_wiki?: boolean

  has_pages?: boolean

  has_downloads?: boolean

  archived?: boolean

  /**
   * Returns whether or not this repository disabled.
   */
  disabled?: boolean

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string

  pushed_at?: string

  created_at?: string

  updated_at?: string

  permissions?: UnnamedModel

  allow_rebase_merge?: boolean

  template_repository?: any

  temp_clone_token?: string | null

  allow_squash_merge?: boolean

  delete_branch_on_merge?: boolean

  allow_merge_commit?: boolean

  allow_forking?: boolean

  subscribers_count?: number

  network_count?: number

  license?: any

  organization?: any

  parent?: any

  source?: any

  forks?: number

  master_branch?: string

  open_issues?: number

  watchers?: number

  /**
   * Whether anonymous git access is allowed.
   */
  anonymous_access_enabled?: boolean

  /**
   * Code of Conduct Simple
   */
  code_of_conduct?: Code_of_conduct_simple

}

export interface UnnamedModel$1 {
  /**
   * The name of the repository.
   */
  name?: string

  /**
   * A short description of the repository.
   */
  description?: string

  /**
   * A URL with more information about the repository.
   */
  homepage?: string

  /**
   * Either `true` to make the repository private or `false` to make it public. Default: `false`.
**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
   */
  private?: boolean

  /**
   * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`."
   */
  visibility?: string

  /**
   * Either `true` to enable issues for this repository or `false` to disable them.
   */
  has_issues?: boolean

  /**
   * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
   */
  has_projects?: boolean

  /**
   * Either `true` to enable the wiki for this repository or `false` to disable it.
   */
  has_wiki?: boolean

  /**
   * Either `true` to make this repo available as a template repository or `false` to prevent it.
   */
  is_template?: boolean

  /**
   * Updates the default branch for this repository.
   */
  default_branch?: string

  /**
   * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
   */
  allow_squash_merge?: boolean

  /**
   * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
   */
  allow_merge_commit?: boolean

  /**
   * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
   */
  allow_rebase_merge?: boolean

  /**
   * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
   */
  delete_branch_on_merge?: boolean

  /**
   * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
   */
  archived?: boolean

  /**
   * Either `true` to allow private forks, or `false` to prevent private forks.
   */
  allow_forking?: boolean

}

export interface GetByOwnerAndRepoActionsArtifactsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * An artifact
 */
export interface Artifact {
  id?: number

  node_id?: string

  /**
   * The name of the artifact.
   */
  name?: string

  /**
   * The size in bytes of the artifact.
   */
  size_in_bytes?: number

  url?: string

  archive_download_url?: string

  /**
   * Whether or not the artifact has expired.
   */
  expired?: boolean

  created_at?: string | null

  expires_at?: string | null

  updated_at?: string | null

}

export interface UnnamedModel$2 {
  total_count?: number

  /**
   * An artifact
   */
  artifacts?: Artifact[]

}

export interface UnnamedModel$3 {
  /**
   * The phase of the lifecycle that the job is currently in.
   */
  status?: string

  /**
   * The outcome of the job.
   */
  conclusion?: string | null

  /**
   * The name of the job.
   */
  name?: string

  number?: number

  /**
   * The time that the step started, in ISO 8601 format.
   */
  started_at?: string | null

  /**
   * The time that the job finished, in ISO 8601 format.
   */
  completed_at?: string | null

}

/**
 * Information of a job execution in a workflow run
 */
export interface Job {
  /**
   * The id of the job.
   */
  id?: number

  /**
   * The id of the associated workflow run.
   */
  run_id?: number

  run_url?: string

  /**
   * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
   */
  run_attempt?: number

  node_id?: string

  /**
   * The SHA of the commit that is being run.
   */
  head_sha?: string

  url?: string

  html_url?: string | null

  /**
   * The phase of the lifecycle that the job is currently in.
   */
  status?: string

  /**
   * The outcome of the job.
   */
  conclusion?: string | null

  /**
   * The time that the job started, in ISO 8601 format.
   */
  started_at?: string

  /**
   * The time that the job finished, in ISO 8601 format.
   */
  completed_at?: string | null

  /**
   * The name of the job.
   */
  name?: string

  steps?: UnnamedModel$3[]

  check_run_url?: string

}

export interface Actions_repository_permissions {
  /**
   * Whether GitHub Actions is enabled on the repository.
   */
  enabled?: boolean

  allowed_actions?: any

  selected_actions_url?: any

}

export interface UnnamedModel$4 {
  enabled?: any

  allowed_actions?: any

}

export interface GetByOwnerAndRepoActionsRunnersQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$5 {
  total_count?: number

  runners?: any[]

}

export interface GetByOwnerAndRepoActionsRunsQuery {
  /**
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string

  /**
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string

  /**
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string

  /**
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run)."
   */
  status?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.0/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   */
  created?: string

  /**
   * If `true` pull requests are omitted from the response (empty array).
   */
  excludepullrequests?: boolean

}

/**
 * An invocation of a workflow
 */
export interface Workflow_run {
  /**
   * The ID of the workflow run.
   */
  id?: number

  /**
   * The name of the workflow run.
   */
  name?: string | null

  node_id?: string

  /**
   * The ID of the associated check suite.
   */
  check_suite_id?: number

  /**
   * The node ID of the associated check suite.
   */
  check_suite_node_id?: string

  head_branch?: string | null

  /**
   * The SHA of the head commit that points to the version of the workflow being run.
   */
  head_sha?: string

  /**
   * The auto incrementing run number for the workflow run.
   */
  run_number?: number

  /**
   * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   */
  run_attempt?: number

  event?: string

  status?: string | null

  conclusion?: string | null

  /**
   * The ID of the parent workflow.
   */
  workflow_id?: number

  /**
   * The URL to the workflow run.
   */
  url?: string

  html_url?: string

  pull_requests?: any[] | null

  created_at?: string

  updated_at?: string

  /**
   * The start time of the latest run. Resets on re-run.
   */
  run_started_at?: string

  /**
   * The URL to the jobs for the workflow run.
   */
  jobs_url?: string

  /**
   * The URL to download the logs for the workflow run.
   */
  logs_url?: string

  /**
   * The URL to the associated check suite.
   */
  check_suite_url?: string

  /**
   * The URL to the artifacts for the workflow run.
   */
  artifacts_url?: string

  /**
   * The URL to cancel the workflow run.
   */
  cancel_url?: string

  /**
   * The URL to rerun the workflow run.
   */
  rerun_url?: string

  /**
   * The URL to the previous attempted run of this workflow, if one exists.
   */
  previous_attempt_url?: string | null

  /**
   * The URL to the workflow.
   */
  workflow_url?: string

  head_commit?: any

  repository?: any

  head_repository?: any

  head_repository_id?: number

}

export interface UnnamedModel$6 {
  total_count?: number

  /**
   * An invocation of a workflow
   */
  workflow_runs?: Workflow_run[]

}

export interface GetByOwnerAndRepoActionsRunsAndRunIdQuery {
  /**
   * If `true` pull requests are omitted from the response (empty array).
   */
  excludepullrequests?: boolean

}

export interface GetByOwnerAndRepoActionsRunsAndRunIdArtifactsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$7 {
  total_count?: number

  artifacts?: any[]

}

export interface GetByOwnerAndRepoActionsRunsAndRunIdJobsQuery {
  /**
   * Filters jobs by their `completed_at` timestamp. Can be one of:
\* `latest`: Returns jobs from the most recent execution of the workflow run.
\* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
   */
  filter?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$8 {
  total_count?: number

  jobs?: any[]

}

export interface GetByOwnerAndRepoActionsSecretsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Set secrets for GitHub Actions.
 */
export interface Actions_secret {
  /**
   * The name of the secret.
   */
  name?: string

  created_at?: string

  updated_at?: string

}

export interface UnnamedModel$9 {
  total_count?: number

  /**
   * Set secrets for GitHub Actions.
   */
  secrets?: Actions_secret[]

}

export interface UnnamedModel$10 {
  /**
   * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#get-a-repository-public-key) endpoint.
   */
  encrypted_value?: string

  /**
   * ID of the key you used to encrypt the secret.
   */
  key_id?: string

}

export interface GetByOwnerAndRepoActionsWorkflowsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * A GitHub Actions workflow
 */
export interface Workflow {
  id?: number

  node_id?: string

  name?: string

  path?: string

  state?: string

  created_at?: string

  updated_at?: string

  url?: string

  html_url?: string

  badge_url?: string

  deleted_at?: string

}

export interface UnnamedModel$11 {
  total_count?: number

  /**
   * A GitHub Actions workflow
   */
  workflows?: Workflow[]

}

export interface UnnamedModel$12 {
  /**
   * The git reference for the workflow. The reference can be a branch or tag name.
   */
  ref?: string

  /**
   * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
   */
  inputs?: Record<string, any>

}

export interface GetByOwnerAndRepoActionsWorkflowsAndWorkflowIdRunsQuery {
  /**
   * Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run.
   */
  actor?: string

  /**
   * Returns workflow runs associated with a branch. Use the name of the branch of the `push`.
   */
  branch?: string

  /**
   * Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)."
   */
  event?: string

  /**
   * Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-run)."
   */
  status?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Returns workflow runs created within the given date-time range. For more information on the syntax, see "[Understanding the search syntax](https://docs.github.com/enterprise-server@3.0/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates)."
   */
  created?: string

  /**
   * If `true` pull requests are omitted from the response (empty array).
   */
  excludepullrequests?: boolean

}

export interface UnnamedModel$13 {
  total_count?: number

  workflow_runs?: any[]

}

export interface GetByOwnerAndRepoAssigneesQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOwnerAndRepoBranchesQuery {
  /**
   * Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches.
   */
  protected?: boolean

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$14 {
  sha?: string

  url?: string

}

/**
 * Protected Branch Required Status Check
 */
export interface Protected_branch_required_status_check {
  url?: string

  enforcement_level?: string

  contexts?: string[]

  contexts_url?: string

  strict?: boolean

}

/**
 * Protected Branch Admin Enforced
 */
export interface Protected_branch_admin_enforced {
  url?: string

  enabled?: boolean

}

export interface UnnamedModel$15 {
  users?: any[]

  teams?: any[]

  url?: string

  users_url?: string

  teams_url?: string

}

/**
 * Protected Branch Pull Request Review
 */
export interface Protected_branch_pull_request_review {
  url?: string

  dismissal_restrictions?: UnnamedModel$15

  dismiss_stale_reviews?: boolean

  require_code_owner_reviews?: boolean

  required_approving_review_count?: number

}

export interface UnnamedModel$16 {
  login?: string

  id?: number

  node_id?: string

  avatar_url?: string

  gravatar_id?: string

  url?: string

  html_url?: string

  followers_url?: string

  following_url?: string

  gists_url?: string

  starred_url?: string

  subscriptions_url?: string

  organizations_url?: string

  repos_url?: string

  events_url?: string

  received_events_url?: string

  type?: string

  site_admin?: boolean

}

export interface UnnamedModel$17 {
  id?: number

  node_id?: string

  url?: string

  html_url?: string

  name?: string

  slug?: string

  description?: string | null

  privacy?: string

  permission?: string

  members_url?: string

  repositories_url?: string

  parent?: string | null

}

export interface UnnamedModel$18 {
  login?: string

  id?: number

  node_id?: string

  url?: string

  repos_url?: string

  events_url?: string

  hooks_url?: string

  issues_url?: string

  members_url?: string

  public_members_url?: string

  avatar_url?: string

  description?: string

  gravatar_id?: string

  html_url?: string

  followers_url?: string

  following_url?: string

  gists_url?: string

  starred_url?: string

  subscriptions_url?: string

  organizations_url?: string

  received_events_url?: string

  type?: string

  site_admin?: boolean

}

export interface UnnamedModel$19 {
  metadata?: string

  contents?: string

  issues?: string

  single_file?: string

}

export interface UnnamedModel$20 {
  id?: number

  slug?: string

  node_id?: string

  owner?: UnnamedModel$18

  name?: string

  description?: string

  external_url?: string

  html_url?: string

  created_at?: string

  updated_at?: string

  permissions?: UnnamedModel$19

  events?: string[]

}

/**
 * Branch Restriction Policy
 */
export interface Branch_restriction_policy {
  url?: string

  users_url?: string

  teams_url?: string

  apps_url?: string

  users?: UnnamedModel$16[]

  teams?: UnnamedModel$17[]

  apps?: UnnamedModel$20[]

}

export interface UnnamedModel$21 {
  enabled?: boolean

}

export interface UnnamedModel$22 {
  enabled?: boolean

}

export interface UnnamedModel$23 {
  enabled?: boolean

}

export interface UnnamedModel$24 {
  enabled?: boolean

}

export interface UnnamedModel$25 {
  url?: string

  enabled?: boolean

}

/**
 * Branch Protection
 */
export interface Branch_protection {
  url?: string

  enabled?: boolean

  /**
   * Protected Branch Required Status Check
   */
  required_status_checks?: Protected_branch_required_status_check

  /**
   * Protected Branch Admin Enforced
   */
  enforce_admins?: Protected_branch_admin_enforced

  /**
   * Protected Branch Pull Request Review
   */
  required_pull_request_reviews?: Protected_branch_pull_request_review

  /**
   * Branch Restriction Policy
   */
  restrictions?: Branch_restriction_policy

  required_linear_history?: UnnamedModel$21

  allow_force_pushes?: UnnamedModel$22

  allow_deletions?: UnnamedModel$23

  required_conversation_resolution?: UnnamedModel$24

  name?: string

  protection_url?: string

  required_signatures?: UnnamedModel$25

}

/**
 * Short Branch
 */
export interface Short_branch {
  name?: string

  commit?: UnnamedModel$14

  protected?: boolean

  /**
   * Branch Protection
   */
  protection?: Branch_protection

  protection_url?: string

}

export interface UnnamedModel$26 {
  sha?: string

  url?: string

}

export interface Verification {
  verified?: boolean

  reason?: string

  payload?: string | null

  signature?: string | null

}

export interface UnnamedModel$27 {
  url?: string

  author?: any

  committer?: any

  message?: string

  comment_count?: number

  tree?: UnnamedModel$26

  verification?: Verification

}

export interface UnnamedModel$28 {
  sha?: string

  url?: string

  html_url?: string

}

export interface UnnamedModel$29 {
  additions?: number

  deletions?: number

  total?: number

}

/**
 * Diff Entry
 */
export interface Diff_entry {
  sha?: string

  filename?: string

  status?: string

  additions?: number

  deletions?: number

  changes?: number

  blob_url?: string

  raw_url?: string

  contents_url?: string

  patch?: string

  previous_filename?: string

}

/**
 * Commit
 */
export interface Commit {
  url?: string

  sha?: string

  node_id?: string

  html_url?: string

  comments_url?: string

  commit?: UnnamedModel$27

  author?: any

  committer?: any

  parents?: UnnamedModel$28[]

  stats?: UnnamedModel$29

  /**
   * Diff Entry
   */
  files?: Diff_entry[]

}

export interface UnnamedModel$30 {
  html?: string

  self?: string

}

/**
 * Branch With Protection
 */
export interface Branch_with_protection {
  name?: string

  /**
   * Commit
   */
  commit?: Commit

  _links?: UnnamedModel$30

  protected?: boolean

  protection?: any

  protection_url?: string

  pattern?: string

  required_approving_review_count?: number

}

export interface UnnamedModel$31 {
  /**
   * Require status checks to pass before merging. Set to `null` to disable.
   */
  required_status_checks?: any | null

  /**
   * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
   */
  enforce_admins?: boolean | null

  /**
   * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
   */
  required_pull_request_reviews?: any | null

  /**
   * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
   */
  restrictions?: any | null

  /**
   * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
   */
  required_linear_history?: boolean

  /**
   * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
   */
  allow_force_pushes?: boolean | null

  /**
   * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
   */
  allow_deletions?: boolean

  /**
   * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
   */
  required_conversation_resolution?: boolean

  contexts?: string[]

}

/**
 * Status Check Policy
 */
export interface Status_check_policy {
  url?: string

  strict?: boolean

  contexts?: string[]

  contexts_url?: string

}

export interface UnnamedModel$32 {
  url?: string

  users_url?: string

  teams_url?: string

  users?: any[]

  teams?: any[]

}

export interface UnnamedModel$33 {
  url?: string

  dismiss_stale_reviews?: boolean

  require_code_owner_reviews?: boolean

  required_approving_review_count?: number

  dismissal_restrictions?: UnnamedModel$32

}

export interface UnnamedModel$34 {
  url?: string

  enabled?: boolean

}

export interface UnnamedModel$35 {
  url?: string

  enabled?: boolean

}

export interface UnnamedModel$36 {
  enabled?: boolean

}

export interface UnnamedModel$37 {
  enabled?: boolean

}

export interface UnnamedModel$38 {
  enabled?: boolean

}

export interface UnnamedModel$39 {
  enabled?: boolean

}

/**
 * Branch protections protect branches
 */
export interface Protected_branch {
  url?: string

  /**
   * Status Check Policy
   */
  required_status_checks?: Status_check_policy

  required_pull_request_reviews?: UnnamedModel$33

  required_signatures?: UnnamedModel$34

  enforce_admins?: UnnamedModel$35

  required_linear_history?: UnnamedModel$36

  allow_force_pushes?: UnnamedModel$37

  allow_deletions?: UnnamedModel$38

  restrictions?: any

  required_conversation_resolution?: UnnamedModel$39

}

/**
 * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
 */
export interface UnnamedModel$40 {
  users?: string[]

  teams?: string[]

}

export interface UnnamedModel$41 {
  /**
   * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
   */
  dismissal_restrictions?: UnnamedModel$40

  /**
   * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
   */
  dismiss_stale_reviews?: boolean

  /**
   * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
   */
  require_code_owner_reviews?: boolean

  /**
   * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.
   */
  required_approving_review_count?: number

}

export interface UnnamedModel$42 {
  /**
   * Require branches to be up to date before merging.
   */
  strict?: boolean

  contexts?: string[]

}

export interface UnnamedModel$43 {
  /**
   * The path of the file to add an annotation to. For example, `assets/css/main.css`.
   */
  path?: string

  /**
   * The start line of the annotation.
   */
  start_line?: number

  /**
   * The end line of the annotation.
   */
  end_line?: number

  /**
   * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
   */
  start_column?: number

  /**
   * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
   */
  end_column?: number

  /**
   * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
   */
  annotation_level?: string

  /**
   * A short description of the feedback for these lines of code. The maximum size is 64 KB.
   */
  message?: string

  /**
   * The title that represents the annotation. The maximum size is 255 characters.
   */
  title?: string

  /**
   * Details about this annotation. The maximum size is 64 KB.
   */
  raw_details?: string

}

export interface UnnamedModel$44 {
  /**
   * The alternative text for the image.
   */
  alt?: string

  /**
   * The full URL of the image.
   */
  image_url?: string

  /**
   * A short image description.
   */
  caption?: string

}

/**
 * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#output-object) description.
 */
export interface UnnamedModel$45 {
  /**
   * The title of the check run.
   */
  title?: string

  /**
   * The summary of the check run. This parameter supports Markdown.
   */
  summary?: string

  /**
   * The details of the check run. This parameter supports Markdown.
   */
  text?: string

  annotations?: UnnamedModel$43[]

  images?: UnnamedModel$44[]

}

export interface UnnamedModel$46 {
  /**
   * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
   */
  label?: string

  /**
   * A short explanation of what this action would do. The maximum size is 40 characters.
   */
  description?: string

  /**
   * A reference for the action on the integrator's system. The maximum size is 20 characters.
   */
  identifier?: string

}

export interface UnnamedModel$47 {
  /**
   * The name of the check. For example, "code-coverage".
   */
  name?: string

  /**
   * The SHA of the commit.
   */
  head_sha?: string

  /**
   * The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.
   */
  details_url?: string

  /**
   * A reference for the run on the integrator's system.
   */
  external_id?: string

  /**
   * The current status. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: string

  /**
   * The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  started_at?: string

  /**
   * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.
**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
   */
  conclusion?: string

  /**
   * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  completed_at?: string

  /**
   * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#output-object) description.
   */
  output?: UnnamedModel$45

  actions?: UnnamedModel$46[]

}

export interface UnnamedModel$48 {
  title?: string | null

  summary?: string | null

  text?: string | null

  annotations_count?: number

  annotations_url?: string

}

export interface UnnamedModel$49 {
  id?: number

  url?: string

  name?: string

}

export interface UnnamedModel$50 {
  ref?: string

  sha?: string

  repo?: UnnamedModel$49

}

export interface UnnamedModel$51 {
  id?: number

  url?: string

  name?: string

}

export interface UnnamedModel$52 {
  ref?: string

  sha?: string

  repo?: UnnamedModel$51

}

export interface Pull_request_minimal {
  id?: number

  number?: number

  url?: string

  head?: UnnamedModel$50

  base?: UnnamedModel$52

}

/**
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
export interface Deployment_simple {
  url?: string

  /**
   * Unique identifier of the deployment
   */
  id?: number

  node_id?: string

  /**
   * Parameter to specify a task to execute
   */
  task?: string

  original_environment?: string

  /**
   * Name for the target deployment environment.
   */
  environment?: string

  description?: string | null

  created_at?: string

  updated_at?: string

  statuses_url?: string

  repository_url?: string

  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   */
  transient_environment?: boolean

  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment?: boolean

  performed_via_github_app?: any

}

/**
 * A check performed on the code of a given code change
 */
export interface Check_run {
  /**
   * The id of the check.
   */
  id?: number

  /**
   * The SHA of the commit that is being checked.
   */
  head_sha?: string

  node_id?: string

  external_id?: string | null

  url?: string

  html_url?: string | null

  details_url?: string | null

  /**
   * The phase of the lifecycle that the check is currently in.
   */
  status?: string

  conclusion?: string | null

  started_at?: string | null

  completed_at?: string | null

  output?: UnnamedModel$48

  /**
   * The name of the check.
   */
  name?: string

  check_suite?: any | null

  app?: any

  pull_requests?: Pull_request_minimal[]

  /**
   * A deployment created as the result of an Actions check run from a workflow that references an environment
   */
  deployment?: Deployment_simple

}

export interface UnnamedModel$53 {
  /**
   * The path of the file to add an annotation to. For example, `assets/css/main.css`.
   */
  path?: string

  /**
   * The start line of the annotation.
   */
  start_line?: number

  /**
   * The end line of the annotation.
   */
  end_line?: number

  /**
   * The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
   */
  start_column?: number

  /**
   * The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.
   */
  end_column?: number

  /**
   * The level of the annotation. Can be one of `notice`, `warning`, or `failure`.
   */
  annotation_level?: string

  /**
   * A short description of the feedback for these lines of code. The maximum size is 64 KB.
   */
  message?: string

  /**
   * The title that represents the annotation. The maximum size is 255 characters.
   */
  title?: string

  /**
   * Details about this annotation. The maximum size is 64 KB.
   */
  raw_details?: string

}

export interface UnnamedModel$54 {
  /**
   * The alternative text for the image.
   */
  alt?: string

  /**
   * The full URL of the image.
   */
  image_url?: string

  /**
   * A short image description.
   */
  caption?: string

}

/**
 * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#output-object-1) description.
 */
export interface UnnamedModel$55 {
  /**
   * **Required**.
   */
  title?: string

  /**
   * Can contain Markdown.
   */
  summary?: string

  /**
   * Can contain Markdown.
   */
  text?: string

  annotations?: UnnamedModel$53[]

  images?: UnnamedModel$54[]

}

export interface UnnamedModel$56 {
  /**
   * The text to be displayed on a button in the web UI. The maximum size is 20 characters.
   */
  label?: string

  /**
   * A short explanation of what this action would do. The maximum size is 40 characters.
   */
  description?: string

  /**
   * A reference for the action on the integrator's system. The maximum size is 20 characters.
   */
  identifier?: string

}

export interface UnnamedModel$57 {
  /**
   * The name of the check. For example, "code-coverage".
   */
  name?: string

  /**
   * The URL of the integrator's site that has the full details of the check.
   */
  details_url?: string

  /**
   * A reference for the run on the integrator's system.
   */
  external_id?: string

  /**
   * This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  started_at?: string

  /**
   * The current status. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: string

  /**
   * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.
**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
   */
  conclusion?: string

  /**
   * The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  completed_at?: string

  /**
   * Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#output-object-1) description.
   */
  output?: UnnamedModel$55

  actions?: UnnamedModel$56[]

}

export interface GetByOwnerAndRepoCheckRunsAndCheckRunIdAnnotationsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Check Annotation
 */
export interface Check_annotation {
  path?: string

  start_line?: number

  end_line?: number

  start_column?: number | null

  end_column?: number | null

  annotation_level?: string | null

  title?: string | null

  message?: string | null

  raw_details?: string | null

  blob_href?: string

}

export interface UnnamedModel$58 {
  /**
   * The sha of the head commit.
   */
  head_sha?: string

}

/**
 * Simple Commit
 */
export interface Simple_commit {
  id?: string

  tree_id?: string

  message?: string

  timestamp?: string

  author?: any | null

  committer?: any | null

}

/**
 * A suite of checks performed on the code of a given code change
 */
export interface Check_suite {
  id?: number

  node_id?: string

  head_branch?: string | null

  /**
   * The SHA of the head commit that is being checked.
   */
  head_sha?: string

  status?: string | null

  conclusion?: string | null

  url?: string | null

  before?: string | null

  after?: string | null

  pull_requests?: any[] | null

  app?: any

  repository?: any

  created_at?: string | null

  updated_at?: string | null

  /**
   * Simple Commit
   */
  head_commit?: Simple_commit

  latest_check_runs_count?: number

  check_runs_url?: string

  rerequestable?: boolean

  runs_rerequestable?: boolean

}

export interface UnnamedModel$59 {
  /**
   * The `id` of the GitHub App.
   */
  app_id?: number

  /**
   * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
   */
  setting?: boolean

}

export interface UnnamedModel$60 {
  auto_trigger_checks?: UnnamedModel$59[]

}

export interface UnnamedModel$61 {
  app_id?: number

  setting?: boolean

}

export interface UnnamedModel$62 {
  auto_trigger_checks?: UnnamedModel$61[]

}

/**
 * Check suite configuration preferences for a repository.
 */
export interface Check_suite_preference {
  preferences?: UnnamedModel$62

  repository?: any

}

export interface GetByOwnerAndRepoCheckSuitesAndCheckSuiteIdCheckRunsQuery {
  /**
   * Returns check runs with the specified `name`.
   */
  checkname?: string

  /**
   * Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: string

  /**
   * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
   */
  filter?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$63 {
  total_count?: number

  check_runs?: any[]

}

export interface GetByOwnerAndRepoCodeScanningAlertsQuery {
  /**
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  toolname?: string

  /**
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  toolguid?: string | null

  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: string

  /**
   * Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state.
   */
  state?: string

}

export interface Code_scanning_alert_rule_summary {
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null

  /**
   * The name of the rule used to detect the alert.
   */
  name?: string

  /**
   * The severity of the alert.
   */
  severity?: string | null

  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string

}

export interface Code_scanning_analysis_tool {
  name?: any

  /**
   * The version of the tool used to generate the code scanning analysis.
   */
  version?: string | null

  guid?: any

}

export interface UnnamedModel$64 {
  text?: string

}

/**
 * Describe a region within a file for the alert.
 */
export interface Code_scanning_alert_location {
  path?: string

  start_line?: number

  end_line?: number

  start_column?: number

  end_column?: number

}

export interface Code_scanning_alert_instance {
  ref?: any

  /**
   * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
   */
  analysis_key?: string

  /**
   * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
   */
  environment?: string

  /**
   * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
   */
  category?: string

  state?: any

  commit_sha?: string

  message?: UnnamedModel$64

  /**
   * Describe a region within a file for the alert.
   */
  location?: Code_scanning_alert_location

  html_url?: string

  /**
   * A classification of the file. For example to identify it as generated.
   */
  classifications?: string | null[]

}

export interface Code_scanning_alert_items {
  /**
   * The security alert number.
   */
  number?: number

  /**
   * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  created_at?: string

  /**
   * The REST API URL of the alert resource.
   */
  url?: string

  /**
   * The GitHub URL of the alert resource.
   */
  html_url?: string

  /**
   * The REST API URL for fetching the list of instances for an alert.
   */
  instances_url?: string

  state?: any

  dismissed_by?: any

  /**
   * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  dismissed_at?: string | null

  /**
   * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
   */
  dismissed_reason?: string | null

  rule?: Code_scanning_alert_rule_summary

  tool?: Code_scanning_analysis_tool

  most_recent_instance?: Code_scanning_alert_instance

}

export interface Code_scanning_alert_rule {
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null

  /**
   * The name of the rule used to detect the alert.
   */
  name?: string

  /**
   * The severity of the alert.
   */
  severity?: string | null

  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string

  /**
   * description of the rule used to detect the alert.
   */
  full_description?: string

  /**
   * A set of tags applicable for the rule.
   */
  tags?: any[] | null

  /**
   * Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string | null

}

export interface Code_scanning_alert {
  number?: any

  created_at?: any

  url?: any

  html_url?: any

  instances_url?: any

  state?: any

  dismissed_by?: any

  dismissed_at?: any

  dismissed_reason?: any

  rule?: Code_scanning_alert_rule

  tool?: any

  most_recent_instance?: any

  instances?: any

}

export interface UnnamedModel$65 {
  /**
   * Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
   */
  state?: string

  dismissed_reason?: any

}

export interface GetByOwnerAndRepoCodeScanningAnalysesQuery {
  /**
   * The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both.
   */
  toolname?: any

  /**
   * The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both.
   */
  toolguid?: any

  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`.
   */
  ref?: any

  /**
   * Filter analyses belonging to the same SARIF upload.
   */
  sarifid?: string

}

export interface Code_scanning_analysis {
  ref?: any

  /**
   * The SHA of the commit to which the analysis you are uploading relates.
   */
  commit_sha?: string

  analysis_key?: any

  /**
   * Identifies the variable values associated with the environment in which this analysis was performed.
   */
  environment?: string

  category?: any

  error?: string

  /**
   * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  created_at?: string

  /**
   * The total number of results in the analysis.
   */
  results_count?: number

  /**
   * The total number of rules used in the analysis.
   */
  rules_count?: number

  /**
   * Unique identifier for this analysis.
   */
  id?: number

  /**
   * The REST API URL of the analysis resource.
   */
  url?: string

  sarif_id?: any

  tool?: any

  deletable?: boolean

  /**
   * Warning generated when processing the analysis
   */
  warning?: string

  tool_name?: string

}

export interface UnnamedModel$66 {
  commit_sha?: any

  ref?: any

  /**
   * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.0/code-security/secure-coding/sarif-support-for-code-scanning)."
   */
  sarif?: string

  /**
   * The base directory used in the analysis, as it appears in the SARIF file.
This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
   */
  checkout_uri?: string

  /**
   * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  started_at?: string

  /**
   * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
   */
  tool_name?: string

}

export interface GetByOwnerAndRepoCollaboratorsQuery {
  /**
   * Filter collaborators returned by their affiliation. Can be one of:
\* `outside`: All outside collaborators of an organization-owned repository.
\* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
\* `all`: All collaborators the authenticated user can see.
   */
  affiliation?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$67 {
  pull?: boolean

  triage?: boolean

  push?: boolean

  maintain?: boolean

  admin?: boolean

}

/**
 * Collaborator
 */
export interface Collaborator {
  login?: string

  id?: number

  email?: string | null

  name?: string | null

  node_id?: string

  avatar_url?: string

  gravatar_id?: string | null

  url?: string

  html_url?: string

  followers_url?: string

  following_url?: string

  gists_url?: string

  starred_url?: string

  subscriptions_url?: string

  organizations_url?: string

  repos_url?: string

  events_url?: string

  received_events_url?: string

  type?: string

  site_admin?: boolean

  permissions?: UnnamedModel$67

}

export interface UnnamedModel$68 {
  /**
   * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
\* `pull` - can pull, but not push to or administer this repository.
\* `push` - can pull and push, but not administer this repository.
\* `admin` - can pull, push and administer this repository.
\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
   */
  permission?: string

  permissions?: string

}

/**
 * Repository Collaborator Permission
 */
export interface Repository_collaborator_permission {
  permission?: string

  user?: any

}

export interface GetByOwnerAndRepoCommentsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Commit Comment
 */
export interface Commit_comment {
  html_url?: string

  url?: string

  id?: number

  node_id?: string

  body?: string

  path?: string | null

  position?: number | null

  line?: number | null

  commit_id?: string

  user?: any

  created_at?: string

  updated_at?: string

  author_association?: any

  reactions?: any

}

export interface UnnamedModel$69 {
  /**
   * The contents of the comment
   */
  body?: string

}

export interface GetByOwnerAndRepoCommentsAndCommentIdReactionsQuery {
  /**
   * Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment.
   */
  content?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$70 {
  /**
   * The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the commit comment.
   */
  content?: string

}

export interface GetByOwnerAndRepoCommitsQuery {
  /**
   * SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`).
   */
  sha?: string

  /**
   * Only commits containing this file path will be returned.
   */
  path?: string

  /**
   * GitHub login or email address by which to filter by commit author.
   */
  author?: string

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  until?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$71 {
  sha?: string

  url?: string

}

/**
 * Branch Short
 */
export interface Branch_short {
  name?: string

  commit?: UnnamedModel$71

  protected?: boolean

}

export interface GetByOwnerAndRepoCommitsAndCommitShaCommentsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$72 {
  /**
   * The contents of the comment.
   */
  body?: string

  /**
   * Relative path of the file to comment on.
   */
  path?: string

  /**
   * Line index in the diff to comment on.
   */
  position?: number

  /**
   * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
   */
  line?: number

}

export interface GetByOwnerAndRepoCommitsAndCommitShaPullsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$73 {
  id?: number

  node_id?: string

  url?: string

  name?: string

  description?: string

  color?: string

  default?: boolean

}

export interface UnnamedModel$74 {
  label?: string

  ref?: string

  repo?: any

  sha?: string

  user?: any

}

export interface UnnamedModel$75 {
  label?: string

  ref?: string

  repo?: any

  sha?: string

  user?: any

}

/**
 * Hypermedia Link
 */
export interface Link {
  href?: string

}

export interface UnnamedModel$76 {
  /**
   * Hypermedia Link
   */
  comments?: Link

  commits?: any

  statuses?: any

  html?: any

  issue?: any

  review_comments?: any

  review_comment?: any

  self?: any

}

/**
 * Pull Request Simple
 */
export interface Pull_request_simple {
  url?: string

  id?: number

  node_id?: string

  html_url?: string

  diff_url?: string

  patch_url?: string

  issue_url?: string

  commits_url?: string

  review_comments_url?: string

  review_comment_url?: string

  comments_url?: string

  statuses_url?: string

  number?: number

  state?: string

  locked?: boolean

  title?: string

  user?: any

  body?: string | null

  labels?: UnnamedModel$73[]

  milestone?: any

  active_lock_reason?: string | null

  created_at?: string

  updated_at?: string

  closed_at?: string | null

  merged_at?: string | null

  merge_commit_sha?: string | null

  assignee?: any

  assignees?: any[] | null

  requested_reviewers?: any[] | null

  requested_teams?: any[] | null

  head?: UnnamedModel$74

  base?: UnnamedModel$75

  _links?: UnnamedModel$76

  author_association?: any

  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean

}

export interface GetByOwnerAndRepoCommitsAndRefQuery {
  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Results per page (max 100)
   */
  perpage?: number

}

export interface GetByOwnerAndRepoCommitsAndRefCheckRunsQuery {
  /**
   * Returns check runs with the specified `name`.
   */
  checkname?: string

  /**
   * Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`.
   */
  status?: string

  /**
   * Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`.
   */
  filter?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

  appid?: number

}

export interface UnnamedModel$77 {
  total_count?: number

  check_runs?: any[]

}

export interface GetByOwnerAndRepoCommitsAndRefCheckSuitesQuery {
  /**
   * Filters check suites by GitHub App `id`.
   */
  appid?: number

  /**
   * Returns check runs with the specified `name`.
   */
  checkname?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$78 {
  total_count?: number

  check_suites?: any[]

}

export interface GetByOwnerAndRepoCommitsAndRefStatusQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface Simple_commit_status {
  description?: string | null

  id?: number

  node_id?: string

  state?: string

  context?: string

  target_url?: string

  required?: boolean | null

  avatar_url?: string | null

  url?: string

  created_at?: string

  updated_at?: string

}

/**
 * Combined Commit Status
 */
export interface Combined_commit_status {
  state?: string

  statuses?: Simple_commit_status[]

  sha?: string

  total_count?: number

  repository?: any

  commit_url?: string

  url?: string

}

export interface GetByOwnerAndRepoCommitsAndRefStatusesQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * The status of a commit.
 */
export interface Status {
  url?: string

  avatar_url?: string | null

  id?: number

  node_id?: string

  state?: string

  description?: string

  target_url?: string

  context?: string

  created_at?: string

  updated_at?: string

  creator?: any

}

/**
 * Commit Comparison
 */
export interface Commit_comparison {
  url?: string

  html_url?: string

  permalink_url?: string

  diff_url?: string

  patch_url?: string

  base_commit?: any

  merge_base_commit?: any

  status?: string

  ahead_by?: number

  behind_by?: number

  total_commits?: number

  commits?: any[]

  files?: any[]

}

export interface UnnamedModel$79 {
  /**
   * The title of the attachment
   */
  title?: string

  /**
   * The body of the attachment
   */
  body?: string

}

/**
 * Content Reference attachments allow you to provide context around URLs posted in comments
 */
export interface Content_reference_attachment {
  /**
   * The ID of the attachment
   */
  id?: number

  /**
   * The title of the attachment
   */
  title?: string

  /**
   * The body of the attachment
   */
  body?: string

  /**
   * The node_id of the content attachment
   */
  node_id?: string

}

export interface GetByOwnerAndRepoContentsAndPathQuery {
  /**
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string

}

/**
 * The person that committed the file. Default: the authenticated user.
 */
export interface UnnamedModel$80 {
  /**
   * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
   */
  name?: string

  /**
   * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
   */
  email?: string

  date?: string

}

/**
 * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
 */
export interface UnnamedModel$81 {
  /**
   * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
   */
  name?: string

  /**
   * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
   */
  email?: string

  date?: string

}

export interface UnnamedModel$82 {
  /**
   * The commit message.
   */
  message?: string

  /**
   * The new file content, using Base64 encoding.
   */
  content?: string

  /**
   * **Required if you are updating a file**. The blob SHA of the file being replaced.
   */
  sha?: string

  /**
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string

  /**
   * The person that committed the file. Default: the authenticated user.
   */
  committer?: UnnamedModel$80

  /**
   * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
   */
  author?: UnnamedModel$81

}

export interface UnnamedModel$83 {
  date?: string

  name?: string

  email?: string

}

export interface UnnamedModel$84 {
  date?: string

  name?: string

  email?: string

}

export interface UnnamedModel$85 {
  url?: string

  sha?: string

}

export interface UnnamedModel$86 {
  url?: string

  html_url?: string

  sha?: string

}

export interface UnnamedModel$87 {
  verified?: boolean

  reason?: string

  signature?: string | null

  payload?: string | null

}

export interface UnnamedModel$88 {
  sha?: string

  node_id?: string

  url?: string

  html_url?: string

  author?: UnnamedModel$83

  committer?: UnnamedModel$84

  message?: string

  tree?: UnnamedModel$85

  parents?: UnnamedModel$86[]

  verification?: UnnamedModel$87

}

/**
 * File Commit
 */
export interface File_commit {
  content?: any | null

  commit?: UnnamedModel$88

}

/**
 * object containing information about the committer.
 */
export interface UnnamedModel$89 {
  /**
   * The name of the author (or committer) of the commit
   */
  name?: string

  /**
   * The email of the author (or committer) of the commit
   */
  email?: string

}

/**
 * object containing information about the author.
 */
export interface UnnamedModel$90 {
  /**
   * The name of the author (or committer) of the commit
   */
  name?: string

  /**
   * The email of the author (or committer) of the commit
   */
  email?: string

}

export interface UnnamedModel$91 {
  /**
   * The commit message.
   */
  message?: string

  /**
   * The blob SHA of the file being replaced.
   */
  sha?: string

  /**
   * The branch name. Default: the repository’s default branch (usually `master`)
   */
  branch?: string

  /**
   * object containing information about the committer.
   */
  committer?: UnnamedModel$89

  /**
   * object containing information about the author.
   */
  author?: UnnamedModel$90

}

export interface GetByOwnerAndRepoContributorsQuery {
  /**
   * Set to `1` or `true` to include anonymous contributors in results.
   */
  anon?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Contributor
 */
export interface Contributor {
  login?: string

  id?: number

  node_id?: string

  avatar_url?: string

  gravatar_id?: string | null

  url?: string

  html_url?: string

  followers_url?: string

  following_url?: string

  gists_url?: string

  starred_url?: string

  subscriptions_url?: string

  organizations_url?: string

  repos_url?: string

  events_url?: string

  received_events_url?: string

  type?: string

  site_admin?: boolean

  contributions?: number

  email?: string

  name?: string

}

export interface GetByOwnerAndRepoDeploymentsQuery {
  /**
   * The SHA recorded at creation time.
   */
  sha?: string

  /**
   * The name of the ref. This can be a branch, tag, or SHA.
   */
  ref?: string

  /**
   * The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`).
   */
  task?: string

  /**
   * The name of the environment that was deployed to (e.g., `staging` or `production`).
   */
  environment?: string | null

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export interface Deployment {
  url?: string

  /**
   * Unique identifier of the deployment
   */
  id?: number

  node_id?: string

  sha?: string

  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   */
  ref?: string

  /**
   * Parameter to specify a task to execute
   */
  task?: string

  payload?: any

  original_environment?: string

  /**
   * Name for the target deployment environment.
   */
  environment?: string

  description?: string | null

  creator?: any

  created_at?: string

  updated_at?: string

  statuses_url?: string

  repository_url?: string

  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   */
  transient_environment?: boolean

  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   */
  production_environment?: boolean

  performed_via_github_app?: any

}

export interface UnnamedModel$92 {
  /**
   * The ref to deploy. This can be a branch, tag, or SHA.
   */
  ref?: string

  /**
   * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
   */
  task?: string

  /**
   * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
   */
  auto_merge?: boolean

  required_contexts?: string[]

  payload?: any

  /**
   * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
   */
  environment?: string

  /**
   * Short description of the deployment.
   */
  description?: string | null

  /**
   * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type.
   */
  transient_environment?: boolean

  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type.
   */
  production_environment?: boolean

}

export interface GetByOwnerAndRepoDeploymentsAndDeploymentIdStatusesQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * The status of a deployment.
 */
export interface Deployment_status {
  url?: string

  id?: number

  node_id?: string

  /**
   * The state of the status.
   */
  state?: string

  creator?: any

  /**
   * A short description of the status.
   */
  description?: string

  /**
   * The environment of the deployment that the status is for.
   */
  environment?: string

  /**
   * Deprecated: the URL to associate with this status.
   */
  target_url?: string

  created_at?: string

  updated_at?: string

  deployment_url?: string

  repository_url?: string

  /**
   * The URL for accessing your environment.
   */
  environment_url?: string

  /**
   * The URL to associate with this status.
   */
  log_url?: string

  performed_via_github_app?: any

}

export interface UnnamedModel$93 {
  /**
   * The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
   */
  state?: string

  /**
   * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
   */
  target_url?: string

  /**
   * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type.
   */
  log_url?: string

  /**
   * A short description of the status. The maximum description length is 140 characters.
   */
  description?: string

  /**
   * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.
   */
  environment?: string

  /**
   * Sets the URL for accessing your environment. Default: `""`
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type.
   */
  environment_url?: string

  /**
   * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.0/rest/overview/api-previews#enhanced-deployments) custom media type.
   */
  auto_inactive?: boolean

}

export interface UnnamedModel$94 {
  /**
   * A custom webhook event name.
   */
  event_type?: string

  /**
   * JSON payload with extra information about the webhook event that your action or worklow may use.
   */
  client_payload?: Record<string, any>

}

export interface GetByOwnerAndRepoEventsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOwnerAndRepoForksQuery {
  /**
   * The sort order. Can be either `newest`, `oldest`, or `stargazers`.
   */
  sort?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$95 {
  /**
   * The new blob's content.
   */
  content?: string

  /**
   * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
   */
  encoding?: string

}

/**
 * Blob
 */
export interface Blob {
  content?: string

  encoding?: string

  url?: string

  sha?: string

  size?: number | null

  node_id?: string

  highlighted_content?: string

}

/**
 * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
 */
export interface UnnamedModel$96 {
  /**
   * The name of the author (or committer) of the commit
   */
  name?: string

  /**
   * The email of the author (or committer) of the commit
   */
  email?: string

  /**
   * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  date?: string

}

/**
 * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
 */
export interface UnnamedModel$97 {
  /**
   * The name of the author (or committer) of the commit
   */
  name?: string

  /**
   * The email of the author (or committer) of the commit
   */
  email?: string

  /**
   * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  date?: string

}

export interface UnnamedModel$98 {
  /**
   * The commit message
   */
  message?: string

  /**
   * The SHA of the tree object this commit points to
   */
  tree?: string

  parents?: string[]

  /**
   * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
   */
  author?: UnnamedModel$96

  /**
   * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
   */
  committer?: UnnamedModel$97

  /**
   * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
   */
  signature?: string

}

/**
 * Identifying information for the git-user
 */
export interface UnnamedModel$99 {
  /**
   * Timestamp of the commit
   */
  date?: string

  /**
   * Git email address of the user
   */
  email?: string

  /**
   * Name of the git user
   */
  name?: string

}

/**
 * Identifying information for the git-user
 */
export interface UnnamedModel$100 {
  /**
   * Timestamp of the commit
   */
  date?: string

  /**
   * Git email address of the user
   */
  email?: string

  /**
   * Name of the git user
   */
  name?: string

}

export interface UnnamedModel$101 {
  /**
   * SHA for the commit
   */
  sha?: string

  url?: string

}

export interface UnnamedModel$102 {
  /**
   * SHA for the commit
   */
  sha?: string

  url?: string

  html_url?: string

}

export interface UnnamedModel$103 {
  verified?: boolean

  reason?: string

  signature?: string | null

  payload?: string | null

}

/**
 * Low-level Git commit operations within a repository
 */
export interface Git_commit {
  /**
   * SHA for the commit
   */
  sha?: string

  node_id?: string

  url?: string

  /**
   * Identifying information for the git-user
   */
  author?: UnnamedModel$99

  /**
   * Identifying information for the git-user
   */
  committer?: UnnamedModel$100

  /**
   * Message describing the purpose of the commit
   */
  message?: string

  tree?: UnnamedModel$101

  parents?: UnnamedModel$102[]

  verification?: UnnamedModel$103

  html_url?: string

}

export interface GetByOwnerAndRepoGitMatchingRefsAndRefQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$104 {
  type?: string

  /**
   * SHA for the reference
   */
  sha?: string

  url?: string

}

/**
 * Git references within a repository
 */
export interface Git_ref {
  ref?: string

  node_id?: string

  url?: string

  object?: UnnamedModel$104

}

export interface UnnamedModel$105 {
  /**
   * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
   */
  ref?: string

  /**
   * The SHA1 value for this reference.
   */
  sha?: string

  key?: string

}

export interface UnnamedModel$106 {
  /**
   * The SHA1 value to set this reference to
   */
  sha?: string

  /**
   * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
   */
  force?: boolean

}

/**
 * An object with information about the individual creating the tag.
 */
export interface UnnamedModel$107 {
  /**
   * The name of the author of the tag
   */
  name?: string

  /**
   * The email of the author of the tag
   */
  email?: string

  /**
   * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  date?: string

}

export interface UnnamedModel$108 {
  /**
   * The tag's name. This is typically a version (e.g., "v0.0.1").
   */
  tag?: string

  /**
   * The tag message.
   */
  message?: string

  /**
   * The SHA of the git object this is tagging.
   */
  object?: string

  /**
   * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
   */
  type?: string

  /**
   * An object with information about the individual creating the tag.
   */
  tagger?: UnnamedModel$107

}

export interface UnnamedModel$109 {
  date?: string

  email?: string

  name?: string

}

export interface UnnamedModel$110 {
  sha?: string

  type?: string

  url?: string

}

/**
 * Metadata for a Git tag
 */
export interface Git_tag {
  node_id?: string

  /**
   * Name of the tag
   */
  tag?: string

  sha?: string

  /**
   * URL for the tag
   */
  url?: string

  /**
   * Message describing the purpose of the tag
   */
  message?: string

  tagger?: UnnamedModel$109

  object?: UnnamedModel$110

  verification?: any

}

export interface UnnamedModel$111 {
  /**
   * The file referenced in the tree.
   */
  path?: string

  /**
   * The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
   */
  mode?: string

  /**
   * Either `blob`, `tree`, or `commit`.
   */
  type?: string

  /**
   * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.

**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
   */
  sha?: string | null

  /**
   * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.

**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
   */
  content?: string

}

export interface UnnamedModel$112 {
  tree?: UnnamedModel$111[]

  /**
   * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
   */
  base_tree?: string

}

export interface GetByOwnerAndRepoGitTreesAndTreeShaQuery {
  /**
   * Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees.
   */
  recursive?: string

}

export interface UnnamedModel$113 {
  path?: string

  mode?: string

  type?: string

  sha?: string

  size?: number

  url?: string

}

/**
 * The hierarchy between files in a Git repository.
 */
export interface Git_tree {
  sha?: string

  url?: string

  truncated?: boolean

  tree?: UnnamedModel$113[]

}

export interface GetByOwnerAndRepoHooksQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$114 {
  email?: string

  password?: string

  room?: string

  subdomain?: string

  url?: any

  insecure_ssl?: any

  content_type?: any

  digest?: string

  secret?: any

  token?: string

}

export interface Hook_response {
  code?: number | null

  status?: string | null

  message?: string | null

}

/**
 * Webhooks for repositories.
 */
export interface Hook {
  type?: string

  /**
   * Unique identifier of the webhook.
   */
  id?: number

  /**
   * The name of a valid service, use 'web' for a webhook.
   */
  name?: string

  /**
   * Determines whether the hook is actually triggered on pushes.
   */
  active?: boolean

  events?: string[]

  config?: UnnamedModel$114

  updated_at?: string

  created_at?: string

  url?: string

  test_url?: string

  ping_url?: string

  last_response?: Hook_response

}

/**
 * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-hook-config-params).
 */
export interface UnnamedModel$115 {
  url?: any

  content_type?: any

  secret?: any

  insecure_ssl?: any

  address?: string

  room?: string

}

export interface UnnamedModel$116 {
  /**
   * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-hook-config-params).
   */
  config?: UnnamedModel$115

  events?: string[]

  add_events?: string[]

  remove_events?: string[]

  /**
   * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
   */
  active?: boolean

}

export interface UnnamedModel$117 {
  url?: any

  content_type?: any

  secret?: any

  insecure_ssl?: any

}

export interface GetByOwnerAndRepoInvitationsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Repository invitations let you manage who you collaborate with.
 */
export interface Repository_invitation {
  /**
   * Unique identifier of the repository invitation.
   */
  id?: number

  repository?: any

  invitee?: any

  inviter?: any

  /**
   * The permission associated with the invitation.
   */
  permissions?: string

  created_at?: string

  /**
   * Whether or not the invitation has expired
   */
  expired?: boolean

  /**
   * URL for the repository invitation
   */
  url?: string

  html_url?: string

  node_id?: string

}

export interface UnnamedModel$118 {
  /**
   * The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
   */
  permissions?: string

}

export interface GetByOwnerAndRepoIssuesQuery {
  /**
   * If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned.
   */
  milestone?: string

  /**
   * Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`.
   */
  state?: string

  /**
   * Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user.
   */
  assignee?: string

  /**
   * The user that created the issue.
   */
  creator?: string

  /**
   * A user that's mentioned in the issue.
   */
  mentioned?: string

  /**
   * A list of comma separated label names. Example: `bug,ui,@high`
   */
  labels?: string

  /**
   * What to sort results by. Can be either `created`, `updated`, `comments`.
   */
  sort?: string

  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: string

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$119 {
  /**
   * The title of the issue.
   */
  title?: any

  /**
   * The contents of the issue.
   */
  body?: string

  /**
   * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
   */
  assignee?: string | null

  milestone?: null | string | number

  labels?: any[]

  assignees?: string[]

}

export interface GetByOwnerAndRepoIssuesCommentsQuery {
  /**
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   */
  sort?: string

  /**
   * Either `asc` or `desc`. Ignored without the `sort` parameter.
   */
  direction?: string

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$120 {
  /**
   * The contents of the comment.
   */
  body?: string

}

export interface GetByOwnerAndRepoIssuesCommentsAndCommentIdReactionsQuery {
  /**
   * Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment.
   */
  content?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$121 {
  /**
   * The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the issue comment.
   */
  content?: string

}

export interface GetByOwnerAndRepoIssuesEventsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Issue Event Label
 */
export interface Issue_event_label {
  name?: string | null

  color?: string | null

}

export interface Issue_event_dismissed_review {
  state?: string

  review_id?: number

  dismissal_message?: string | null

  dismissal_commit_id?: string | null

}

/**
 * Issue Event Milestone
 */
export interface Issue_event_milestone {
  title?: string

}

/**
 * Issue Event Project Card
 */
export interface Issue_event_project_card {
  url?: string

  id?: number

  project_url?: string

  project_id?: number

  column_name?: string

  previous_column_name?: string

}

/**
 * Issue Event Rename
 */
export interface Issue_event_rename {
  from?: string

  to?: string

}

/**
 * Issue Event
 */
export interface Issue_event {
  id?: number

  node_id?: string

  url?: string

  actor?: any

  event?: string

  commit_id?: string | null

  commit_url?: string | null

  created_at?: string

  issue?: any

  /**
   * Issue Event Label
   */
  label?: Issue_event_label

  assignee?: any

  assigner?: any

  review_requester?: any

  requested_reviewer?: any

  requested_team?: any

  dismissed_review?: Issue_event_dismissed_review

  /**
   * Issue Event Milestone
   */
  milestone?: Issue_event_milestone

  /**
   * Issue Event Project Card
   */
  project_card?: Issue_event_project_card

  /**
   * Issue Event Rename
   */
  rename?: Issue_event_rename

  author_association?: any

  lock_reason?: string | null

  performed_via_github_app?: any

}

export interface UnnamedModel$122 {
  /**
   * The title of the issue.
   */
  title?: null | string | number

  /**
   * The contents of the issue.
   */
  body?: string | null

  /**
   * Login for the user that this issue should be assigned to. **This field is deprecated.**
   */
  assignee?: string | null

  /**
   * State of the issue. Either `open` or `closed`.
   */
  state?: string

  milestone?: null | string | number

  labels?: any[]

  assignees?: string[]

}

export interface UnnamedModel$123 {
  assignees?: string[]

}

export interface UnnamedModel$124 {
  assignees?: string[]

}

export interface GetByOwnerAndRepoIssuesAndIssueNumberCommentsQuery {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$125 {
  /**
   * The contents of the comment.
   */
  body?: string

}

export interface GetByOwnerAndRepoIssuesAndIssueNumberEventsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOwnerAndRepoIssuesAndIssueNumberLabelsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export interface Label {
  id?: number

  node_id?: string

  /**
   * URL for the label
   */
  url?: string

  /**
   * The name of the label.
   */
  name?: string

  description?: string | null

  /**
   * 6-character hex code, without the leading #, identifying the color
   */
  color?: string

  default?: boolean

}

export interface GetByOwnerAndRepoIssuesAndIssueNumberReactionsQuery {
  /**
   * Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue.
   */
  content?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$126 {
  /**
   * The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the issue.
   */
  content?: string

}

export interface GetByOwnerAndRepoIssuesAndIssueNumberTimelineQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOwnerAndRepoKeysQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * An SSH key granting access to a single repository.
 */
export interface Deploy_key {
  id?: number

  key?: string

  url?: string

  title?: string

  verified?: boolean

  created_at?: string

  read_only?: boolean

}

export interface UnnamedModel$127 {
  /**
   * A name for the key.
   */
  title?: string

  /**
   * The contents of the key.
   */
  key?: string

  /**
   * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.

Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
   */
  read_only?: boolean

}

export interface GetByOwnerAndRepoLabelsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$128 {
  /**
   * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
   */
  name?: string

  /**
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string

  /**
   * A short description of the label. Must be 100 characters or fewer.
   */
  description?: string

}

export interface UnnamedModel$129 {
  /**
   * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
   */
  new_name?: string

  /**
   * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
   */
  color?: string

  /**
   * A short description of the label. Must be 100 characters or fewer.
   */
  description?: string

}

export interface UnnamedModel$130 {
  git?: string | null

  html?: string | null

  self?: string

}

/**
 * License Content
 */
export interface License_content {
  name?: string

  path?: string

  sha?: string

  size?: number

  url?: string

  html_url?: string | null

  git_url?: string | null

  download_url?: string | null

  type?: string

  content?: string

  encoding?: string

  _links?: UnnamedModel$130

  license?: any

}

export interface UnnamedModel$131 {
  /**
   * The name of the base branch that the head will be merged into.
   */
  base?: string

  /**
   * The head to merge. This can be a branch name or a commit SHA1.
   */
  head?: string

  /**
   * Commit message to use for the merge commit. If omitted, a default message will be used.
   */
  commit_message?: string

}

export interface GetByOwnerAndRepoMilestonesQuery {
  /**
   * The state of the milestone. Either `open`, `closed`, or `all`.
   */
  state?: string

  /**
   * What to sort results by. Either `due_on` or `completeness`.
   */
  sort?: string

  /**
   * The direction of the sort. Either `asc` or `desc`.
   */
  direction?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * A collection of related issues and pull requests.
 */
export interface Milestone {
  url?: string

  html_url?: string

  labels_url?: string

  id?: number

  node_id?: string

  /**
   * The number of the milestone.
   */
  number?: number

  /**
   * The state of the milestone.
   */
  state?: string

  /**
   * The title of the milestone.
   */
  title?: string

  description?: string | null

  creator?: any

  open_issues?: number

  closed_issues?: number

  created_at?: string

  updated_at?: string

  closed_at?: string | null

  due_on?: string | null

}

export interface UnnamedModel$132 {
  /**
   * The title of the milestone.
   */
  title?: string

  /**
   * The state of the milestone. Either `open` or `closed`.
   */
  state?: string

  /**
   * A description of the milestone.
   */
  description?: string

  /**
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  due_on?: string

}

export interface UnnamedModel$133 {
  /**
   * The title of the milestone.
   */
  title?: string

  /**
   * The state of the milestone. Either `open` or `closed`.
   */
  state?: string

  /**
   * A description of the milestone.
   */
  description?: string

  /**
   * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  due_on?: string

}

export interface GetByOwnerAndRepoMilestonesAndMilestoneNumberLabelsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOwnerAndRepoNotificationsQuery {
  /**
   * If `true`, show notifications marked as read.
   */
  all?: boolean

  /**
   * If `true`, only shows notifications in which the user is directly participating or mentioned.
   */
  participating?: boolean

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  before?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$134 {
  /**
   * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
   */
  last_read_at?: string

}

export interface Pages_source_hash {
  branch?: string

  path?: string

}

export interface Pages_https_certificate {
  state?: string

  description?: string

  domains?: string[]

  expires_at?: string

}

/**
 * The configuration for GitHub Pages for a repository.
 */
export interface Page {
  /**
   * The API address for accessing this Page resource.
   */
  url?: string

  /**
   * The status of the most recent build of the Page.
   */
  status?: string | null

  /**
   * The Pages site's custom domain
   */
  cname?: string | null

  /**
   * The state if the domain is verified
   */
  protected_domain_state?: string | null

  /**
   * The timestamp when a pending domain becomes unverified.
   */
  pending_domain_unverified_at?: string | null

  /**
   * Whether the Page has a custom 404 page.
   */
  custom_404?: boolean

  /**
   * The web address the Page can be accessed from.
   */
  html_url?: string

  source?: Pages_source_hash

  /**
   * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   */
  public?: boolean

  https_certificate?: Pages_https_certificate

  /**
   * Whether https is enabled on the domain
   */
  https_enforced?: boolean

}

export interface UnnamedModel$135 {
  /**
   * Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/)."
   */
  cname?: string | null

  /**
   * Specify whether HTTPS should be enforced for the repository.
   */
  https_enforced?: boolean

  /**
   * Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.
   */
  public?: boolean

  source?: any

}

export interface GetByOwnerAndRepoPagesBuildsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$136 {
  message?: string | null

}

/**
 * Page Build
 */
export interface Page_build {
  url?: string

  status?: string

  error?: UnnamedModel$136

  pusher?: any

  commit?: string

  duration?: number

  created_at?: string

  updated_at?: string

}

export interface GetByOwnerAndRepoPreReceiveHooksQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * One of `asc` (ascending) or `desc` (descending).
   */
  direction?: string

  sort?: string

}

export interface Repository_pre_receive_hook {
  id?: number

  name?: string

  enforcement?: string

  configuration_url?: string

}

export interface UnnamedModel$137 {
  /**
   * The state of enforcement for the hook on this repository.
   */
  enforcement?: string

}

export interface GetByOwnerAndRepoProjectsQuery {
  /**
   * Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`.
   */
  state?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$138 {
  /**
   * The name of the project.
   */
  name?: string

  /**
   * The description of the project.
   */
  body?: string

}

export interface GetByOwnerAndRepoPullsQuery {
  /**
   * Either `open`, `closed`, or `all` to filter by state.
   */
  state?: string

  /**
   * Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`.
   */
  head?: string

  /**
   * Filter pulls by base branch name. Example: `gh-pages`.
   */
  base?: string

  /**
   * What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month).
   */
  sort?: string

  /**
   * The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`.
   */
  direction?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$139 {
  /**
   * The title of the new pull request.
   */
  title?: string

  /**
   * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
   */
  head?: string

  /**
   * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
   */
  base?: string

  /**
   * The contents of the pull request.
   */
  body?: string

  /**
   * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean

  /**
   * Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
   */
  draft?: boolean

  issue?: number

}

export interface GetByOwnerAndRepoPullsCommentsQuery {
  sort?: string

  /**
   * Can be either `asc` or `desc`. Ignored without `sort` parameter.
   */
  direction?: string

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$140 {
  href?: string

}

export interface UnnamedModel$141 {
  href?: string

}

export interface UnnamedModel$142 {
  href?: string

}

export interface UnnamedModel$143 {
  self?: UnnamedModel$140

  html?: UnnamedModel$141

  pull_request?: UnnamedModel$142

}

/**
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export interface Pull_request_review_comment {
  /**
   * URL for the pull request review comment
   */
  url?: string

  /**
   * The ID of the pull request review to which the comment belongs.
   */
  pull_request_review_id?: number | null

  /**
   * The ID of the pull request review comment.
   */
  id?: number

  /**
   * The node ID of the pull request review comment.
   */
  node_id?: string

  /**
   * The diff of the line that the comment refers to.
   */
  diff_hunk?: string

  /**
   * The relative path of the file to which the comment applies.
   */
  path?: string

  /**
   * The line index in the diff to which the comment applies.
   */
  position?: number

  /**
   * The index of the original line in the diff to which the comment applies.
   */
  original_position?: number

  /**
   * The SHA of the commit to which the comment applies.
   */
  commit_id?: string

  /**
   * The SHA of the original commit to which the comment applies.
   */
  original_commit_id?: string

  /**
   * The comment ID to reply to.
   */
  in_reply_to_id?: number

  user?: any

  /**
   * The text of the comment.
   */
  body?: string

  created_at?: string

  updated_at?: string

  /**
   * HTML URL for the pull request review comment.
   */
  html_url?: string

  /**
   * URL for the pull request that the review comment belongs to.
   */
  pull_request_url?: string

  author_association?: any

  _links?: UnnamedModel$143

  /**
   * The first line of the range for a multi-line comment.
   */
  start_line?: number | null

  /**
   * The first line of the range for a multi-line comment.
   */
  original_start_line?: number | null

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side?: string | null

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line?: number

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line?: number

  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   */
  side?: string

  reactions?: any

  body_html?: string

  body_text?: string

}

export interface UnnamedModel$144 {
  /**
   * The text of the reply to the review comment.
   */
  body?: string

}

export interface GetByOwnerAndRepoPullsCommentsAndCommentIdReactionsQuery {
  /**
   * Returns a single [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment.
   */
  content?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$145 {
  /**
   * The [reaction type](https://docs.github.com/enterprise-server@3.0/rest/reference/reactions#reaction-types) to add to the pull request review comment.
   */
  content?: string

}

export interface UnnamedModel$146 {
  id?: number

  node_id?: string

  url?: string

  name?: string

  description?: string | null

  color?: string

  default?: boolean

}

export interface UnnamedModel$147 {
  avatar_url?: string

  events_url?: string

  followers_url?: string

  following_url?: string

  gists_url?: string

  gravatar_id?: string | null

  html_url?: string

  id?: number

  node_id?: string

  login?: string

  organizations_url?: string

  received_events_url?: string

  repos_url?: string

  site_admin?: boolean

  starred_url?: string

  subscriptions_url?: string

  type?: string

  url?: string

}

export interface UnnamedModel$148 {
  label?: string

  ref?: string

  repo?: any | null

  sha?: string

  user?: UnnamedModel$147

}

export interface UnnamedModel$149 {
  avatar_url?: string

  events_url?: string

  followers_url?: string

  following_url?: string

  gists_url?: string

  gravatar_id?: string | null

  html_url?: string

  id?: number

  node_id?: string

  login?: string

  organizations_url?: string

  received_events_url?: string

  repos_url?: string

  site_admin?: boolean

  starred_url?: string

  subscriptions_url?: string

  type?: string

  url?: string

}

export interface UnnamedModel$150 {
  admin?: boolean

  maintain?: boolean

  push?: boolean

  triage?: boolean

  pull?: boolean

}

export interface UnnamedModel$151 {
  archive_url?: string

  assignees_url?: string

  blobs_url?: string

  branches_url?: string

  collaborators_url?: string

  comments_url?: string

  commits_url?: string

  compare_url?: string

  contents_url?: string

  contributors_url?: string

  deployments_url?: string

  description?: string | null

  downloads_url?: string

  events_url?: string

  fork?: boolean

  forks_url?: string

  full_name?: string

  git_commits_url?: string

  git_refs_url?: string

  git_tags_url?: string

  hooks_url?: string

  html_url?: string

  id?: number

  is_template?: boolean

  node_id?: string

  issue_comment_url?: string

  issue_events_url?: string

  issues_url?: string

  keys_url?: string

  labels_url?: string

  languages_url?: string

  merges_url?: string

  milestones_url?: string

  name?: string

  notifications_url?: string

  owner?: UnnamedModel$149

  private?: boolean

  pulls_url?: string

  releases_url?: string

  stargazers_url?: string

  statuses_url?: string

  subscribers_url?: string

  subscription_url?: string

  tags_url?: string

  teams_url?: string

  trees_url?: string

  url?: string

  clone_url?: string

  default_branch?: string

  forks?: number

  forks_count?: number

  git_url?: string

  has_downloads?: boolean

  has_issues?: boolean

  has_projects?: boolean

  has_wiki?: boolean

  has_pages?: boolean

  homepage?: string | null

  language?: string | null

  master_branch?: string

  archived?: boolean

  disabled?: boolean

  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string

  mirror_url?: string | null

  open_issues?: number

  open_issues_count?: number

  permissions?: UnnamedModel$150

  temp_clone_token?: string

  allow_merge_commit?: boolean

  allow_squash_merge?: boolean

  allow_rebase_merge?: boolean

  license?: any

  pushed_at?: string

  size?: number

  ssh_url?: string

  stargazers_count?: number

  svn_url?: string

  topics?: string[]

  watchers?: number

  watchers_count?: number

  created_at?: string

  updated_at?: string

  allow_forking?: boolean

}

export interface UnnamedModel$152 {
  avatar_url?: string

  events_url?: string

  followers_url?: string

  following_url?: string

  gists_url?: string

  gravatar_id?: string | null

  html_url?: string

  id?: number

  node_id?: string

  login?: string

  organizations_url?: string

  received_events_url?: string

  repos_url?: string

  site_admin?: boolean

  starred_url?: string

  subscriptions_url?: string

  type?: string

  url?: string

}

export interface UnnamedModel$153 {
  label?: string

  ref?: string

  repo?: UnnamedModel$151

  sha?: string

  user?: UnnamedModel$152

}

export interface UnnamedModel$154 {
  comments?: any

  commits?: any

  statuses?: any

  html?: any

  issue?: any

  review_comments?: any

  review_comment?: any

  self?: any

}

/**
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export interface Pull_request {
  url?: string

  id?: number

  node_id?: string

  html_url?: string

  diff_url?: string

  patch_url?: string

  issue_url?: string

  commits_url?: string

  review_comments_url?: string

  review_comment_url?: string

  comments_url?: string

  statuses_url?: string

  /**
   * Number uniquely identifying the pull request within its repository.
   */
  number?: number

  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  state?: string

  locked?: boolean

  /**
   * The title of the pull request.
   */
  title?: string

  user?: any

  body?: string | null

  labels?: UnnamedModel$146[]

  milestone?: any

  active_lock_reason?: string | null

  created_at?: string

  updated_at?: string

  closed_at?: string | null

  merged_at?: string | null

  merge_commit_sha?: string | null

  assignee?: any

  assignees?: any[] | null

  requested_reviewers?: any[] | null

  requested_teams?: any[] | null

  head?: UnnamedModel$148

  base?: UnnamedModel$153

  _links?: UnnamedModel$154

  author_association?: any

  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean

  merged?: boolean

  mergeable?: boolean | null

  rebaseable?: boolean | null

  mergeable_state?: string

  merged_by?: any

  comments?: number

  review_comments?: number

  /**
   * Indicates whether maintainers can modify the pull request.
   */
  maintainer_can_modify?: boolean

  commits?: number

  additions?: number

  deletions?: number

  changed_files?: number

}

export interface UnnamedModel$155 {
  /**
   * The title of the pull request.
   */
  title?: string

  /**
   * The contents of the pull request.
   */
  body?: string

  /**
   * State of this Pull Request. Either `open` or `closed`.
   */
  state?: string

  /**
   * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
   */
  base?: string

  /**
   * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
   */
  maintainer_can_modify?: boolean

}

export interface GetByOwnerAndRepoPullsAndPullNumberCommentsQuery {
  /**
   * One of `created` (when the repository was starred) or `updated` (when it was last pushed to).
   */
  sort?: string

  /**
   * Can be either `asc` or `desc`. Ignored without `sort` parameter.
   */
  direction?: string

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$156 {
  /**
   * The text of the review comment.
   */
  body?: string

  /**
   * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
   */
  commit_id?: string

  /**
   * The relative path to the file that necessitates a comment.
   */
  path?: string

  /**
   * **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
   */
  position?: number

  /**
   * **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
   */
  side?: string

  /**
   * **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
   */
  line?: number

  /**
   * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
   */
  start_line?: number

  /**
   * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
   */
  start_side?: string

  /**
   * The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
   */
  in_reply_to?: number

}

export interface UnnamedModel$157 {
  /**
   * The text of the review comment.
   */
  body?: string

}

export interface GetByOwnerAndRepoPullsAndPullNumberCommitsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOwnerAndRepoPullsAndPullNumberFilesQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Pull Request Merge Result
 */
export interface Pull_request_merge_result {
  sha?: string

  merged?: boolean

  message?: string

}

export interface GetByOwnerAndRepoPullsAndPullNumberRequestedReviewersQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Pull Request Review Request
 */
export interface Pull_request_review_request {
  users?: any[]

  teams?: any[]

}

export interface UnnamedModel$158 {
  reviewers?: string[]

  team_reviewers?: string[]

}

export interface UnnamedModel$159 {
  reviewers?: string[]

  team_reviewers?: string[]

}

export interface GetByOwnerAndRepoPullsAndPullNumberReviewsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$160 {
  href?: string

}

export interface UnnamedModel$161 {
  href?: string

}

export interface UnnamedModel$162 {
  html?: UnnamedModel$160

  pull_request?: UnnamedModel$161

}

/**
 * Pull Request Reviews are reviews on pull requests.
 */
export interface Pull_request_review {
  /**
   * Unique identifier of the review
   */
  id?: number

  node_id?: string

  user?: any

  /**
   * The text of the review.
   */
  body?: string

  state?: string

  html_url?: string

  pull_request_url?: string

  _links?: UnnamedModel$162

  submitted_at?: string

  /**
   * A commit SHA for the review.
   */
  commit_id?: string

  body_html?: string

  body_text?: string

  author_association?: any

}

export interface UnnamedModel$163 {
  /**
   * The relative path to the file that necessitates a review comment.
   */
  path?: string

  /**
   * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
   */
  position?: number

  /**
   * Text of the review comment.
   */
  body?: string

  line?: number

  side?: string

  start_line?: number

  start_side?: string

}

export interface UnnamedModel$164 {
  /**
   * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
   */
  commit_id?: string

  /**
   * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
   */
  body?: string

  /**
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
   */
  event?: string

  comments?: UnnamedModel$163[]

}

export interface UnnamedModel$165 {
  /**
   * The body text of the pull request review.
   */
  body?: string

}

export interface GetByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdCommentsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$166 {
  self?: any

  html?: any

  pull_request?: any

}

/**
 * Legacy Review Comment
 */
export interface Review_comment {
  url?: string

  pull_request_review_id?: number | null

  id?: number

  node_id?: string

  diff_hunk?: string

  path?: string

  position?: number | null

  original_position?: number

  commit_id?: string

  original_commit_id?: string

  in_reply_to_id?: number

  user?: any

  body?: string

  created_at?: string

  updated_at?: string

  html_url?: string

  pull_request_url?: string

  author_association?: any

  _links?: UnnamedModel$166

  body_text?: string

  body_html?: string

  reactions?: any

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  side?: string

  /**
   * The side of the first line of the range for a multi-line comment.
   */
  start_side?: string | null

  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  line?: number

  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   */
  original_line?: number

  /**
   * The first line of the range for a multi-line comment.
   */
  start_line?: number | null

  /**
   * The original first line of the range for a multi-line comment.
   */
  original_start_line?: number | null

}

export interface UnnamedModel$167 {
  /**
   * The message for the pull request review dismissal
   */
  message?: string

  event?: string

}

export interface UnnamedModel$168 {
  /**
   * The body text of the pull request review
   */
  body?: string

  /**
   * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
   */
  event?: string

}

export interface GetByOwnerAndRepoReadmeQuery {
  /**
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string

}

export interface UnnamedModel$169 {
  git?: string | null

  html?: string | null

  self?: string

}

/**
 * Content File
 */
export interface Content_file {
  type?: string

  encoding?: string

  size?: number

  name?: string

  path?: string

  content?: string

  sha?: string

  url?: string

  git_url?: string | null

  html_url?: string | null

  download_url?: string | null

  _links?: UnnamedModel$169

  target?: string

  submodule_git_url?: string

}

export interface GetByOwnerAndRepoReadmeAndDirQuery {
  /**
   * The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`)
   */
  ref?: string

}

export interface GetByOwnerAndRepoReleasesQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Data related to a release.
 */
export interface Release_asset {
  url?: string

  browser_download_url?: string

  id?: number

  node_id?: string

  /**
   * The file name of the asset.
   */
  name?: string

  label?: string | null

  /**
   * State of the release asset.
   */
  state?: string

  content_type?: string

  size?: number

  download_count?: number

  created_at?: string

  updated_at?: string

  uploader?: any

}

/**
 * A release.
 */
export interface Release {
  url?: string

  html_url?: string

  assets_url?: string

  upload_url?: string

  tarball_url?: string | null

  zipball_url?: string | null

  id?: number

  node_id?: string

  /**
   * The name of the tag.
   */
  tag_name?: string

  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   */
  target_commitish?: string

  name?: string | null

  body?: string | null

  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft?: boolean

  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease?: boolean

  created_at?: string

  published_at?: string | null

  author?: any

  /**
   * Data related to a release.
   */
  assets?: Release_asset[]

  body_html?: string

  body_text?: string

  reactions?: any

}

export interface UnnamedModel$170 {
  /**
   * The name of the tag.
   */
  tag_name?: string

  /**
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string

  /**
   * The name of the release.
   */
  name?: string

  /**
   * Text describing the contents of the tag.
   */
  body?: string

  /**
   * `true` to create a draft (unpublished) release, `false` to create a published one.
   */
  draft?: boolean

  /**
   * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
   */
  prerelease?: boolean

}

export interface UnnamedModel$171 {
  /**
   * The file name of the asset.
   */
  name?: string

  /**
   * An alternate short description of the asset. Used in place of the filename.
   */
  label?: string

  state?: string

}

export interface UnnamedModel$172 {
  /**
   * The name of the tag.
   */
  tag_name?: string

  /**
   * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
   */
  target_commitish?: string

  /**
   * The name of the release.
   */
  name?: string

  /**
   * Text describing the contents of the tag.
   */
  body?: string

  /**
   * `true` makes the release a draft, and `false` publishes the release.
   */
  draft?: boolean

  /**
   * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
   */
  prerelease?: boolean

}

export interface GetByOwnerAndRepoReleasesAndReleaseIdAssetsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface PostByOwnerAndRepoReleasesAndReleaseIdAssetsQuery {
  name?: string

  label?: string

}

export interface GetByOwnerAndRepoStargazersQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Commit Activity
 */
export interface Commit_activity {
  days?: number[]

  total?: number

  week?: number

}

export interface UnnamedModel$173 {
  w?: number

  a?: number

  d?: number

  c?: number

}

/**
 * Contributor Activity
 */
export interface Contributor_activity {
  author?: any

  total?: number

  weeks?: UnnamedModel$173[]

}

export interface Participation_stats {
  all?: number[]

  owner?: number[]

}

export interface UnnamedModel$174 {
  /**
   * The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
   */
  state?: string

  /**
   * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
`http://ci.example.com/user/repo/build/sha`
   */
  target_url?: string

  /**
   * A short description of the status.
   */
  description?: string

  /**
   * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
   */
  context?: string

}

export interface GetByOwnerAndRepoSubscribersQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Repository invitations let you manage who you collaborate with.
 */
export interface Repository_subscription {
  /**
   * Determines if notifications should be received from this repository.
   */
  subscribed?: boolean

  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored?: boolean

  reason?: string | null

  created_at?: string

  url?: string

  repository_url?: string

}

export interface UnnamedModel$175 {
  /**
   * Determines if notifications should be received from this repository.
   */
  subscribed?: boolean

  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored?: boolean

}

export interface GetByOwnerAndRepoTagsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$176 {
  sha?: string

  url?: string

}

/**
 * Tag
 */
export interface Tag {
  name?: string

  commit?: UnnamedModel$176

  zipball_url?: string

  tarball_url?: string

  node_id?: string

}

export interface GetByOwnerAndRepoTeamsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetByOwnerAndRepoTopicsQuery {
  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Results per page (max 100)
   */
  perpage?: number

}

/**
 * A topic aggregates entities that are related to a subject.
 */
export interface Topic {
  names?: string[]

}

export interface UnnamedModel$177 {
  names?: string[]

}

export interface UnnamedModel$178 {
  /**
   * The username or organization name the repository will be transferred to.
   */
  new_owner?: string

  team_ids?: number[]

}

export interface UnnamedModel$179 {
  /**
   * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
   */
  owner?: string

  /**
   * The name of the new repository.
   */
  name?: string

  /**
   * A short description of the new repository.
   */
  description?: string

  /**
   * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
   */
  include_all_branches?: boolean

  /**
   * Either `true` to create a new private repository or `false` to create a new public one.
   */
  private?: boolean

}
