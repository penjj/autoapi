/* eslint-disable */

/**
 * This file was auto generated by `autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the autoapi cli.
 */

/**
 * The set of permissions for the GitHub app
 */
export interface UnnamedModel {
  issues?: string

  checks?: string

  metadata?: string

  contents?: string

  deployments?: string

}

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface Integration {
  /**
   * Unique identifier of the GitHub app
   */
  id?: number

  /**
   * The slug name of the GitHub app
   */
  slug?: string

  node_id?: string

  owner?: any

  /**
   * The name of the GitHub app
   */
  name?: string

  description?: string | null

  external_url?: string

  html_url?: string

  created_at?: string

  updated_at?: string

  /**
   * The set of permissions for the GitHub app
   */
  permissions?: UnnamedModel

  events?: string[]

  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number

  client_id?: string

  client_secret?: string

  webhook_secret?: string | null

  pem?: string

}

/**
 * Configuration object of the webhook
 */
export interface Webhook_config {
  /**
   * The URL to which the payloads will be delivered.
   */
  url?: string

  /**
   * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
   */
  content_type?: string

  /**
   * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#delivery-headers).
   */
  secret?: string

  insecure_ssl?: any

}

export interface UnnamedModel$1 {
  url?: any

  content_type?: any

  secret?: any

  insecure_ssl?: any

}

export interface GetInstallationsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  outdated?: string

}

/**
 * The permissions granted to the user-to-server access token.
 */
export interface App_permissions {
  /**
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
   */
  actions?: string

  /**
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
   */
  administration?: string

  /**
   * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
   */
  checks?: string

  /**
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
   */
  contents?: string

  /**
   * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
   */
  deployments?: string

  /**
   * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
   */
  environments?: string

  /**
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
   */
  issues?: string

  /**
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
   */
  metadata?: string

  /**
   * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
   */
  packages?: string

  /**
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
   */
  pages?: string

  /**
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
   */
  pull_requests?: string

  /**
   * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
   */
  repository_hooks?: string

  /**
   * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
   */
  repository_projects?: string

  /**
   * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
   */
  secret_scanning_alerts?: string

  /**
   * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
   */
  secrets?: string

  /**
   * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
   */
  security_events?: string

  /**
   * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
   */
  single_file?: string

  /**
   * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
   */
  statuses?: string

  /**
   * The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.
   */
  vulnerability_alerts?: string

  /**
   * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
   */
  workflows?: string

  /**
   * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
   */
  members?: string

  /**
   * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
   */
  organization_administration?: string

  /**
   * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
   */
  organization_hooks?: string

  /**
   * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
   */
  organization_plan?: string

  /**
   * The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.
   */
  organization_projects?: string

  /**
   * The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
   */
  organization_packages?: string

  /**
   * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
   */
  organization_secrets?: string

  /**
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
   */
  organization_self_hosted_runners?: string

  /**
   * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
   */
  organization_user_blocking?: string

  /**
   * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
   */
  team_discussions?: string

  /**
   * The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
   */
  content_references?: string

}

/**
 * Installation
 */
export interface Installation {
  /**
   * The ID of the installation.
   */
  id?: number

  account?: null | any

  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection?: string

  access_tokens_url?: string

  repositories_url?: string

  html_url?: string

  app_id?: number

  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id?: number

  target_type?: string

  /**
   * The permissions granted to the user-to-server access token.
   */
  permissions?: App_permissions

  events?: string[]

  created_at?: string

  updated_at?: string

  single_file_name?: string | null

  has_multiple_single_files?: boolean

  single_file_paths?: string[]

  app_slug?: string

  suspended_by?: any

  suspended_at?: string | null

  contact_email?: string | null

}

export interface UnnamedModel$2 {
  repositories?: string[]

  repository_ids?: number[]

  permissions?: any

}
