/* eslint-disable */

/**
 * This file was auto generated by `ts-autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the ts-autoapi cli.
 */

export interface GetQuery {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Base Gist
 */
export interface Base_gist {
  url?: string

  forks_url?: string

  commits_url?: string

  id?: string

  node_id?: string

  git_pull_url?: string

  git_push_url?: string

  html_url?: string

  files?: Record<string, any>

  public?: boolean

  created_at?: string

  updated_at?: string

  description?: string | null

  comments?: number

  user?: any

  comments_url?: string

  owner?: any

  truncated?: boolean

  forks?: any[]

  history?: any[]

}

export interface UnnamedModel {
  /**
   * Description of the gist
   */
  description?: string

  /**
   * Names and content for the files that make up the gist
   */
  files?: Record<string, any>

  public?: any

}

export interface GetPublicQuery {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface GetStarredQuery {
  /**
   * Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  since?: string

  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * Gist Simple
 */
export interface Gist_simple {
  forks?: any[] | null

  history?: any[] | null

  /**
   * Gist
   */
  fork_of?: any | null

  url?: string

  forks_url?: string

  commits_url?: string

  id?: string

  node_id?: string

  git_pull_url?: string

  git_push_url?: string

  html_url?: string

  files?: Record<string, any>

  public?: boolean

  created_at?: string

  updated_at?: string

  description?: string | null

  comments?: number

  user?: string | null

  comments_url?: string

  owner?: any

  truncated?: boolean

}

export interface GetByGistIdCommentsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

/**
 * A comment made to a gist.
 */
export interface Gist_comment {
  id?: number

  node_id?: string

  url?: string

  /**
   * The comment text.
   */
  body?: string

  user?: any

  created_at?: string

  updated_at?: string

  author_association?: any

}

export interface UnnamedModel$1 {
  /**
   * The comment text.
   */
  body?: string

}

export interface UnnamedModel$2 {
  /**
   * The comment text.
   */
  body?: string

}

export interface GetByGistIdCommitsQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}

export interface UnnamedModel$3 {
  total?: number

  additions?: number

  deletions?: number

}

/**
 * Gist Commit
 */
export interface Gist_commit {
  url?: string

  version?: string

  user?: any

  change_status?: UnnamedModel$3

  committed_at?: string

}

export interface GetByGistIdForksQuery {
  /**
   * Results per page (max 100)
   */
  perpage?: number

  /**
   * Page number of the results to fetch.
   */
  page?: number

}
