/* eslint-disable */

/**
 * This file was auto generated by `ts-autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the ts-autoapi cli.
 */
import { api, type Config, type Api } from 'ts-autoapi'
import {
  GetQuery,
  Base_gist,
  UnnamedModel,
  GetPublicQuery,
  GetStarredQuery,
  Gist_simple,
  GetByGistIdCommentsQuery,
  Gist_comment,
  UnnamedModel$1,
  UnnamedModel$2,
  GetByGistIdCommitsQuery,
  Gist_commit,
  GetByGistIdForksQuery
} from './models/gists.d'

/**
 * List gists for the authenticated user
Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 */
export const get = api<(query?: GetQuery, config?: Config<GetQuery, any>) => Base_gist[]>`GET /gists`

export type Get = Api<typeof get>

/**
 * Create a gist
Allows you to add a new gist with one or more files.

**Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
 */
export const post = api<(body?: UnnamedModel, config?: Config<any, UnnamedModel>) => any>`POST /gists`

export type Post = Api<typeof post>

/**
 * List public gists
List public gists sorted by most recently updated to least recently updated.

Note: With [pagination](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 */
export const getPublic = api<(query?: GetPublicQuery, config?: Config<GetPublicQuery, any>) => any[]>`GET /gists/public`

export type GetPublic = Api<typeof getPublic>

/**
 * List starred gists
List the authenticated user's starred gists:
 */
export const getStarred = api<(query?: GetStarredQuery, config?: Config<GetStarredQuery, any>) => any[]>`GET /gists/starred`

export type GetStarred = Api<typeof getStarred>

/**
 * Get a gist
 */
export const getByGistId = api<(paths?: string, config?: Config<any, any>) => Gist_simple>`GET /gists/{gist_id}`

export type GetByGistId = Api<typeof getByGistId>

/**
 * Update a gist
Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
 */
export const patchByGistId = api<(paths?: string, body?: any | null, config?: Config<any, any | null>) => any>`PATCH /gists/{gist_id}`

export type PatchByGistId = Api<typeof patchByGistId>

/**
 * Delete a gist
 */
export const deleteByGistId = api<(paths?: string, config?: Config<any, any>) => any>`DELETE /gists/{gist_id}`

export type DeleteByGistId = Api<typeof deleteByGistId>

/**
 * List gist comments
 */
export const getByGistIdComments = api<(paths?: string, query?: GetByGistIdCommentsQuery, config?: Config<GetByGistIdCommentsQuery, any>) => Gist_comment[]>`GET /gists/{gist_id}/comments`

export type GetByGistIdComments = Api<typeof getByGistIdComments>

/**
 * Create a gist comment
 */
export const postByGistIdComments = api<(paths?: string, body?: UnnamedModel$1, config?: Config<any, UnnamedModel$1>) => any>`POST /gists/{gist_id}/comments`

export type PostByGistIdComments = Api<typeof postByGistIdComments>

/**
 * Get a gist comment
 */
export const getByGistIdCommentsAndCommentId = api<(paths?: [gistid: string, commentid: number], config?: Config<any, any>) => any>`GET /gists/{gist_id}/comments/{comment_id}`

export type GetByGistIdCommentsAndCommentId = Api<typeof getByGistIdCommentsAndCommentId>

/**
 * Update a gist comment
 */
export const patchByGistIdCommentsAndCommentId = api<(paths?: [gistid: string, commentid: number], body?: UnnamedModel$2, config?: Config<any, UnnamedModel$2>) => any>`PATCH /gists/{gist_id}/comments/{comment_id}`

export type PatchByGistIdCommentsAndCommentId = Api<typeof patchByGistIdCommentsAndCommentId>

/**
 * Delete a gist comment
 */
export const deleteByGistIdCommentsAndCommentId = api<(paths?: [gistid: string, commentid: number], config?: Config<any, any>) => any>`DELETE /gists/{gist_id}/comments/{comment_id}`

export type DeleteByGistIdCommentsAndCommentId = Api<typeof deleteByGistIdCommentsAndCommentId>

/**
 * List gist commits
 */
export const getByGistIdCommits = api<(paths?: string, query?: GetByGistIdCommitsQuery, config?: Config<GetByGistIdCommitsQuery, any>) => Gist_commit[]>`GET /gists/{gist_id}/commits`

export type GetByGistIdCommits = Api<typeof getByGistIdCommits>

/**
 * List gist forks
 */
export const getByGistIdForks = api<(paths?: string, query?: GetByGistIdForksQuery, config?: Config<GetByGistIdForksQuery, any>) => any[]>`GET /gists/{gist_id}/forks`

export type GetByGistIdForks = Api<typeof getByGistIdForks>

/**
 * Fork a gist
**Note**: This was previously `/gists/:gist_id/fork`.
 */
export const postByGistIdForks = api<(paths?: string, config?: Config<any, any>) => any>`POST /gists/{gist_id}/forks`

export type PostByGistIdForks = Api<typeof postByGistIdForks>

/**
 * Check if a gist is starred
 */
export const getByGistIdStar = api<(paths?: string, config?: Config<any, any>) => any>`GET /gists/{gist_id}/star`

export type GetByGistIdStar = Api<typeof getByGistIdStar>

/**
 * Star a gist
Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const putByGistIdStar = api<(paths?: string, config?: Config<any, any>) => any>`PUT /gists/{gist_id}/star`

export type PutByGistIdStar = Api<typeof putByGistIdStar>

/**
 * Unstar a gist
 */
export const deleteByGistIdStar = api<(paths?: string, config?: Config<any, any>) => any>`DELETE /gists/{gist_id}/star`

export type DeleteByGistIdStar = Api<typeof deleteByGistIdStar>

/**
 * Get a gist revision
 */
export const getByGistIdAndSha = api<(paths?: [gistid: string, sha: string], config?: Config<any, any>) => any>`GET /gists/{gist_id}/{sha}`

export type GetByGistIdAndSha = Api<typeof getByGistIdAndSha>
