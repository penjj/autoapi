/* eslint-disable */

/**
 * This file was auto generated by `ts-autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the ts-autoapi cli.
 */
import { api, type Config, type Api } from 'ts-autoapi'
import {
  GetQuery,
  GetByUsernameEventsQuery,
  GetByUsernameEventsOrgsAndOrgQuery,
  GetByUsernameEventsPublicQuery,
  GetByUsernameFollowersQuery,
  GetByUsernameFollowingQuery,
  GetByUsernameGistsQuery,
  GetByUsernameGpgKeysQuery,
  GetByUsernameHovercardQuery,
  Hovercard,
  GetByUsernameKeysQuery,
  Key_simple,
  GetByUsernameOrgsQuery,
  GetByUsernameProjectsQuery,
  GetByUsernameReceivedEventsQuery,
  GetByUsernameReceivedEventsPublicQuery,
  GetByUsernameReposQuery,
  GetByUsernameStarredQuery,
  GetByUsernameSubscriptionsQuery
} from './models/users.d'

/**
 * List users
Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.

Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
 */
export const get = api<(query?: GetQuery, config?: Config<GetQuery, any>) => any[]>`GET /users`

export type Get = Api<typeof get>

/**
 * Get a user
Provides publicly available information about someone with a GitHub account.

GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below"

The `email` key in the following response is the publicly visible email address from your GitHub Enterprise Server [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see [Authentication](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#authentication).

The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/enterprise-server@3.0/rest/reference/users#emails)".
 */
export const getByUsername = api<(paths?: string, config?: Config<any, any>) => any>`GET /users/{username}`

export type GetByUsername = Api<typeof getByUsername>

/**
 * List events for the authenticated user
If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 */
export const getByUsernameEvents = api<(paths?: string, query?: GetByUsernameEventsQuery, config?: Config<GetByUsernameEventsQuery, any>) => any[]>`GET /users/{username}/events`

export type GetByUsernameEvents = Api<typeof getByUsernameEvents>

/**
 * List organization events for the authenticated user
This is the user's organization dashboard. You must be authenticated as the user to view this.
 */
export const getByUsernameEventsOrgsAndOrg = api<(paths?: [username: string, org: string], query?: GetByUsernameEventsOrgsAndOrgQuery, config?: Config<GetByUsernameEventsOrgsAndOrgQuery, any>) => any[]>`GET /users/{username}/events/orgs/{org}`

export type GetByUsernameEventsOrgsAndOrg = Api<typeof getByUsernameEventsOrgsAndOrg>

/**
 * List public events for a user
 */
export const getByUsernameEventsPublic = api<(paths?: string, query?: GetByUsernameEventsPublicQuery, config?: Config<GetByUsernameEventsPublicQuery, any>) => any[]>`GET /users/{username}/events/public`

export type GetByUsernameEventsPublic = Api<typeof getByUsernameEventsPublic>

/**
 * List followers of a user
Lists the people following the specified user.
 */
export const getByUsernameFollowers = api<(paths?: string, query?: GetByUsernameFollowersQuery, config?: Config<GetByUsernameFollowersQuery, any>) => any[]>`GET /users/{username}/followers`

export type GetByUsernameFollowers = Api<typeof getByUsernameFollowers>

/**
 * List the people a user follows
Lists the people who the specified user follows.
 */
export const getByUsernameFollowing = api<(paths?: string, query?: GetByUsernameFollowingQuery, config?: Config<GetByUsernameFollowingQuery, any>) => any[]>`GET /users/{username}/following`

export type GetByUsernameFollowing = Api<typeof getByUsernameFollowing>

/**
 * Check if a user follows another user
 */
export const getByUsernameFollowingAndTargetUser = api<(paths?: [username: string, targetuser: string], config?: Config<any, any>) => any>`GET /users/{username}/following/{target_user}`

export type GetByUsernameFollowingAndTargetUser = Api<typeof getByUsernameFollowingAndTargetUser>

/**
 * List gists for a user
Lists public gists for the specified user:
 */
export const getByUsernameGists = api<(paths?: string, query?: GetByUsernameGistsQuery, config?: Config<GetByUsernameGistsQuery, any>) => any[]>`GET /users/{username}/gists`

export type GetByUsernameGists = Api<typeof getByUsernameGists>

/**
 * List GPG keys for a user
Lists the GPG keys for a user. This information is accessible by anyone.
 */
export const getByUsernameGpgKeys = api<(paths?: string, query?: GetByUsernameGpgKeysQuery, config?: Config<GetByUsernameGpgKeysQuery, any>) => any[]>`GET /users/{username}/gpg_keys`

export type GetByUsernameGpgKeys = Api<typeof getByUsernameGpgKeys>

/**
 * Get contextual information for a user
Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.

The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:

```shell
 curl -u username:token
  https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
```
 */
export const getByUsernameHovercard = api<(paths?: string, query?: GetByUsernameHovercardQuery, config?: Config<GetByUsernameHovercardQuery, any>) => Hovercard>`GET /users/{username}/hovercard`

export type GetByUsernameHovercard = Api<typeof getByUsernameHovercard>

/**
 * Get a user installation for the authenticated app
Enables an authenticated GitHub App to find the user’s installation information.

You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getByUsernameInstallation = api<(paths?: string, config?: Config<any, any>) => any>`GET /users/{username}/installation`

export type GetByUsernameInstallation = Api<typeof getByUsernameInstallation>

/**
 * List public keys for a user
Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 */
export const getByUsernameKeys = api<(paths?: string, query?: GetByUsernameKeysQuery, config?: Config<GetByUsernameKeysQuery, any>) => Key_simple[]>`GET /users/{username}/keys`

export type GetByUsernameKeys = Api<typeof getByUsernameKeys>

/**
 * List organizations for a user
List [public organization memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.

This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
 */
export const getByUsernameOrgs = api<(paths?: string, query?: GetByUsernameOrgsQuery, config?: Config<GetByUsernameOrgsQuery, any>) => any[]>`GET /users/{username}/orgs`

export type GetByUsernameOrgs = Api<typeof getByUsernameOrgs>

/**
 * List user projects
 */
export const getByUsernameProjects = api<(paths?: string, query?: GetByUsernameProjectsQuery, config?: Config<GetByUsernameProjectsQuery, any>) => any[]>`GET /users/{username}/projects`

export type GetByUsernameProjects = Api<typeof getByUsernameProjects>

/**
 * List events received by the authenticated user
These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
 */
export const getByUsernameReceivedEvents = api<(paths?: string, query?: GetByUsernameReceivedEventsQuery, config?: Config<GetByUsernameReceivedEventsQuery, any>) => any[]>`GET /users/{username}/received_events`

export type GetByUsernameReceivedEvents = Api<typeof getByUsernameReceivedEvents>

/**
 * List public events received by a user
 */
export const getByUsernameReceivedEventsPublic = api<(paths?: string, query?: GetByUsernameReceivedEventsPublicQuery, config?: Config<GetByUsernameReceivedEventsPublicQuery, any>) => any[]>`GET /users/{username}/received_events/public`

export type GetByUsernameReceivedEventsPublic = Api<typeof getByUsernameReceivedEventsPublic>

/**
 * List repositories for a user
Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
 */
export const getByUsernameRepos = api<(paths?: string, query?: GetByUsernameReposQuery, config?: Config<GetByUsernameReposQuery, any>) => any[]>`GET /users/{username}/repos`

export type GetByUsernameRepos = Api<typeof getByUsernameRepos>

/**
 * Promote a user to be a site administrator
Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const putByUsernameSiteAdmin = api<(paths?: string, config?: Config<any, any>) => any>`PUT /users/{username}/site_admin`

export type PutByUsernameSiteAdmin = Api<typeof putByUsernameSiteAdmin>

/**
 * Demote a site administrator
You can demote any user account except your own.
 */
export const deleteByUsernameSiteAdmin = api<(paths?: string, config?: Config<any, any>) => any>`DELETE /users/{username}/site_admin`

export type DeleteByUsernameSiteAdmin = Api<typeof deleteByUsernameSiteAdmin>

/**
 * List repositories starred by a user
Lists repositories a user has starred.

You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:
 */
export const getByUsernameStarred = api<(paths?: string, query?: GetByUsernameStarredQuery, config?: Config<GetByUsernameStarredQuery, any>) => any>`GET /users/{username}/starred`

export type GetByUsernameStarred = Api<typeof getByUsernameStarred>

/**
 * List repositories watched by a user
Lists repositories a user is watching.
 */
export const getByUsernameSubscriptions = api<(paths?: string, query?: GetByUsernameSubscriptionsQuery, config?: Config<GetByUsernameSubscriptionsQuery, any>) => any[]>`GET /users/{username}/subscriptions`

export type GetByUsernameSubscriptions = Api<typeof getByUsernameSubscriptions>

/**
 * Suspend a user
If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise/admin/guides/user-management/using-ldap), Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a `403` response.

You can suspend any user account except your own.

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const putByUsernameSuspended = api<(paths?: string, body?: any | null, config?: Config<any, any | null>) => any>`PUT /users/{username}/suspended`

export type PutByUsernameSuspended = Api<typeof putByUsernameSuspended>

/**
 * Unsuspend a user
If your GitHub instance uses [LDAP Sync with Active Directory LDAP servers](https://docs.github.com/enterprise/admin/guides/user-management/using-ldap), this API is disabled and will return a `403` response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.
 */
export const deleteByUsernameSuspended = api<(paths?: string, body?: any | null, config?: Config<any, any | null>) => any>`DELETE /users/{username}/suspended`

export type DeleteByUsernameSuspended = Api<typeof deleteByUsernameSuspended>
