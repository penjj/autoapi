/* eslint-disable */

/**
 * This file was auto generated by `autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the autoapi cli.
 */
import { api, type Config, type Api } from 'autoapi'
import {
  UnnamedModel,
  Organization_full,
  UnnamedModel$1,
  Actions_organization_permissions,
  UnnamedModel$2,
  GetByOrgActionsPermissionsRepositoriesQuery,
  UnnamedModel$3,
  UnnamedModel$4,
  GetByOrgActionsRunnerGroupsQuery,
  UnnamedModel$5,
  UnnamedModel$6,
  UnnamedModel$7,
  GetByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesQuery,
  UnnamedModel$8,
  UnnamedModel$9,
  GetByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersQuery,
  UnnamedModel$10,
  UnnamedModel$11,
  GetByOrgActionsRunnersQuery,
  UnnamedModel$12,
  GetByOrgActionsSecretsQuery,
  UnnamedModel$13,
  Actions_public_key,
  UnnamedModel$14,
  GetByOrgActionsSecretsAndSecretNameRepositoriesQuery,
  UnnamedModel$15,
  UnnamedModel$16,
  GetByOrgEventsQuery,
  GetByOrgHooksQuery,
  Org_hook,
  UnnamedModel$19,
  UnnamedModel$21,
  UnnamedModel$22,
  GetByOrgInstallationsQuery,
  UnnamedModel$23,
  GetByOrgIssuesQuery,
  GetByOrgMembersQuery,
  Org_membership,
  UnnamedModel$25,
  GetByOrgOutsideCollaboratorsQuery,
  GetByOrgPreReceiveHooksQuery,
  Org_pre_receive_hook,
  UnnamedModel$26,
  GetByOrgProjectsQuery,
  Project,
  UnnamedModel$27,
  GetByOrgPublicMembersQuery,
  GetByOrgReposQuery,
  UnnamedModel$28,
  GetByOrgTeamsQuery,
  Team,
  UnnamedModel$30,
  Team_full,
  UnnamedModel$31,
  GetByOrgTeamsAndTeamSlugDiscussionsQuery,
  Team_discussion,
  UnnamedModel$32,
  UnnamedModel$33,
  GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsQuery,
  Team_discussion_comment,
  UnnamedModel$34,
  UnnamedModel$35,
  GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactionsQuery,
  Reaction,
  UnnamedModel$36,
  GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactionsQuery,
  UnnamedModel$37,
  GetByOrgTeamsAndTeamSlugMembersQuery,
  Team_membership,
  UnnamedModel$38,
  GetByOrgTeamsAndTeamSlugProjectsQuery,
  Team_project,
  GetByOrgTeamsAndTeamSlugReposQuery,
  Team_repository,
  UnnamedModel$41,
  GetByOrgTeamsAndTeamSlugTeamsQuery
} from './models/orgs.d'

/**
 * Get an organization
To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).

GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See "[Authenticating with GitHub Apps](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below."
 */
export const getByOrg = api<(paths?: string, config?: Config<any, any>) => Organization_full>`GET /orgs/{org}`

export type GetByOrg = Api<typeof getByOrg>

/**
 * Update an organization
**Parameter Deprecation Notice:** GitHub Enterprise Server will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).

Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
 */
export const patchByOrg = api<(paths?: string, body?: UnnamedModel$1, config?: Config<any, UnnamedModel$1>) => any>`PATCH /orgs/{org}`

export type PatchByOrg = Api<typeof patchByOrg>

/**
 * Get GitHub Actions permissions for an organization
Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const getByOrgActionsPermissions = api<(paths?: string, config?: Config<any, any>) => Actions_organization_permissions>`GET /orgs/{org}/actions/permissions`

export type GetByOrgActionsPermissions = Api<typeof getByOrgActionsPermissions>

/**
 * Set GitHub Actions permissions for an organization
Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.

If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const putByOrgActionsPermissions = api<(paths?: string, body?: UnnamedModel$2, config?: Config<any, UnnamedModel$2>) => any>`PUT /orgs/{org}/actions/permissions`

export type PutByOrgActionsPermissions = Api<typeof putByOrgActionsPermissions>

/**
 * List selected repositories enabled for GitHub Actions in an organization
Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const getByOrgActionsPermissionsRepositories = api<(paths?: string, query?: GetByOrgActionsPermissionsRepositoriesQuery, config?: Config<GetByOrgActionsPermissionsRepositoriesQuery, any>) => UnnamedModel$3>`GET /orgs/{org}/actions/permissions/repositories`

export type GetByOrgActionsPermissionsRepositories = Api<typeof getByOrgActionsPermissionsRepositories>

/**
 * Set selected repositories enabled for GitHub Actions in an organization
Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const putByOrgActionsPermissionsRepositories = api<(paths?: string, body?: UnnamedModel$4, config?: Config<any, UnnamedModel$4>) => any>`PUT /orgs/{org}/actions/permissions/repositories`

export type PutByOrgActionsPermissionsRepositories = Api<typeof putByOrgActionsPermissionsRepositories>

/**
 * Enable a selected repository for GitHub Actions in an organization
Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const putByOrgActionsPermissionsRepositoriesAndRepositoryId = api<(paths?: [org: string, repositoryid: number], config?: Config<any, any>) => any>`PUT /orgs/{org}/actions/permissions/repositories/{repository_id}`

export type PutByOrgActionsPermissionsRepositoriesAndRepositoryId = Api<typeof putByOrgActionsPermissionsRepositoriesAndRepositoryId>

/**
 * Disable a selected repository for GitHub Actions in an organization
Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const deleteByOrgActionsPermissionsRepositoriesAndRepositoryId = api<(paths?: [org: string, repositoryid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}`

export type DeleteByOrgActionsPermissionsRepositoriesAndRepositoryId = Api<typeof deleteByOrgActionsPermissionsRepositoriesAndRepositoryId>

/**
 * Get allowed actions for an organization
Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const getByOrgActionsPermissionsSelectedActions = api<(paths?: string, config?: Config<any, any>) => any>`GET /orgs/{org}/actions/permissions/selected-actions`

export type GetByOrgActionsPermissionsSelectedActions = Api<typeof getByOrgActionsPermissionsSelectedActions>

/**
 * Set allowed actions for an organization
Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."

If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.

To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
 */
export const putByOrgActionsPermissionsSelectedActions = api<(paths?: string, body?: any, config?: Config<any, any>) => any>`PUT /orgs/{org}/actions/permissions/selected-actions`

export type PutByOrgActionsPermissionsSelectedActions = Api<typeof putByOrgActionsPermissionsSelectedActions>

/**
 * List self-hosted runner groups for an organization
Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const getByOrgActionsRunnerGroups = api<(paths?: string, query?: GetByOrgActionsRunnerGroupsQuery, config?: Config<GetByOrgActionsRunnerGroupsQuery, any>) => UnnamedModel$5>`GET /orgs/{org}/actions/runner-groups`

export type GetByOrgActionsRunnerGroups = Api<typeof getByOrgActionsRunnerGroups>

/**
 * Create a self-hosted runner group for an organization
The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Creates a new self-hosted runner group for an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const postByOrgActionsRunnerGroups = api<(paths?: string, body?: UnnamedModel$6, config?: Config<any, UnnamedModel$6>) => any>`POST /orgs/{org}/actions/runner-groups`

export type PostByOrgActionsRunnerGroups = Api<typeof postByOrgActionsRunnerGroups>

/**
 * Get a self-hosted runner group for an organization
Gets a specific self-hosted runner group for an organization.
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const getByOrgActionsRunnerGroupsAndRunnerGroupId = api<(paths?: [org: string, runnergroupid: number], config?: Config<any, any>) => any>`GET /orgs/{org}/actions/runner-groups/{runner_group_id}`

export type GetByOrgActionsRunnerGroupsAndRunnerGroupId = Api<typeof getByOrgActionsRunnerGroupsAndRunnerGroupId>

/**
 * Update a self-hosted runner group for an organization
Updates the `name` and `visibility` of a self-hosted runner group in an organization.
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const patchByOrgActionsRunnerGroupsAndRunnerGroupId = api<(paths?: [org: string, runnergroupid: number], body?: UnnamedModel$7, config?: Config<any, UnnamedModel$7>) => any>`PATCH /orgs/{org}/actions/runner-groups/{runner_group_id}`

export type PatchByOrgActionsRunnerGroupsAndRunnerGroupId = Api<typeof patchByOrgActionsRunnerGroupsAndRunnerGroupId>

/**
 * Delete a self-hosted runner group from an organization
Deletes a self-hosted runner group for an organization.
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const deleteByOrgActionsRunnerGroupsAndRunnerGroupId = api<(paths?: [org: string, runnergroupid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}`

export type DeleteByOrgActionsRunnerGroupsAndRunnerGroupId = Api<typeof deleteByOrgActionsRunnerGroupsAndRunnerGroupId>

/**
 * List repository access to a self-hosted runner group in an organization
The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."

Lists the repositories with access to a self-hosted runner group configured in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const getByOrgActionsRunnerGroupsAndRunnerGroupIdRepositories = api<(paths?: [org: string, runnergroupid: number], query?: GetByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesQuery, config?: Config<GetByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesQuery, any>) => UnnamedModel$8>`GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories`

export type GetByOrgActionsRunnerGroupsAndRunnerGroupIdRepositories = Api<typeof getByOrgActionsRunnerGroupsAndRunnerGroupIdRepositories>

/**
 * Set repository access for a self-hosted runner group in an organization
Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const putByOrgActionsRunnerGroupsAndRunnerGroupIdRepositories = api<(paths?: [org: string, runnergroupid: number], body?: UnnamedModel$9, config?: Config<any, UnnamedModel$9>) => any>`PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories`

export type PutByOrgActionsRunnerGroupsAndRunnerGroupIdRepositories = Api<typeof putByOrgActionsRunnerGroupsAndRunnerGroupIdRepositories>

/**
 * Add repository access to a self-hosted runner group in an organization
Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const putByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesAndRepositoryId = api<(paths?: [org: string, runnergroupid: number, repositoryid: number], config?: Config<any, any>) => any>`PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}`

export type PutByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesAndRepositoryId = Api<typeof putByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesAndRepositoryId>

/**
 * Remove repository access to a self-hosted runner group in an organization
Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const deleteByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesAndRepositoryId = api<(paths?: [org: string, runnergroupid: number, repositoryid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}`

export type DeleteByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesAndRepositoryId = Api<typeof deleteByOrgActionsRunnerGroupsAndRunnerGroupIdRepositoriesAndRepositoryId>

/**
 * List self-hosted runners in a group for an organization
Lists self-hosted runners that are in a specific organization group.
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const getByOrgActionsRunnerGroupsAndRunnerGroupIdRunners = api<(paths?: [org: string, runnergroupid: number], query?: GetByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersQuery, config?: Config<GetByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersQuery, any>) => UnnamedModel$10>`GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners`

export type GetByOrgActionsRunnerGroupsAndRunnerGroupIdRunners = Api<typeof getByOrgActionsRunnerGroupsAndRunnerGroupIdRunners>

/**
 * Set self-hosted runners in a group for an organization
Replaces the list of self-hosted runners that are part of an organization runner group.
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const putByOrgActionsRunnerGroupsAndRunnerGroupIdRunners = api<(paths?: [org: string, runnergroupid: number], body?: UnnamedModel$11, config?: Config<any, UnnamedModel$11>) => any>`PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners`

export type PutByOrgActionsRunnerGroupsAndRunnerGroupIdRunners = Api<typeof putByOrgActionsRunnerGroupsAndRunnerGroupIdRunners>

/**
 * Add a self-hosted runner to a group for an organization
Adds a self-hosted runner to a runner group configured in an organization.
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const putByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersAndRunnerId = api<(paths?: [org: string, runnergroupid: number, runnerid: number], config?: Config<any, any>) => any>`PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}`

export type PutByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersAndRunnerId = Api<typeof putByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersAndRunnerId>

/**
 * Remove a self-hosted runner from a group for an organization
Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const deleteByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersAndRunnerId = api<(paths?: [org: string, runnergroupid: number, runnerid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}`

export type DeleteByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersAndRunnerId = Api<typeof deleteByOrgActionsRunnerGroupsAndRunnerGroupIdRunnersAndRunnerId>

/**
 * List self-hosted runners for an organization
Lists all self-hosted runners configured in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const getByOrgActionsRunners = api<(paths?: string, query?: GetByOrgActionsRunnersQuery, config?: Config<GetByOrgActionsRunnersQuery, any>) => UnnamedModel$12>`GET /orgs/{org}/actions/runners`

export type GetByOrgActionsRunners = Api<typeof getByOrgActionsRunners>

/**
 * List runner applications for an organization
Lists binaries for the runner application that you can download and run.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const getByOrgActionsRunnersDownloads = api<(paths?: string, config?: Config<any, any>) => any[]>`GET /orgs/{org}/actions/runners/downloads`

export type GetByOrgActionsRunnersDownloads = Api<typeof getByOrgActionsRunnersDownloads>

/**
 * Create a registration token for an organization
Returns a token that you can pass to the `config` script. The token expires after one hour.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.

#### Example using registration token

Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.

```
./config.sh --url https://github.com/octo-org --token TOKEN
```
 */
export const postByOrgActionsRunnersRegistrationToken = api<(paths?: string, config?: Config<any, any>) => any>`POST /orgs/{org}/actions/runners/registration-token`

export type PostByOrgActionsRunnersRegistrationToken = Api<typeof postByOrgActionsRunnersRegistrationToken>

/**
 * Create a remove token for an organization
Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.

#### Example using remove token

To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
endpoint.

```
./config.sh remove --token TOKEN
```
 */
export const postByOrgActionsRunnersRemoveToken = api<(paths?: string, config?: Config<any, any>) => any>`POST /orgs/{org}/actions/runners/remove-token`

export type PostByOrgActionsRunnersRemoveToken = Api<typeof postByOrgActionsRunnersRemoveToken>

/**
 * Get a self-hosted runner for an organization
Gets a specific self-hosted runner configured in an organization.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const getByOrgActionsRunnersAndRunnerId = api<(paths?: [org: string, runnerid: number], config?: Config<any, any>) => any>`GET /orgs/{org}/actions/runners/{runner_id}`

export type GetByOrgActionsRunnersAndRunnerId = Api<typeof getByOrgActionsRunnersAndRunnerId>

/**
 * Delete a self-hosted runner from an organization
Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.

You must authenticate using an access token with the `admin:org` scope to use this endpoint.
 */
export const deleteByOrgActionsRunnersAndRunnerId = api<(paths?: [org: string, runnerid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/actions/runners/{runner_id}`

export type DeleteByOrgActionsRunnersAndRunnerId = Api<typeof deleteByOrgActionsRunnersAndRunnerId>

/**
 * List organization secrets
Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const getByOrgActionsSecrets = api<(paths?: string, query?: GetByOrgActionsSecretsQuery, config?: Config<GetByOrgActionsSecretsQuery, any>) => UnnamedModel$13>`GET /orgs/{org}/actions/secrets`

export type GetByOrgActionsSecrets = Api<typeof getByOrgActionsSecrets>

/**
 * Get an organization public key
Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const getByOrgActionsSecretsPublicKey = api<(paths?: string, config?: Config<any, any>) => Actions_public_key>`GET /orgs/{org}/actions/secrets/public-key`

export type GetByOrgActionsSecretsPublicKey = Api<typeof getByOrgActionsSecretsPublicKey>

/**
 * Get an organization secret
Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const getByOrgActionsSecretsAndSecretName = api<(paths?: [org: string, secretname: string], config?: Config<any, any>) => any>`GET /orgs/{org}/actions/secrets/{secret_name}`

export type GetByOrgActionsSecretsAndSecretName = Api<typeof getByOrgActionsSecretsAndSecretName>

/**
 * Create or update an organization secret
Creates or updates an organization secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
use this endpoint.

#### Example encrypting a secret using Node.js

Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.

```
const sodium = require('tweetsodium');

const key = "base64-encoded-public-key";
const value = "plain-text-secret";

// Convert the message and key to Uint8Array's (Buffer implements that interface)
const messageBytes = Buffer.from(value);
const keyBytes = Buffer.from(key, 'base64');

// Encrypt using LibSodium.
const encryptedBytes = sodium.seal(messageBytes, keyBytes);

// Base64 the encrypted secret
const encrypted = Buffer.from(encryptedBytes).toString('base64');

console.log(encrypted);
```


#### Example encrypting a secret using Python

Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.

```
from base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
  """Encrypt a Unicode string using the public key."""
  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
  sealed_box = public.SealedBox(public_key)
  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
  return b64encode(encrypted).decode("utf-8")
```

#### Example encrypting a secret using C#

Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.

```
var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");

var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);

Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
```

#### Example encrypting a secret using Ruby

Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.

```ruby
require "rbnacl"
require "base64"

key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
public_key = RbNaCl::PublicKey.new(key)

box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
encrypted_secret = box.encrypt("my_secret")

# Print the base64 encoded secret
puts Base64.strict_encode64(encrypted_secret)
```
 */
export const putByOrgActionsSecretsAndSecretName = api<(paths?: [org: string, secretname: string], body?: UnnamedModel$14, config?: Config<any, UnnamedModel$14>) => any>`PUT /orgs/{org}/actions/secrets/{secret_name}`

export type PutByOrgActionsSecretsAndSecretName = Api<typeof putByOrgActionsSecretsAndSecretName>

/**
 * Delete an organization secret
Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const deleteByOrgActionsSecretsAndSecretName = api<(paths?: [org: string, secretname: string], config?: Config<any, any>) => any>`DELETE /orgs/{org}/actions/secrets/{secret_name}`

export type DeleteByOrgActionsSecretsAndSecretName = Api<typeof deleteByOrgActionsSecretsAndSecretName>

/**
 * List selected repositories for an organization secret
Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const getByOrgActionsSecretsAndSecretNameRepositories = api<(paths?: [org: string, secretname: string], query?: GetByOrgActionsSecretsAndSecretNameRepositoriesQuery, config?: Config<GetByOrgActionsSecretsAndSecretNameRepositoriesQuery, any>) => UnnamedModel$15>`GET /orgs/{org}/actions/secrets/{secret_name}/repositories`

export type GetByOrgActionsSecretsAndSecretNameRepositories = Api<typeof getByOrgActionsSecretsAndSecretNameRepositories>

/**
 * Set selected repositories for an organization secret
Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const putByOrgActionsSecretsAndSecretNameRepositories = api<(paths?: [org: string, secretname: string], body?: UnnamedModel$16, config?: Config<any, UnnamedModel$16>) => any>`PUT /orgs/{org}/actions/secrets/{secret_name}/repositories`

export type PutByOrgActionsSecretsAndSecretNameRepositories = Api<typeof putByOrgActionsSecretsAndSecretNameRepositories>

/**
 * Add selected repository to an organization secret
Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const putByOrgActionsSecretsAndSecretNameRepositoriesAndRepositoryId = api<(paths?: [org: string, secretname: string, repositoryid: number], config?: Config<any, any>) => any>`PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`

export type PutByOrgActionsSecretsAndSecretNameRepositoriesAndRepositoryId = Api<typeof putByOrgActionsSecretsAndSecretNameRepositoriesAndRepositoryId>

/**
 * Remove selected repository from an organization secret
Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/enterprise-server@3.0/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
 */
export const deleteByOrgActionsSecretsAndSecretNameRepositoriesAndRepositoryId = api<(paths?: [org: string, secretname: string, repositoryid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}`

export type DeleteByOrgActionsSecretsAndSecretNameRepositoriesAndRepositoryId = Api<typeof deleteByOrgActionsSecretsAndSecretNameRepositoriesAndRepositoryId>

/**
 * List public organization events
 */
export const getByOrgEvents = api<(paths?: string, query?: GetByOrgEventsQuery, config?: Config<GetByOrgEventsQuery, any>) => any[]>`GET /orgs/{org}/events`

export type GetByOrgEvents = Api<typeof getByOrgEvents>

/**
 * List organization webhooks
 */
export const getByOrgHooks = api<(paths?: string, query?: GetByOrgHooksQuery, config?: Config<GetByOrgHooksQuery, any>) => Org_hook[]>`GET /orgs/{org}/hooks`

export type GetByOrgHooks = Api<typeof getByOrgHooks>

/**
 * Create an organization webhook
Here's how you can create a hook that posts payloads in JSON format:
 */
export const postByOrgHooks = api<(paths?: string, body?: UnnamedModel$19, config?: Config<any, UnnamedModel$19>) => any>`POST /orgs/{org}/hooks`

export type PostByOrgHooks = Api<typeof postByOrgHooks>

/**
 * Get an organization webhook
Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
 */
export const getByOrgHooksAndHookId = api<(paths?: [org: string, hookid: number], config?: Config<any, any>) => any>`GET /orgs/{org}/hooks/{hook_id}`

export type GetByOrgHooksAndHookId = Api<typeof getByOrgHooksAndHookId>

/**
 * Update an organization webhook
Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
 */
export const patchByOrgHooksAndHookId = api<(paths?: [org: string, hookid: number], body?: UnnamedModel$21, config?: Config<any, UnnamedModel$21>) => any>`PATCH /orgs/{org}/hooks/{hook_id}`

export type PatchByOrgHooksAndHookId = Api<typeof patchByOrgHooksAndHookId>

/**
 * Delete an organization webhook
 */
export const deleteByOrgHooksAndHookId = api<(paths?: [org: string, hookid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/hooks/{hook_id}`

export type DeleteByOrgHooksAndHookId = Api<typeof deleteByOrgHooksAndHookId>

/**
 * Get a webhook configuration for an organization
Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."

Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
 */
export const getByOrgHooksAndHookIdConfig = api<(paths?: [org: string, hookid: number], config?: Config<any, any>) => any>`GET /orgs/{org}/hooks/{hook_id}/config`

export type GetByOrgHooksAndHookIdConfig = Api<typeof getByOrgHooksAndHookIdConfig>

/**
 * Update a webhook configuration for an organization
Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."

Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
 */
export const patchByOrgHooksAndHookIdConfig = api<(paths?: [org: string, hookid: number], body?: UnnamedModel$22, config?: Config<any, UnnamedModel$22>) => any>`PATCH /orgs/{org}/hooks/{hook_id}/config`

export type PatchByOrgHooksAndHookIdConfig = Api<typeof patchByOrgHooksAndHookIdConfig>

/**
 * Ping an organization webhook
This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the hook.
 */
export const postByOrgHooksAndHookIdPings = api<(paths?: [org: string, hookid: number], config?: Config<any, any>) => any>`POST /orgs/{org}/hooks/{hook_id}/pings`

export type PostByOrgHooksAndHookIdPings = Api<typeof postByOrgHooksAndHookIdPings>

/**
 * Get an organization installation for the authenticated app
Enables an authenticated GitHub App to find the organization's installation information.

You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getByOrgInstallation = api<(paths?: string, config?: Config<any, any>) => any>`GET /orgs/{org}/installation`

export type GetByOrgInstallation = Api<typeof getByOrgInstallation>

/**
 * List app installations for an organization
Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
 */
export const getByOrgInstallations = api<(paths?: string, query?: GetByOrgInstallationsQuery, config?: Config<GetByOrgInstallationsQuery, any>) => UnnamedModel$23>`GET /orgs/{org}/installations`

export type GetByOrgInstallations = Api<typeof getByOrgInstallations>

/**
 * List organization issues assigned to the authenticated user
List issues in an organization assigned to the authenticated user.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const getByOrgIssues = api<(paths?: string, query?: GetByOrgIssuesQuery, config?: Config<GetByOrgIssuesQuery, any>) => any[]>`GET /orgs/{org}/issues`

export type GetByOrgIssues = Api<typeof getByOrgIssues>

/**
 * List organization members
List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
 */
export const getByOrgMembers = api<(paths?: string, query?: GetByOrgMembersQuery, config?: Config<GetByOrgMembersQuery, any>) => any[]>`GET /orgs/{org}/members`

export type GetByOrgMembers = Api<typeof getByOrgMembers>

/**
 * Check organization membership for a user
Check if a user is, publicly or privately, a member of the organization.
 */
export const getByOrgMembersAndUsername = api<(paths?: [org: string, username: string], config?: Config<any, any>) => any>`GET /orgs/{org}/members/{username}`

export type GetByOrgMembersAndUsername = Api<typeof getByOrgMembersAndUsername>

/**
 * Remove an organization member
Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
 */
export const deleteByOrgMembersAndUsername = api<(paths?: [org: string, username: string], config?: Config<any, any>) => any>`DELETE /orgs/{org}/members/{username}`

export type DeleteByOrgMembersAndUsername = Api<typeof deleteByOrgMembersAndUsername>

/**
 * Get organization membership for a user
In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
 */
export const getByOrgMembershipsAndUsername = api<(paths?: [org: string, username: string], config?: Config<any, any>) => Org_membership>`GET /orgs/{org}/memberships/{username}`

export type GetByOrgMembershipsAndUsername = Api<typeof getByOrgMembershipsAndUsername>

/**
 * Set organization membership for a user
Only authenticated organization owners can add a member to the organization or update the member's role.

*   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/enterprise-server@3.0/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
    
*   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.

**Rate limits**

To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
 */
export const putByOrgMembershipsAndUsername = api<(paths?: [org: string, username: string], body?: UnnamedModel$25, config?: Config<any, UnnamedModel$25>) => any>`PUT /orgs/{org}/memberships/{username}`

export type PutByOrgMembershipsAndUsername = Api<typeof putByOrgMembershipsAndUsername>

/**
 * Remove organization membership for a user
In order to remove a user's membership with an organization, the authenticated user must be an organization owner.

If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
 */
export const deleteByOrgMembershipsAndUsername = api<(paths?: [org: string, username: string], config?: Config<any, any>) => any>`DELETE /orgs/{org}/memberships/{username}`

export type DeleteByOrgMembershipsAndUsername = Api<typeof deleteByOrgMembershipsAndUsername>

/**
 * List outside collaborators for an organization
List all users who are outside collaborators of an organization.
 */
export const getByOrgOutsideCollaborators = api<(paths?: string, query?: GetByOrgOutsideCollaboratorsQuery, config?: Config<GetByOrgOutsideCollaboratorsQuery, any>) => any[]>`GET /orgs/{org}/outside_collaborators`

export type GetByOrgOutsideCollaborators = Api<typeof getByOrgOutsideCollaborators>

/**
 * Convert an organization member to outside collaborator
When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
 */
export const putByOrgOutsideCollaboratorsAndUsername = api<(paths?: [org: string, username: string], config?: Config<any, any>) => any>`PUT /orgs/{org}/outside_collaborators/{username}`

export type PutByOrgOutsideCollaboratorsAndUsername = Api<typeof putByOrgOutsideCollaboratorsAndUsername>

/**
 * Remove outside collaborator from an organization
Removing a user from this list will remove them from all the organization's repositories.
 */
export const deleteByOrgOutsideCollaboratorsAndUsername = api<(paths?: [org: string, username: string], config?: Config<any, any>) => any>`DELETE /orgs/{org}/outside_collaborators/{username}`

export type DeleteByOrgOutsideCollaboratorsAndUsername = Api<typeof deleteByOrgOutsideCollaboratorsAndUsername>

/**
 * List pre-receive hooks for an organization
List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.
 */
export const getByOrgPreReceiveHooks = api<(paths?: string, query?: GetByOrgPreReceiveHooksQuery, config?: Config<GetByOrgPreReceiveHooksQuery, any>) => Org_pre_receive_hook[]>`GET /orgs/{org}/pre-receive-hooks`

export type GetByOrgPreReceiveHooks = Api<typeof getByOrgPreReceiveHooks>

/**
 * Get a pre-receive hook for an organization
 */
export const getByOrgPreReceiveHooksAndPreReceiveHookId = api<(paths?: [org: string, prereceivehookid: number], config?: Config<any, any>) => any>`GET /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}`

export type GetByOrgPreReceiveHooksAndPreReceiveHookId = Api<typeof getByOrgPreReceiveHooksAndPreReceiveHookId>

/**
 * Update pre-receive hook enforcement for an organization
For pre-receive hooks which are allowed to be configured at the org level, you can set `enforcement` and `allow_downstream_configuration`
 */
export const patchByOrgPreReceiveHooksAndPreReceiveHookId = api<(paths?: [org: string, prereceivehookid: number], body?: UnnamedModel$26, config?: Config<any, UnnamedModel$26>) => any>`PATCH /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}`

export type PatchByOrgPreReceiveHooksAndPreReceiveHookId = Api<typeof patchByOrgPreReceiveHooksAndPreReceiveHookId>

/**
 * Remove pre-receive hook enforcement for an organization
Removes any overrides for this hook at the org level for this org.
 */
export const deleteByOrgPreReceiveHooksAndPreReceiveHookId = api<(paths?: [org: string, prereceivehookid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}`

export type DeleteByOrgPreReceiveHooksAndPreReceiveHookId = Api<typeof deleteByOrgPreReceiveHooksAndPreReceiveHookId>

/**
 * List organization projects
Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const getByOrgProjects = api<(paths?: string, query?: GetByOrgProjectsQuery, config?: Config<GetByOrgProjectsQuery, any>) => Project[]>`GET /orgs/{org}/projects`

export type GetByOrgProjects = Api<typeof getByOrgProjects>

/**
 * Create an organization project
Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const postByOrgProjects = api<(paths?: string, body?: UnnamedModel$27, config?: Config<any, UnnamedModel$27>) => any>`POST /orgs/{org}/projects`

export type PostByOrgProjects = Api<typeof postByOrgProjects>

/**
 * List public organization members
Members of an organization can choose to have their membership publicized or not.
 */
export const getByOrgPublicMembers = api<(paths?: string, query?: GetByOrgPublicMembersQuery, config?: Config<GetByOrgPublicMembersQuery, any>) => any[]>`GET /orgs/{org}/public_members`

export type GetByOrgPublicMembers = Api<typeof getByOrgPublicMembers>

/**
 * Check public organization membership for a user
 */
export const getByOrgPublicMembersAndUsername = api<(paths?: [org: string, username: string], config?: Config<any, any>) => any>`GET /orgs/{org}/public_members/{username}`

export type GetByOrgPublicMembersAndUsername = Api<typeof getByOrgPublicMembersAndUsername>

/**
 * Set public organization membership for the authenticated user
The user can publicize their own membership. (A user cannot publicize the membership for another user.)

Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const putByOrgPublicMembersAndUsername = api<(paths?: [org: string, username: string], config?: Config<any, any>) => any>`PUT /orgs/{org}/public_members/{username}`

export type PutByOrgPublicMembersAndUsername = Api<typeof putByOrgPublicMembersAndUsername>

/**
 * Remove public organization membership for the authenticated user
 */
export const deleteByOrgPublicMembersAndUsername = api<(paths?: [org: string, username: string], config?: Config<any, any>) => any>`DELETE /orgs/{org}/public_members/{username}`

export type DeleteByOrgPublicMembersAndUsername = Api<typeof deleteByOrgPublicMembersAndUsername>

/**
 * List organization repositories
Lists repositories for the specified organization.
 */
export const getByOrgRepos = api<(paths?: string, query?: GetByOrgReposQuery, config?: Config<GetByOrgReposQuery, any>) => any[]>`GET /orgs/{org}/repos`

export type GetByOrgRepos = Api<typeof getByOrgRepos>

/**
 * Create an organization repository
Creates a new repository in the specified organization. The authenticated user must be a member of the organization.

**OAuth scope requirements**

When using [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:

*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
*   `repo` scope to create a private repository
 */
export const postByOrgRepos = api<(paths?: string, body?: UnnamedModel$28, config?: Config<any, UnnamedModel$28>) => any>`POST /orgs/{org}/repos`

export type PostByOrgRepos = Api<typeof postByOrgRepos>

/**
 * List teams
Lists all teams in an organization that are visible to the authenticated user.
 */
export const getByOrgTeams = api<(paths?: string, query?: GetByOrgTeamsQuery, config?: Config<GetByOrgTeamsQuery, any>) => Team[]>`GET /orgs/{org}/teams`

export type GetByOrgTeams = Api<typeof getByOrgTeams>

/**
 * Create a team
To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."

When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
 */
export const postByOrgTeams = api<(paths?: string, body?: UnnamedModel$30, config?: Config<any, UnnamedModel$30>) => any>`POST /orgs/{org}/teams`

export type PostByOrgTeams = Api<typeof postByOrgTeams>

/**
 * Get a team by name
Gets a team using the team's `slug`. GitHub Enterprise Server generates the `slug` from the team `name`.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
 */
export const getByOrgTeamsAndTeamSlug = api<(paths?: [org: string, teamslug: string], config?: Config<any, any>) => Team_full>`GET /orgs/{org}/teams/{team_slug}`

export type GetByOrgTeamsAndTeamSlug = Api<typeof getByOrgTeamsAndTeamSlug>

/**
 * Update a team
To edit a team, the authenticated user must either be an organization owner or a team maintainer.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
 */
export const patchByOrgTeamsAndTeamSlug = api<(paths?: [org: string, teamslug: string], body?: UnnamedModel$31, config?: Config<any, UnnamedModel$31>) => any>`PATCH /orgs/{org}/teams/{team_slug}`

export type PatchByOrgTeamsAndTeamSlug = Api<typeof patchByOrgTeamsAndTeamSlug>

/**
 * Delete a team
To delete a team, the authenticated user must be an organization owner or team maintainer.

If you are an organization owner, deleting a parent team will delete all of its child teams as well.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
 */
export const deleteByOrgTeamsAndTeamSlug = api<(paths?: [org: string, teamslug: string], config?: Config<any, any>) => any>`DELETE /orgs/{org}/teams/{team_slug}`

export type DeleteByOrgTeamsAndTeamSlug = Api<typeof deleteByOrgTeamsAndTeamSlug>

/**
 * List discussions
List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const getByOrgTeamsAndTeamSlugDiscussions = api<(paths?: [org: string, teamslug: string], query?: GetByOrgTeamsAndTeamSlugDiscussionsQuery, config?: Config<GetByOrgTeamsAndTeamSlugDiscussionsQuery, any>) => Team_discussion[]>`GET /orgs/{org}/teams/{team_slug}/discussions`

export type GetByOrgTeamsAndTeamSlugDiscussions = Api<typeof getByOrgTeamsAndTeamSlugDiscussions>

/**
 * Create a discussion
Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
 */
export const postByOrgTeamsAndTeamSlugDiscussions = api<(paths?: [org: string, teamslug: string], body?: UnnamedModel$32, config?: Config<any, UnnamedModel$32>) => any>`POST /orgs/{org}/teams/{team_slug}/discussions`

export type PostByOrgTeamsAndTeamSlugDiscussions = Api<typeof postByOrgTeamsAndTeamSlugDiscussions>

/**
 * Get a discussion
Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumber = api<(paths?: [org: string, teamslug: string, discussionnumber: number], config?: Config<any, any>) => any>`GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`

export type GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumber = Api<typeof getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumber>

/**
 * Update a discussion
Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const patchByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumber = api<(paths?: [org: string, teamslug: string, discussionnumber: number], body?: UnnamedModel$33, config?: Config<any, UnnamedModel$33>) => any>`PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`

export type PatchByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumber = Api<typeof patchByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumber>

/**
 * Delete a discussion
Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 */
export const deleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumber = api<(paths?: [org: string, teamslug: string, discussionnumber: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}`

export type DeleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumber = Api<typeof deleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumber>

/**
 * List discussion comments
List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberComments = api<(paths?: [org: string, teamslug: string, discussionnumber: number], query?: GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsQuery, config?: Config<GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsQuery, any>) => Team_discussion_comment[]>`GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`

export type GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberComments = Api<typeof getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberComments>

/**
 * Create a discussion comment
Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 */
export const postByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberComments = api<(paths?: [org: string, teamslug: string, discussionnumber: number], body?: UnnamedModel$34, config?: Config<any, UnnamedModel$34>) => any>`POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments`

export type PostByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberComments = Api<typeof postByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberComments>

/**
 * Get a discussion comment
Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumber = api<(paths?: [org: string, teamslug: string, discussionnumber: number, commentnumber: number], config?: Config<any, any>) => any>`GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`

export type GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumber = Api<typeof getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumber>

/**
 * Update a discussion comment
Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const patchByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumber = api<(paths?: [org: string, teamslug: string, discussionnumber: number, commentnumber: number], body?: UnnamedModel$35, config?: Config<any, UnnamedModel$35>) => any>`PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`

export type PatchByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumber = Api<typeof patchByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumber>

/**
 * Delete a discussion comment
Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 */
export const deleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumber = api<(paths?: [org: string, teamslug: string, discussionnumber: number, commentnumber: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}`

export type DeleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumber = Api<typeof deleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumber>

/**
 * List reactions for a team discussion comment
List the reactions to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactions = api<(paths?: [org: string, teamslug: string, discussionnumber: number, commentnumber: number], query?: GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactionsQuery, config?: Config<GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactionsQuery, any>) => Reaction[]>`GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions`

export type GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactions = Api<typeof getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactions>

/**
 * Create reaction for a team discussion comment
Create a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 */
export const postByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactions = api<(paths?: [org: string, teamslug: string, discussionnumber: number, commentnumber: number], body?: UnnamedModel$36, config?: Config<any, UnnamedModel$36>) => any>`POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions`

export type PostByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactions = Api<typeof postByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactions>

/**
 * Delete team discussion comment reaction
**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.

Delete a reaction to a [team discussion comment](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactionsAndReactionId = api<(paths?: [org: string, teamslug: string, discussionnumber: number, commentnumber: number, reactionid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}`

export type DeleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactionsAndReactionId = Api<typeof deleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberCommentsAndCommentNumberReactionsAndReactionId>

/**
 * List reactions for a team discussion
List the reactions to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactions = api<(paths?: [org: string, teamslug: string, discussionnumber: number], query?: GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactionsQuery, config?: Config<GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactionsQuery, any>) => any[]>`GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions`

export type GetByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactions = Api<typeof getByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactions>

/**
 * Create reaction for a team discussion
Create a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 */
export const postByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactions = api<(paths?: [org: string, teamslug: string, discussionnumber: number], body?: UnnamedModel$37, config?: Config<any, UnnamedModel$37>) => any>`POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions`

export type PostByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactions = Api<typeof postByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactions>

/**
 * Delete team discussion reaction
**Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.

Delete a reaction to a [team discussion](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
 */
export const deleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactionsAndReactionId = api<(paths?: [org: string, teamslug: string, discussionnumber: number, reactionid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}`

export type DeleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactionsAndReactionId = Api<typeof deleteByOrgTeamsAndTeamSlugDiscussionsAndDiscussionNumberReactionsAndReactionId>

/**
 * List team members
Team members will include the members of child teams.

To list members in a team, the team must be visible to the authenticated user.
 */
export const getByOrgTeamsAndTeamSlugMembers = api<(paths?: [org: string, teamslug: string], query?: GetByOrgTeamsAndTeamSlugMembersQuery, config?: Config<GetByOrgTeamsAndTeamSlugMembersQuery, any>) => any[]>`GET /orgs/{org}/teams/{team_slug}/members`

export type GetByOrgTeamsAndTeamSlugMembers = Api<typeof getByOrgTeamsAndTeamSlugMembers>

/**
 * Get team membership for a user
Team members will include the members of child teams.

To get a user's membership with a team, the team must be visible to the authenticated user.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.

**Note:**
The response contains the `state` of the membership and the member's `role`.

The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/enterprise-server@3.0/rest/reference/teams#create-a-team).
 */
export const getByOrgTeamsAndTeamSlugMembershipsAndUsername = api<(paths?: [org: string, teamslug: string, username: string], config?: Config<any, any>) => Team_membership>`GET /orgs/{org}/teams/{team_slug}/memberships/{username}`

export type GetByOrgTeamsAndTeamSlugMembershipsAndUsername = Api<typeof getByOrgTeamsAndTeamSlugMembershipsAndUsername>

/**
 * Add or update team membership for a user
Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.

If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const putByOrgTeamsAndTeamSlugMembershipsAndUsername = api<(paths?: [org: string, teamslug: string, username: string], body?: UnnamedModel$38, config?: Config<any, UnnamedModel$38>) => any>`PUT /orgs/{org}/teams/{team_slug}/memberships/{username}`

export type PutByOrgTeamsAndTeamSlugMembershipsAndUsername = Api<typeof putByOrgTeamsAndTeamSlugMembershipsAndUsername>

/**
 * Remove team membership for a user
Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.

**Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub Enterprise Server](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 */
export const deleteByOrgTeamsAndTeamSlugMembershipsAndUsername = api<(paths?: [org: string, teamslug: string, username: string], config?: Config<any, any>) => any>`DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}`

export type DeleteByOrgTeamsAndTeamSlugMembershipsAndUsername = Api<typeof deleteByOrgTeamsAndTeamSlugMembershipsAndUsername>

/**
 * List team projects
Lists the organization projects for a team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
 */
export const getByOrgTeamsAndTeamSlugProjects = api<(paths?: [org: string, teamslug: string], query?: GetByOrgTeamsAndTeamSlugProjectsQuery, config?: Config<GetByOrgTeamsAndTeamSlugProjectsQuery, any>) => Team_project[]>`GET /orgs/{org}/teams/{team_slug}/projects`

export type GetByOrgTeamsAndTeamSlugProjects = Api<typeof getByOrgTeamsAndTeamSlugProjects>

/**
 * Check team permissions for a project
Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const getByOrgTeamsAndTeamSlugProjectsAndProjectId = api<(paths?: [org: string, teamslug: string, projectid: number], config?: Config<any, any>) => any>`GET /orgs/{org}/teams/{team_slug}/projects/{project_id}`

export type GetByOrgTeamsAndTeamSlugProjectsAndProjectId = Api<typeof getByOrgTeamsAndTeamSlugProjectsAndProjectId>

/**
 * Add or update team project permissions
Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const putByOrgTeamsAndTeamSlugProjectsAndProjectId = api<(paths?: [org: string, teamslug: string, projectid: number], body?: any | null, config?: Config<any, any | null>) => any>`PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}`

export type PutByOrgTeamsAndTeamSlugProjectsAndProjectId = Api<typeof putByOrgTeamsAndTeamSlugProjectsAndProjectId>

/**
 * Remove a project from a team
Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 */
export const deleteByOrgTeamsAndTeamSlugProjectsAndProjectId = api<(paths?: [org: string, teamslug: string, projectid: number], config?: Config<any, any>) => any>`DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}`

export type DeleteByOrgTeamsAndTeamSlugProjectsAndProjectId = Api<typeof deleteByOrgTeamsAndTeamSlugProjectsAndProjectId>

/**
 * List team repositories
Lists a team's repositories visible to the authenticated user.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 */
export const getByOrgTeamsAndTeamSlugRepos = api<(paths?: [org: string, teamslug: string], query?: GetByOrgTeamsAndTeamSlugReposQuery, config?: Config<GetByOrgTeamsAndTeamSlugReposQuery, any>) => any[]>`GET /orgs/{org}/teams/{team_slug}/repos`

export type GetByOrgTeamsAndTeamSlugRepos = Api<typeof getByOrgTeamsAndTeamSlugRepos>

/**
 * Check team permissions for a repository
Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.

You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.

If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const getByOrgTeamsAndTeamSlugReposAndOwnerAndRepo = api<(paths?: [org: string, teamslug: string, owner: string, repo: string], config?: Config<any, any>) => Team_repository>`GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`

export type GetByOrgTeamsAndTeamSlugReposAndOwnerAndRepo = Api<typeof getByOrgTeamsAndTeamSlugReposAndOwnerAndRepo>

/**
 * Add or update team repository permissions
To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."

**Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.

For more information about the permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 */
export const putByOrgTeamsAndTeamSlugReposAndOwnerAndRepo = api<(paths?: [org: string, teamslug: string, owner: string, repo: string], body?: UnnamedModel$41, config?: Config<any, UnnamedModel$41>) => any>`PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`

export type PutByOrgTeamsAndTeamSlugReposAndOwnerAndRepo = Api<typeof putByOrgTeamsAndTeamSlugReposAndOwnerAndRepo>

/**
 * Remove a repository from a team
If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 */
export const deleteByOrgTeamsAndTeamSlugReposAndOwnerAndRepo = api<(paths?: [org: string, teamslug: string, owner: string, repo: string], config?: Config<any, any>) => any>`DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}`

export type DeleteByOrgTeamsAndTeamSlugReposAndOwnerAndRepo = Api<typeof deleteByOrgTeamsAndTeamSlugReposAndOwnerAndRepo>

/**
 * List child teams
Lists the child teams of the team specified by `{team_slug}`.

**Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 */
export const getByOrgTeamsAndTeamSlugTeams = api<(paths?: [org: string, teamslug: string], query?: GetByOrgTeamsAndTeamSlugTeamsQuery, config?: Config<GetByOrgTeamsAndTeamSlugTeamsQuery, any>) => any[]>`GET /orgs/{org}/teams/{team_slug}/teams`

export type GetByOrgTeamsAndTeamSlugTeams = Api<typeof getByOrgTeamsAndTeamSlugTeams>
