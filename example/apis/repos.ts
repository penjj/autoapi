/* eslint-disable */

/**
 * This file was auto generated by `ts-autoapi`.
 * Do not make direct changes to the file.
 * If you need to make changes with openapi doc file,
 * please use the ts-autoapi cli.
 */
import { api, type Config, type Api } from 'ts-autoapi'
import {
  UnnamedModel,
  Full_repository,
  UnnamedModel$1,
  GetByOwnerAndRepoActionsArtifactsQuery,
  Artifact,
  UnnamedModel$2,
  UnnamedModel$3,
  Job,
  Actions_repository_permissions,
  UnnamedModel$4,
  GetByOwnerAndRepoActionsRunnersQuery,
  UnnamedModel$5,
  GetByOwnerAndRepoActionsRunsQuery,
  UnnamedModel$6,
  GetByOwnerAndRepoActionsRunsAndRunIdQuery,
  GetByOwnerAndRepoActionsRunsAndRunIdArtifactsQuery,
  UnnamedModel$7,
  GetByOwnerAndRepoActionsRunsAndRunIdJobsQuery,
  UnnamedModel$8,
  GetByOwnerAndRepoActionsSecretsQuery,
  UnnamedModel$9,
  UnnamedModel$10,
  GetByOwnerAndRepoActionsWorkflowsQuery,
  Workflow,
  UnnamedModel$11,
  UnnamedModel$12,
  GetByOwnerAndRepoActionsWorkflowsAndWorkflowIdRunsQuery,
  UnnamedModel$13,
  GetByOwnerAndRepoAssigneesQuery,
  GetByOwnerAndRepoBranchesQuery,
  UnnamedModel$14,
  UnnamedModel$15,
  UnnamedModel$16,
  UnnamedModel$17,
  Short_branch,
  Commit,
  Branch_with_protection,
  UnnamedModel$31,
  Protected_branch,
  UnnamedModel$41,
  UnnamedModel$42,
  UnnamedModel$47,
  Check_run,
  UnnamedModel$57,
  GetByOwnerAndRepoCheckRunsAndCheckRunIdAnnotationsQuery,
  Check_annotation,
  UnnamedModel$58,
  Check_suite,
  UnnamedModel$60,
  Check_suite_preference,
  GetByOwnerAndRepoCheckSuitesAndCheckSuiteIdCheckRunsQuery,
  UnnamedModel$63,
  GetByOwnerAndRepoCodeScanningAlertsQuery,
  Code_scanning_alert_items,
  Code_scanning_alert,
  UnnamedModel$65,
  GetByOwnerAndRepoCodeScanningAnalysesQuery,
  Code_scanning_analysis,
  UnnamedModel$66,
  GetByOwnerAndRepoCollaboratorsQuery,
  Collaborator,
  UnnamedModel$68,
  Repository_collaborator_permission,
  GetByOwnerAndRepoCommentsQuery,
  Commit_comment,
  UnnamedModel$69,
  GetByOwnerAndRepoCommentsAndCommentIdReactionsQuery,
  UnnamedModel$70,
  GetByOwnerAndRepoCommitsQuery,
  Branch_short,
  GetByOwnerAndRepoCommitsAndCommitShaCommentsQuery,
  UnnamedModel$72,
  GetByOwnerAndRepoCommitsAndCommitShaPullsQuery,
  Pull_request_simple,
  GetByOwnerAndRepoCommitsAndRefQuery,
  GetByOwnerAndRepoCommitsAndRefCheckRunsQuery,
  UnnamedModel$77,
  GetByOwnerAndRepoCommitsAndRefCheckSuitesQuery,
  UnnamedModel$78,
  GetByOwnerAndRepoCommitsAndRefStatusQuery,
  Combined_commit_status,
  GetByOwnerAndRepoCommitsAndRefStatusesQuery,
  Status,
  Commit_comparison,
  UnnamedModel$79,
  Content_reference_attachment,
  GetByOwnerAndRepoContentsAndPathQuery,
  UnnamedModel$82,
  File_commit,
  UnnamedModel$91,
  GetByOwnerAndRepoContributorsQuery,
  Contributor,
  GetByOwnerAndRepoDeploymentsQuery,
  Deployment,
  UnnamedModel$92,
  GetByOwnerAndRepoDeploymentsAndDeploymentIdStatusesQuery,
  Deployment_status,
  UnnamedModel$93,
  UnnamedModel$94,
  GetByOwnerAndRepoEventsQuery,
  GetByOwnerAndRepoForksQuery,
  UnnamedModel$95,
  Blob,
  UnnamedModel$98,
  Git_commit,
  GetByOwnerAndRepoGitMatchingRefsAndRefQuery,
  Git_ref,
  UnnamedModel$105,
  UnnamedModel$106,
  UnnamedModel$108,
  Git_tag,
  UnnamedModel$112,
  GetByOwnerAndRepoGitTreesAndTreeShaQuery,
  Git_tree,
  GetByOwnerAndRepoHooksQuery,
  Hook,
  UnnamedModel$116,
  UnnamedModel$117,
  GetByOwnerAndRepoInvitationsQuery,
  Repository_invitation,
  UnnamedModel$118,
  GetByOwnerAndRepoIssuesQuery,
  UnnamedModel$119,
  GetByOwnerAndRepoIssuesCommentsQuery,
  UnnamedModel$120,
  GetByOwnerAndRepoIssuesCommentsAndCommentIdReactionsQuery,
  UnnamedModel$121,
  GetByOwnerAndRepoIssuesEventsQuery,
  Issue_event,
  UnnamedModel$122,
  UnnamedModel$123,
  UnnamedModel$124,
  GetByOwnerAndRepoIssuesAndIssueNumberCommentsQuery,
  UnnamedModel$125,
  GetByOwnerAndRepoIssuesAndIssueNumberEventsQuery,
  GetByOwnerAndRepoIssuesAndIssueNumberLabelsQuery,
  Label,
  GetByOwnerAndRepoIssuesAndIssueNumberReactionsQuery,
  UnnamedModel$126,
  GetByOwnerAndRepoIssuesAndIssueNumberTimelineQuery,
  GetByOwnerAndRepoKeysQuery,
  Deploy_key,
  UnnamedModel$127,
  GetByOwnerAndRepoLabelsQuery,
  UnnamedModel$128,
  UnnamedModel$129,
  License_content,
  UnnamedModel$131,
  GetByOwnerAndRepoMilestonesQuery,
  Milestone,
  UnnamedModel$132,
  UnnamedModel$133,
  GetByOwnerAndRepoMilestonesAndMilestoneNumberLabelsQuery,
  GetByOwnerAndRepoNotificationsQuery,
  UnnamedModel$134,
  Page,
  UnnamedModel$135,
  GetByOwnerAndRepoPagesBuildsQuery,
  Page_build,
  GetByOwnerAndRepoPreReceiveHooksQuery,
  Repository_pre_receive_hook,
  UnnamedModel$137,
  GetByOwnerAndRepoProjectsQuery,
  UnnamedModel$138,
  GetByOwnerAndRepoPullsQuery,
  UnnamedModel$139,
  GetByOwnerAndRepoPullsCommentsQuery,
  Pull_request_review_comment,
  UnnamedModel$144,
  GetByOwnerAndRepoPullsCommentsAndCommentIdReactionsQuery,
  UnnamedModel$145,
  Pull_request,
  UnnamedModel$155,
  GetByOwnerAndRepoPullsAndPullNumberCommentsQuery,
  UnnamedModel$156,
  UnnamedModel$157,
  GetByOwnerAndRepoPullsAndPullNumberCommitsQuery,
  GetByOwnerAndRepoPullsAndPullNumberFilesQuery,
  Pull_request_merge_result,
  GetByOwnerAndRepoPullsAndPullNumberRequestedReviewersQuery,
  Pull_request_review_request,
  UnnamedModel$158,
  UnnamedModel$159,
  GetByOwnerAndRepoPullsAndPullNumberReviewsQuery,
  Pull_request_review,
  UnnamedModel$164,
  UnnamedModel$165,
  GetByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdCommentsQuery,
  Review_comment,
  UnnamedModel$167,
  UnnamedModel$168,
  GetByOwnerAndRepoReadmeQuery,
  Content_file,
  GetByOwnerAndRepoReadmeAndDirQuery,
  GetByOwnerAndRepoReleasesQuery,
  Release,
  UnnamedModel$170,
  UnnamedModel$171,
  UnnamedModel$172,
  GetByOwnerAndRepoReleasesAndReleaseIdAssetsQuery,
  PostByOwnerAndRepoReleasesAndReleaseIdAssetsQuery,
  GetByOwnerAndRepoStargazersQuery,
  Commit_activity,
  Contributor_activity,
  Participation_stats,
  UnnamedModel$174,
  GetByOwnerAndRepoSubscribersQuery,
  Repository_subscription,
  UnnamedModel$175,
  GetByOwnerAndRepoTagsQuery,
  Tag,
  GetByOwnerAndRepoTeamsQuery,
  GetByOwnerAndRepoTopicsQuery,
  Topic,
  UnnamedModel$177,
  UnnamedModel$178,
  UnnamedModel$179
} from './models/repos.d'

/**
 * Get a repository
When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.

The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
 */
export const getByOwnerAndRepo = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => Full_repository>`GET /repos/{owner}/{repo}`

export type GetByOwnerAndRepo = Api<typeof getByOwnerAndRepo>

/**
 * Update a repository
**Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#replace-all-repository-topics) endpoint.
 */
export const patchByOwnerAndRepo = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$1, config?: Config<any, UnnamedModel$1>) => any>`PATCH /repos/{owner}/{repo}`

export type PatchByOwnerAndRepo = Api<typeof patchByOwnerAndRepo>

/**
 * Delete a repository
Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.

If an organization owner has configured the organization to prevent members from deleting organization-owned
repositories, you will get a `403 Forbidden` response.
 */
export const deleteByOwnerAndRepo = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}`

export type DeleteByOwnerAndRepo = Api<typeof deleteByOwnerAndRepo>

/**
 * List artifacts for a repository
Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsArtifacts = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoActionsArtifactsQuery, config?: Config<GetByOwnerAndRepoActionsArtifactsQuery, any>) => UnnamedModel$2>`GET /repos/{owner}/{repo}/actions/artifacts`

export type GetByOwnerAndRepoActionsArtifacts = Api<typeof getByOwnerAndRepoActionsArtifacts>

/**
 * Get an artifact
Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsArtifactsAndArtifactId = api<(paths?: [owner: string, repo: string, artifactid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}`

export type GetByOwnerAndRepoActionsArtifactsAndArtifactId = Api<typeof getByOwnerAndRepoActionsArtifactsAndArtifactId>

/**
 * Delete an artifact
Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const deleteByOwnerAndRepoActionsArtifactsAndArtifactId = api<(paths?: [owner: string, repo: string, artifactid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}`

export type DeleteByOwnerAndRepoActionsArtifactsAndArtifactId = Api<typeof deleteByOwnerAndRepoActionsArtifactsAndArtifactId>

/**
 * Download an artifact
Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsArtifactsAndArtifactIdAndArchiveFormat = api<(paths?: [owner: string, repo: string, artifactid: number, archiveformat: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}`

export type GetByOwnerAndRepoActionsArtifactsAndArtifactIdAndArchiveFormat = Api<typeof getByOwnerAndRepoActionsArtifactsAndArtifactIdAndArchiveFormat>

/**
 * Get a job for a workflow run
Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsJobsAndJobId = api<(paths?: [owner: string, repo: string, jobid: number], config?: Config<any, any>) => Job>`GET /repos/{owner}/{repo}/actions/jobs/{job_id}`

export type GetByOwnerAndRepoActionsJobsAndJobId = Api<typeof getByOwnerAndRepoActionsJobsAndJobId>

/**
 * Download job logs for a workflow run
Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsJobsAndJobIdLogs = api<(paths?: [owner: string, repo: string, jobid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs`

export type GetByOwnerAndRepoActionsJobsAndJobIdLogs = Api<typeof getByOwnerAndRepoActionsJobsAndJobIdLogs>

/**
 * Get GitHub Actions permissions for a repository
Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.

You must authenticate using an access token with the `repo` scope to use this
endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const getByOwnerAndRepoActionsPermissions = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => Actions_repository_permissions>`GET /repos/{owner}/{repo}/actions/permissions`

export type GetByOwnerAndRepoActionsPermissions = Api<typeof getByOwnerAndRepoActionsPermissions>

/**
 * Set GitHub Actions permissions for a repository
Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.

If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const putByOwnerAndRepoActionsPermissions = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$4, config?: Config<any, UnnamedModel$4>) => any>`PUT /repos/{owner}/{repo}/actions/permissions`

export type PutByOwnerAndRepoActionsPermissions = Api<typeof putByOwnerAndRepoActionsPermissions>

/**
 * Get allowed actions for a repository
Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const getByOwnerAndRepoActionsPermissionsSelectedActions = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/actions/permissions/selected-actions`

export type GetByOwnerAndRepoActionsPermissionsSelectedActions = Api<typeof getByOwnerAndRepoActionsPermissionsSelectedActions>

/**
 * Set allowed actions for a repository
Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."

If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.

To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
 */
export const putByOwnerAndRepoActionsPermissionsSelectedActions = api<(paths?: [owner: string, repo: string], body?: any, config?: Config<any, any>) => any>`PUT /repos/{owner}/{repo}/actions/permissions/selected-actions`

export type PutByOwnerAndRepoActionsPermissionsSelectedActions = Api<typeof putByOwnerAndRepoActionsPermissionsSelectedActions>

/**
 * List self-hosted runners for a repository
Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const getByOwnerAndRepoActionsRunners = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoActionsRunnersQuery, config?: Config<GetByOwnerAndRepoActionsRunnersQuery, any>) => UnnamedModel$5>`GET /repos/{owner}/{repo}/actions/runners`

export type GetByOwnerAndRepoActionsRunners = Api<typeof getByOwnerAndRepoActionsRunners>

/**
 * List runner applications for a repository
Lists binaries for the runner application that you can download and run.

You must authenticate using an access token with the `repo` scope to use this endpoint.
 */
export const getByOwnerAndRepoActionsRunnersDownloads = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any[]>`GET /repos/{owner}/{repo}/actions/runners/downloads`

export type GetByOwnerAndRepoActionsRunnersDownloads = Api<typeof getByOwnerAndRepoActionsRunnersDownloads>

/**
 * Create a registration token for a repository
Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
using an access token with the `repo` scope to use this endpoint.

#### Example using registration token

Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.

```
./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
```
 */
export const postByOwnerAndRepoActionsRunnersRegistrationToken = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/actions/runners/registration-token`

export type PostByOwnerAndRepoActionsRunnersRegistrationToken = Api<typeof postByOwnerAndRepoActionsRunnersRegistrationToken>

/**
 * Create a remove token for a repository
Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
You must authenticate using an access token with the `repo` scope to use this endpoint.

#### Example using remove token

To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.

```
./config.sh remove --token TOKEN
```
 */
export const postByOwnerAndRepoActionsRunnersRemoveToken = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/actions/runners/remove-token`

export type PostByOwnerAndRepoActionsRunnersRemoveToken = Api<typeof postByOwnerAndRepoActionsRunnersRemoveToken>

/**
 * Get a self-hosted runner for a repository
Gets a specific self-hosted runner configured in a repository.

You must authenticate using an access token with the `repo` scope to use this
endpoint.
 */
export const getByOwnerAndRepoActionsRunnersAndRunnerId = api<(paths?: [owner: string, repo: string, runnerid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/actions/runners/{runner_id}`

export type GetByOwnerAndRepoActionsRunnersAndRunnerId = Api<typeof getByOwnerAndRepoActionsRunnersAndRunnerId>

/**
 * Delete a self-hosted runner from a repository
Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.

You must authenticate using an access token with the `repo`
scope to use this endpoint.
 */
export const deleteByOwnerAndRepoActionsRunnersAndRunnerId = api<(paths?: [owner: string, repo: string, runnerid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}`

export type DeleteByOwnerAndRepoActionsRunnersAndRunnerId = Api<typeof deleteByOwnerAndRepoActionsRunnersAndRunnerId>

/**
 * List workflow runs for a repository
Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).

Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsRuns = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoActionsRunsQuery, config?: Config<GetByOwnerAndRepoActionsRunsQuery, any>) => UnnamedModel$6>`GET /repos/{owner}/{repo}/actions/runs`

export type GetByOwnerAndRepoActionsRuns = Api<typeof getByOwnerAndRepoActionsRuns>

/**
 * Get a workflow run
Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsRunsAndRunId = api<(paths?: [owner: string, repo: string, runid: number], query?: GetByOwnerAndRepoActionsRunsAndRunIdQuery, config?: Config<GetByOwnerAndRepoActionsRunsAndRunIdQuery, any>) => any>`GET /repos/{owner}/{repo}/actions/runs/{run_id}`

export type GetByOwnerAndRepoActionsRunsAndRunId = Api<typeof getByOwnerAndRepoActionsRunsAndRunId>

/**
 * Delete a workflow run
Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
this endpoint.
 */
export const deleteByOwnerAndRepoActionsRunsAndRunId = api<(paths?: [owner: string, repo: string, runid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/actions/runs/{run_id}`

export type DeleteByOwnerAndRepoActionsRunsAndRunId = Api<typeof deleteByOwnerAndRepoActionsRunsAndRunId>

/**
 * List workflow run artifacts
Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsRunsAndRunIdArtifacts = api<(paths?: [owner: string, repo: string, runid: number], query?: GetByOwnerAndRepoActionsRunsAndRunIdArtifactsQuery, config?: Config<GetByOwnerAndRepoActionsRunsAndRunIdArtifactsQuery, any>) => UnnamedModel$7>`GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts`

export type GetByOwnerAndRepoActionsRunsAndRunIdArtifacts = Api<typeof getByOwnerAndRepoActionsRunsAndRunIdArtifacts>

/**
 * Cancel a workflow run
Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const postByOwnerAndRepoActionsRunsAndRunIdCancel = api<(paths?: [owner: string, repo: string, runid: number], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`

export type PostByOwnerAndRepoActionsRunsAndRunIdCancel = Api<typeof postByOwnerAndRepoActionsRunsAndRunIdCancel>

/**
 * List jobs for a workflow run
Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).
 */
export const getByOwnerAndRepoActionsRunsAndRunIdJobs = api<(paths?: [owner: string, repo: string, runid: number], query?: GetByOwnerAndRepoActionsRunsAndRunIdJobsQuery, config?: Config<GetByOwnerAndRepoActionsRunsAndRunIdJobsQuery, any>) => UnnamedModel$8>`GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs`

export type GetByOwnerAndRepoActionsRunsAndRunIdJobs = Api<typeof getByOwnerAndRepoActionsRunsAndRunIdJobs>

/**
 * Download workflow run logs
Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
`Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsRunsAndRunIdLogs = api<(paths?: [owner: string, repo: string, runid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs`

export type GetByOwnerAndRepoActionsRunsAndRunIdLogs = Api<typeof getByOwnerAndRepoActionsRunsAndRunIdLogs>

/**
 * Delete workflow run logs
Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const deleteByOwnerAndRepoActionsRunsAndRunIdLogs = api<(paths?: [owner: string, repo: string, runid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs`

export type DeleteByOwnerAndRepoActionsRunsAndRunIdLogs = Api<typeof deleteByOwnerAndRepoActionsRunsAndRunIdLogs>

/**
 * Re-run a workflow
Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const postByOwnerAndRepoActionsRunsAndRunIdRerun = api<(paths?: [owner: string, repo: string, runid: number], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun`

export type PostByOwnerAndRepoActionsRunsAndRunIdRerun = Api<typeof postByOwnerAndRepoActionsRunsAndRunIdRerun>

/**
 * List repository secrets
Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsSecrets = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoActionsSecretsQuery, config?: Config<GetByOwnerAndRepoActionsSecretsQuery, any>) => UnnamedModel$9>`GET /repos/{owner}/{repo}/actions/secrets`

export type GetByOwnerAndRepoActionsSecrets = Api<typeof getByOwnerAndRepoActionsSecrets>

/**
 * Get a repository public key
Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsSecretsPublicKey = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/actions/secrets/public-key`

export type GetByOwnerAndRepoActionsSecretsPublicKey = Api<typeof getByOwnerAndRepoActionsSecretsPublicKey>

/**
 * Get a repository secret
Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsSecretsAndSecretName = api<(paths?: [owner: string, repo: string, secretname: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/actions/secrets/{secret_name}`

export type GetByOwnerAndRepoActionsSecretsAndSecretName = Api<typeof getByOwnerAndRepoActionsSecretsAndSecretName>

/**
 * Create or update a repository secret
Creates or updates a repository secret with an encrypted value. Encrypt your secret using
[LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
this endpoint.

#### Example encrypting a secret using Node.js

Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.

```
const sodium = require('tweetsodium');

const key = "base64-encoded-public-key";
const value = "plain-text-secret";

// Convert the message and key to Uint8Array's (Buffer implements that interface)
const messageBytes = Buffer.from(value);
const keyBytes = Buffer.from(key, 'base64');

// Encrypt using LibSodium.
const encryptedBytes = sodium.seal(messageBytes, keyBytes);

// Base64 the encrypted secret
const encrypted = Buffer.from(encryptedBytes).toString('base64');

console.log(encrypted);
```


#### Example encrypting a secret using Python

Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox) with Python 3.

```
from base64 import b64encode
from nacl import encoding, public

def encrypt(public_key: str, secret_value: str) -> str:
  """Encrypt a Unicode string using the public key."""
  public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
  sealed_box = public.SealedBox(public_key)
  encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
  return b64encode(encrypted).decode("utf-8")
```

#### Example encrypting a secret using C#

Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.

```
var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");

var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);

Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
```

#### Example encrypting a secret using Ruby

Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.

```ruby
require "rbnacl"
require "base64"

key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
public_key = RbNaCl::PublicKey.new(key)

box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
encrypted_secret = box.encrypt("my_secret")

# Print the base64 encoded secret
puts Base64.strict_encode64(encrypted_secret)
```
 */
export const putByOwnerAndRepoActionsSecretsAndSecretName = api<(paths?: [owner: string, repo: string, secretname: string], body?: UnnamedModel$10, config?: Config<any, UnnamedModel$10>) => any>`PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}`

export type PutByOwnerAndRepoActionsSecretsAndSecretName = Api<typeof putByOwnerAndRepoActionsSecretsAndSecretName>

/**
 * Delete a repository secret
Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
 */
export const deleteByOwnerAndRepoActionsSecretsAndSecretName = api<(paths?: [owner: string, repo: string, secretname: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}`

export type DeleteByOwnerAndRepoActionsSecretsAndSecretName = Api<typeof deleteByOwnerAndRepoActionsSecretsAndSecretName>

/**
 * List repository workflows
Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsWorkflows = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoActionsWorkflowsQuery, config?: Config<GetByOwnerAndRepoActionsWorkflowsQuery, any>) => UnnamedModel$11>`GET /repos/{owner}/{repo}/actions/workflows`

export type GetByOwnerAndRepoActionsWorkflows = Api<typeof getByOwnerAndRepoActionsWorkflows>

/**
 * Get a workflow
Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
 */
export const getByOwnerAndRepoActionsWorkflowsAndWorkflowId = api<(paths?: [owner: string, repo: string, workflowid: any], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}`

export type GetByOwnerAndRepoActionsWorkflowsAndWorkflowId = Api<typeof getByOwnerAndRepoActionsWorkflowsAndWorkflowId>

/**
 * Disable a workflow
Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const putByOwnerAndRepoActionsWorkflowsAndWorkflowIdDisable = api<(paths?: [owner: string, repo: string, workflowid: any], config?: Config<any, any>) => any>`PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable`

export type PutByOwnerAndRepoActionsWorkflowsAndWorkflowIdDisable = Api<typeof putByOwnerAndRepoActionsWorkflowsAndWorkflowIdDisable>

/**
 * Create a workflow dispatch event
You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.

You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
 */
export const postByOwnerAndRepoActionsWorkflowsAndWorkflowIdDispatches = api<(paths?: [owner: string, repo: string, workflowid: any], body?: UnnamedModel$12, config?: Config<any, UnnamedModel$12>) => any>`POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches`

export type PostByOwnerAndRepoActionsWorkflowsAndWorkflowIdDispatches = Api<typeof postByOwnerAndRepoActionsWorkflowsAndWorkflowIdDispatches>

/**
 * Enable a workflow
Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.

You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
 */
export const putByOwnerAndRepoActionsWorkflowsAndWorkflowIdEnable = api<(paths?: [owner: string, repo: string, workflowid: any], config?: Config<any, any>) => any>`PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable`

export type PutByOwnerAndRepoActionsWorkflowsAndWorkflowIdEnable = Api<typeof putByOwnerAndRepoActionsWorkflowsAndWorkflowIdEnable>

/**
 * List workflow runs
List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#parameters).

Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
 */
export const getByOwnerAndRepoActionsWorkflowsAndWorkflowIdRuns = api<(paths?: [owner: string, repo: string, workflowid: any], query?: GetByOwnerAndRepoActionsWorkflowsAndWorkflowIdRunsQuery, config?: Config<GetByOwnerAndRepoActionsWorkflowsAndWorkflowIdRunsQuery, any>) => UnnamedModel$13>`GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs`

export type GetByOwnerAndRepoActionsWorkflowsAndWorkflowIdRuns = Api<typeof getByOwnerAndRepoActionsWorkflowsAndWorkflowIdRuns>

/**
 * List assignees
Lists the [available assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
 */
export const getByOwnerAndRepoAssignees = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoAssigneesQuery, config?: Config<GetByOwnerAndRepoAssigneesQuery, any>) => any[]>`GET /repos/{owner}/{repo}/assignees`

export type GetByOwnerAndRepoAssignees = Api<typeof getByOwnerAndRepoAssignees>

/**
 * Check if a user can be assigned
Checks if a user has permission to be assigned to an issue in this repository.

If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.

Otherwise a `404` status code is returned.
 */
export const getByOwnerAndRepoAssigneesAndAssignee = api<(paths?: [owner: string, repo: string, assignee: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/assignees/{assignee}`

export type GetByOwnerAndRepoAssigneesAndAssignee = Api<typeof getByOwnerAndRepoAssigneesAndAssignee>

/**
 * List branches
 */
export const getByOwnerAndRepoBranches = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoBranchesQuery, config?: Config<GetByOwnerAndRepoBranchesQuery, any>) => Short_branch[]>`GET /repos/{owner}/{repo}/branches`

export type GetByOwnerAndRepoBranches = Api<typeof getByOwnerAndRepoBranches>

/**
 * Get a branch
 */
export const getByOwnerAndRepoBranchesAndBranch = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => Branch_with_protection>`GET /repos/{owner}/{repo}/branches/{branch}`

export type GetByOwnerAndRepoBranchesAndBranch = Api<typeof getByOwnerAndRepoBranchesAndBranch>

/**
 * Get branch protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getByOwnerAndRepoBranchesAndBranchProtection = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/branches/{branch}/protection`

export type GetByOwnerAndRepoBranchesAndBranchProtection = Api<typeof getByOwnerAndRepoBranchesAndBranchProtection>

/**
 * Update branch protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Protecting a branch requires admin or owner permissions to the repository.

**Note**: Passing new arrays of `users` and `teams` replaces their previous values.

**Note**: The list of users, apps, and teams in total is limited to 100 items.
 */
export const putByOwnerAndRepoBranchesAndBranchProtection = api<(paths?: [owner: string, repo: string, branch: string], body?: UnnamedModel$31, config?: Config<any, UnnamedModel$31>) => Protected_branch>`PUT /repos/{owner}/{repo}/branches/{branch}/protection`

export type PutByOwnerAndRepoBranchesAndBranchProtection = Api<typeof putByOwnerAndRepoBranchesAndBranchProtection>

/**
 * Delete branch protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtection = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection`

export type DeleteByOwnerAndRepoBranchesAndBranchProtection = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtection>

/**
 * Get admin branch protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getByOwnerAndRepoBranchesAndBranchProtectionEnforceAdmins = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`

export type GetByOwnerAndRepoBranchesAndBranchProtectionEnforceAdmins = Api<typeof getByOwnerAndRepoBranchesAndBranchProtectionEnforceAdmins>

/**
 * Set admin branch protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const postByOwnerAndRepoBranchesAndBranchProtectionEnforceAdmins = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`

export type PostByOwnerAndRepoBranchesAndBranchProtectionEnforceAdmins = Api<typeof postByOwnerAndRepoBranchesAndBranchProtectionEnforceAdmins>

/**
 * Delete admin branch protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtectionEnforceAdmins = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins`

export type DeleteByOwnerAndRepoBranchesAndBranchProtectionEnforceAdmins = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtectionEnforceAdmins>

/**
 * Get pull request review protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getByOwnerAndRepoBranchesAndBranchProtectionRequiredPullRequestReviews = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`

export type GetByOwnerAndRepoBranchesAndBranchProtectionRequiredPullRequestReviews = Api<typeof getByOwnerAndRepoBranchesAndBranchProtectionRequiredPullRequestReviews>

/**
 * Update pull request review protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.

**Note**: Passing new arrays of `users` and `teams` replaces their previous values.
 */
export const patchByOwnerAndRepoBranchesAndBranchProtectionRequiredPullRequestReviews = api<(paths?: [owner: string, repo: string, branch: string], body?: UnnamedModel$41, config?: Config<any, UnnamedModel$41>) => any>`PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`

export type PatchByOwnerAndRepoBranchesAndBranchProtectionRequiredPullRequestReviews = Api<typeof patchByOwnerAndRepoBranchesAndBranchProtectionRequiredPullRequestReviews>

/**
 * Delete pull request review protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtectionRequiredPullRequestReviews = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews`

export type DeleteByOwnerAndRepoBranchesAndBranchProtectionRequiredPullRequestReviews = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtectionRequiredPullRequestReviews>

/**
 * Get commit signature protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.

**Note**: You must enable branch protection to require signed commits.
 */
export const getByOwnerAndRepoBranchesAndBranchProtectionRequiredSignatures = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`

export type GetByOwnerAndRepoBranchesAndBranchProtectionRequiredSignatures = Api<typeof getByOwnerAndRepoBranchesAndBranchProtectionRequiredSignatures>

/**
 * Create commit signature protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const postByOwnerAndRepoBranchesAndBranchProtectionRequiredSignatures = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`

export type PostByOwnerAndRepoBranchesAndBranchProtectionRequiredSignatures = Api<typeof postByOwnerAndRepoBranchesAndBranchProtectionRequiredSignatures>

/**
 * Delete commit signature protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtectionRequiredSignatures = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures`

export type DeleteByOwnerAndRepoBranchesAndBranchProtectionRequiredSignatures = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtectionRequiredSignatures>

/**
 * Get status checks protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecks = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`

export type GetByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecks = Api<typeof getByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecks>

/**
 * Update status check protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
 */
export const patchByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecks = api<(paths?: [owner: string, repo: string, branch: string], body?: UnnamedModel$42, config?: Config<any, UnnamedModel$42>) => any>`PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`

export type PatchByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecks = Api<typeof patchByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecks>

/**
 * Remove status check protection
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecks = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks`

export type DeleteByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecks = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecks>

/**
 * Get all status check contexts
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => string[]>`GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`

export type GetByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts = Api<typeof getByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts>

/**
 * Add status check contexts
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const postByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => string[]>`POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`

export type PostByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts = Api<typeof postByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts>

/**
 * Set status check contexts
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const putByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => string[]>`PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`

export type PutByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts = Api<typeof putByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts>

/**
 * Remove status check contexts
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => string[]>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts`

export type DeleteByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtectionRequiredStatusChecksContexts>

/**
 * Get access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists who has access to this protected branch.

**Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
 */
export const getByOwnerAndRepoBranchesAndBranchProtectionRestrictions = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions`

export type GetByOwnerAndRepoBranchesAndBranchProtectionRestrictions = Api<typeof getByOwnerAndRepoBranchesAndBranchProtectionRestrictions>

/**
 * Delete access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Disables the ability to restrict who can push to this branch.
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtectionRestrictions = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions`

export type DeleteByOwnerAndRepoBranchesAndBranchProtectionRestrictions = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtectionRestrictions>

/**
 * Get apps with access to the protected branch
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
 */
export const getByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any[]>`GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`

export type GetByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps = Api<typeof getByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps>

/**
 * Add app access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

| Type    | Description                                                                                                                                                |
| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const postByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => any[]>`POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`

export type PostByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps = Api<typeof postByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps>

/**
 * Set app access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

| Type    | Description                                                                                                                                                |
| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const putByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => any[]>`PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`

export type PutByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps = Api<typeof putByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps>

/**
 * Remove app access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.

| Type    | Description                                                                                                                                                |
| ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => any[]>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps`

export type DeleteByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtectionRestrictionsApps>

/**
 * Get teams with access to the protected branch
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the teams who have push access to this branch. The list includes child teams.
 */
export const getByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any[]>`GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`

export type GetByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams = Api<typeof getByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams>

/**
 * Add team access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified teams push access for this branch. You can also give push access to child teams.

| Type    | Description                                                                                                                                |
| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const postByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => any[]>`POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`

export type PostByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams = Api<typeof postByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams>

/**
 * Set team access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.

| Type    | Description                                                                                                                                |
| ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
| `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const putByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => any[]>`PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`

export type PutByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams = Api<typeof putByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams>

/**
 * Remove team access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of a team to push to this branch. You can also remove push access for child teams.

| Type    | Description                                                                                                                                         |
| ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => any[]>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams`

export type DeleteByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtectionRestrictionsTeams>

/**
 * Get users with access to the protected branch
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists the people who have push access to this branch.
 */
export const getByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers = api<(paths?: [owner: string, repo: string, branch: string], config?: Config<any, any>) => any[]>`GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`

export type GetByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers = Api<typeof getByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers>

/**
 * Add user access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Grants the specified people push access for this branch.

| Type    | Description                                                                                                                   |
| ------- | ----------------------------------------------------------------------------------------------------------------------------- |
| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const postByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => any[]>`POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`

export type PostByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers = Api<typeof postByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers>

/**
 * Set user access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.

| Type    | Description                                                                                                                   |
| ------- | ----------------------------------------------------------------------------------------------------------------------------- |
| `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const putByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => any[]>`PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`

export type PutByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers = Api<typeof putByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers>

/**
 * Remove user access restrictions
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Removes the ability of a user to push to this branch.

| Type    | Description                                                                                                                                   |
| ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
| `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
 */
export const deleteByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers = api<(paths?: [owner: string, repo: string, branch: string], body?: any, config?: Config<any, any>) => any[]>`DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users`

export type DeleteByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers = Api<typeof deleteByOwnerAndRepoBranchesAndBranchProtectionRestrictionsUsers>

/**
 * Create a check run
**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.

In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
 */
export const postByOwnerAndRepoCheckRuns = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$47, config?: Config<any, UnnamedModel$47>) => any>`POST /repos/{owner}/{repo}/check-runs`

export type PostByOwnerAndRepoCheckRuns = Api<typeof postByOwnerAndRepoCheckRuns>

/**
 * Get a check run
**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const getByOwnerAndRepoCheckRunsAndCheckRunId = api<(paths?: [owner: string, repo: string, checkrunid: number], config?: Config<any, any>) => Check_run>`GET /repos/{owner}/{repo}/check-runs/{check_run_id}`

export type GetByOwnerAndRepoCheckRunsAndCheckRunId = Api<typeof getByOwnerAndRepoCheckRunsAndCheckRunId>

/**
 * Update a check run
**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
 */
export const patchByOwnerAndRepoCheckRunsAndCheckRunId = api<(paths?: [owner: string, repo: string, checkrunid: number], body?: UnnamedModel$57, config?: Config<any, UnnamedModel$57>) => any>`PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}`

export type PatchByOwnerAndRepoCheckRunsAndCheckRunId = Api<typeof patchByOwnerAndRepoCheckRunsAndCheckRunId>

/**
 * List check run annotations
Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
 */
export const getByOwnerAndRepoCheckRunsAndCheckRunIdAnnotations = api<(paths?: [owner: string, repo: string, checkrunid: number], query?: GetByOwnerAndRepoCheckRunsAndCheckRunIdAnnotationsQuery, config?: Config<GetByOwnerAndRepoCheckRunsAndCheckRunIdAnnotationsQuery, any>) => Check_annotation[]>`GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations`

export type GetByOwnerAndRepoCheckRunsAndCheckRunIdAnnotations = Api<typeof getByOwnerAndRepoCheckRunsAndCheckRunIdAnnotations>

/**
 * Create a check suite
**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.

By default, check suites are automatically created when you create a [check run](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
 */
export const postByOwnerAndRepoCheckSuites = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$58, config?: Config<any, UnnamedModel$58>) => Check_suite>`POST /repos/{owner}/{repo}/check-suites`

export type PostByOwnerAndRepoCheckSuites = Api<typeof postByOwnerAndRepoCheckSuites>

/**
 * Update repository preferences for check suites
Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/enterprise-server@3.0/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
 */
export const patchByOwnerAndRepoCheckSuitesPreferences = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$60, config?: Config<any, UnnamedModel$60>) => Check_suite_preference>`PATCH /repos/{owner}/{repo}/check-suites/preferences`

export type PatchByOwnerAndRepoCheckSuitesPreferences = Api<typeof patchByOwnerAndRepoCheckSuitesPreferences>

/**
 * Get a check suite
**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.

Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const getByOwnerAndRepoCheckSuitesAndCheckSuiteId = api<(paths?: [owner: string, repo: string, checksuiteid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/check-suites/{check_suite_id}`

export type GetByOwnerAndRepoCheckSuitesAndCheckSuiteId = Api<typeof getByOwnerAndRepoCheckSuitesAndCheckSuiteId>

/**
 * List check runs in a check suite
**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const getByOwnerAndRepoCheckSuitesAndCheckSuiteIdCheckRuns = api<(paths?: [owner: string, repo: string, checksuiteid: number], query?: GetByOwnerAndRepoCheckSuitesAndCheckSuiteIdCheckRunsQuery, config?: Config<GetByOwnerAndRepoCheckSuitesAndCheckSuiteIdCheckRunsQuery, any>) => UnnamedModel$63>`GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs`

export type GetByOwnerAndRepoCheckSuitesAndCheckSuiteIdCheckRuns = Api<typeof getByOwnerAndRepoCheckSuitesAndCheckSuiteIdCheckRuns>

/**
 * Rerequest a check suite
Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.

To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
 */
export const postByOwnerAndRepoCheckSuitesAndCheckSuiteIdRerequest = api<(paths?: [owner: string, repo: string, checksuiteid: number], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest`

export type PostByOwnerAndRepoCheckSuitesAndCheckSuiteIdRerequest = Api<typeof postByOwnerAndRepoCheckSuitesAndCheckSuiteIdRerequest>

/**
 * List code scanning alerts for a repository
Lists all open code scanning alerts for the default branch (usually `main`
or `master`). You must use an access token with the `security_events` scope to use
this endpoint. GitHub Apps must have the `security_events` read permission to use
this endpoint.

The response includes a `most_recent_instance` object.
This provides details of the most recent instance of this alert
for the default branch or for the specified Git reference
(if you used `ref` in the request).
 */
export const getByOwnerAndRepoCodeScanningAlerts = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoCodeScanningAlertsQuery, config?: Config<GetByOwnerAndRepoCodeScanningAlertsQuery, any>) => Code_scanning_alert_items[]>`GET /repos/{owner}/{repo}/code-scanning/alerts`

export type GetByOwnerAndRepoCodeScanningAlerts = Api<typeof getByOwnerAndRepoCodeScanningAlerts>

/**
 * Get a code scanning alert
Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.

**Deprecation notice**:
The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
 */
export const getByOwnerAndRepoCodeScanningAlertsAndAlertNumber = api<(paths?: [owner: string, repo: string, alertnumber: any], config?: Config<any, any>) => Code_scanning_alert>`GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}`

export type GetByOwnerAndRepoCodeScanningAlertsAndAlertNumber = Api<typeof getByOwnerAndRepoCodeScanningAlertsAndAlertNumber>

/**
 * Update a code scanning alert
Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
 */
export const patchByOwnerAndRepoCodeScanningAlertsAndAlertNumber = api<(paths?: [owner: string, repo: string, alertnumber: any], body?: UnnamedModel$65, config?: Config<any, UnnamedModel$65>) => any>`PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}`

export type PatchByOwnerAndRepoCodeScanningAlertsAndAlertNumber = Api<typeof patchByOwnerAndRepoCodeScanningAlertsAndAlertNumber>

/**
 * List code scanning analyses for a repository
Lists the details of all code scanning analyses for a repository,
starting with the most recent.
The response is paginated and you can use the `page` and `per_page` parameters
to list the analyses you're interested in.
By default 30 analyses are listed per page.

The `rules_count` field in the response give the number of rules
that were run in the analysis.
For very old analyses this data is not available,
and `0` is returned in this field.

You must use an access token with the `security_events` scope to use this endpoint.
GitHub Apps must have the `security_events` read permission to use this endpoint.

**Deprecation notice**:
The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
 */
export const getByOwnerAndRepoCodeScanningAnalyses = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoCodeScanningAnalysesQuery, config?: Config<GetByOwnerAndRepoCodeScanningAnalysesQuery, any>) => Code_scanning_analysis[]>`GET /repos/{owner}/{repo}/code-scanning/analyses`

export type GetByOwnerAndRepoCodeScanningAnalyses = Api<typeof getByOwnerAndRepoCodeScanningAnalyses>

/**
 * Upload an analysis as SARIF data
Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.

There are two places where you can upload code scanning results.
 - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
 - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."

You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:

```
gzip -c analysis-data.sarif | base64 -w0
```

SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.

The `202 Accepted`, response includes an `id` value.
You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
 */
export const postByOwnerAndRepoCodeScanningSarifs = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$66, config?: Config<any, UnnamedModel$66>) => any>`POST /repos/{owner}/{repo}/code-scanning/sarifs`

export type PostByOwnerAndRepoCodeScanningSarifs = Api<typeof postByOwnerAndRepoCodeScanningSarifs>

/**
 * List repository collaborators
For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.

Team members will include the members of child teams.

You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
endpoint.
 */
export const getByOwnerAndRepoCollaborators = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoCollaboratorsQuery, config?: Config<GetByOwnerAndRepoCollaboratorsQuery, any>) => Collaborator[]>`GET /repos/{owner}/{repo}/collaborators`

export type GetByOwnerAndRepoCollaborators = Api<typeof getByOwnerAndRepoCollaborators>

/**
 * Check if a user is a repository collaborator
For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.

Team members will include the members of child teams.

You must authenticate using an access token with the `read:org` and `repo` scopes with push access to use this
endpoint. GitHub Apps must have the `members` organization permission and `metadata` repository permission to use this
endpoint.
 */
export const getByOwnerAndRepoCollaboratorsAndUsername = api<(paths?: [owner: string, repo: string, username: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/collaborators/{username}`

export type GetByOwnerAndRepoCollaboratorsAndUsername = Api<typeof getByOwnerAndRepoCollaboratorsAndUsername>

/**
 * Add a repository collaborator
This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

For more information on permission levels, see "[Repository permission levels for an organization](https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:

```
Cannot assign {member} permission of {role name}
```

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."

The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#invitations).

**Rate limits**

You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
 */
export const putByOwnerAndRepoCollaboratorsAndUsername = api<(paths?: [owner: string, repo: string, username: string], body?: UnnamedModel$68, config?: Config<any, UnnamedModel$68>) => any>`PUT /repos/{owner}/{repo}/collaborators/{username}`

export type PutByOwnerAndRepoCollaboratorsAndUsername = Api<typeof putByOwnerAndRepoCollaboratorsAndUsername>

/**
 * Remove a repository collaborator
 */
export const deleteByOwnerAndRepoCollaboratorsAndUsername = api<(paths?: [owner: string, repo: string, username: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/collaborators/{username}`

export type DeleteByOwnerAndRepoCollaboratorsAndUsername = Api<typeof deleteByOwnerAndRepoCollaboratorsAndUsername>

/**
 * Get repository permissions for a user
Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
 */
export const getByOwnerAndRepoCollaboratorsAndUsernamePermission = api<(paths?: [owner: string, repo: string, username: string], config?: Config<any, any>) => Repository_collaborator_permission>`GET /repos/{owner}/{repo}/collaborators/{username}/permission`

export type GetByOwnerAndRepoCollaboratorsAndUsernamePermission = Api<typeof getByOwnerAndRepoCollaboratorsAndUsernamePermission>

/**
 * List commit comments for a repository
Commit Comments use [these custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/).

Comments are ordered by ascending ID.
 */
export const getByOwnerAndRepoComments = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoCommentsQuery, config?: Config<GetByOwnerAndRepoCommentsQuery, any>) => Commit_comment[]>`GET /repos/{owner}/{repo}/comments`

export type GetByOwnerAndRepoComments = Api<typeof getByOwnerAndRepoComments>

/**
 * Get a commit comment
 */
export const getByOwnerAndRepoCommentsAndCommentId = api<(paths?: [owner: string, repo: string, commentid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/comments/{comment_id}`

export type GetByOwnerAndRepoCommentsAndCommentId = Api<typeof getByOwnerAndRepoCommentsAndCommentId>

/**
 * Update a commit comment
 */
export const patchByOwnerAndRepoCommentsAndCommentId = api<(paths?: [owner: string, repo: string, commentid: number], body?: UnnamedModel$69, config?: Config<any, UnnamedModel$69>) => any>`PATCH /repos/{owner}/{repo}/comments/{comment_id}`

export type PatchByOwnerAndRepoCommentsAndCommentId = Api<typeof patchByOwnerAndRepoCommentsAndCommentId>

/**
 * Delete a commit comment
 */
export const deleteByOwnerAndRepoCommentsAndCommentId = api<(paths?: [owner: string, repo: string, commentid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/comments/{comment_id}`

export type DeleteByOwnerAndRepoCommentsAndCommentId = Api<typeof deleteByOwnerAndRepoCommentsAndCommentId>

/**
 * List reactions for a commit comment
List the reactions to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments).
 */
export const getByOwnerAndRepoCommentsAndCommentIdReactions = api<(paths?: [owner: string, repo: string, commentid: number], query?: GetByOwnerAndRepoCommentsAndCommentIdReactionsQuery, config?: Config<GetByOwnerAndRepoCommentsAndCommentIdReactionsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/comments/{comment_id}/reactions`

export type GetByOwnerAndRepoCommentsAndCommentIdReactions = Api<typeof getByOwnerAndRepoCommentsAndCommentIdReactions>

/**
 * Create reaction for a commit comment
Create a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
 */
export const postByOwnerAndRepoCommentsAndCommentIdReactions = api<(paths?: [owner: string, repo: string, commentid: number], body?: UnnamedModel$70, config?: Config<any, UnnamedModel$70>) => any>`POST /repos/{owner}/{repo}/comments/{comment_id}/reactions`

export type PostByOwnerAndRepoCommentsAndCommentIdReactions = Api<typeof postByOwnerAndRepoCommentsAndCommentIdReactions>

/**
 * Delete a commit comment reaction
**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.

Delete a reaction to a [commit comment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#comments).
 */
export const deleteByOwnerAndRepoCommentsAndCommentIdReactionsAndReactionId = api<(paths?: [owner: string, repo: string, commentid: number, reactionid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}`

export type DeleteByOwnerAndRepoCommentsAndCommentIdReactionsAndReactionId = Api<typeof deleteByOwnerAndRepoCommentsAndCommentIdReactionsAndReactionId>

/**
 * List commits
**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getByOwnerAndRepoCommits = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoCommitsQuery, config?: Config<GetByOwnerAndRepoCommitsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/commits`

export type GetByOwnerAndRepoCommits = Api<typeof getByOwnerAndRepoCommits>

/**
 * List branches for HEAD commit
Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
 */
export const getByOwnerAndRepoCommitsAndCommitShaBranchesWhereHead = api<(paths?: [owner: string, repo: string, commitsha: string], config?: Config<any, any>) => Branch_short[]>`GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head`

export type GetByOwnerAndRepoCommitsAndCommitShaBranchesWhereHead = Api<typeof getByOwnerAndRepoCommitsAndCommitShaBranchesWhereHead>

/**
 * List commit comments
Use the `:commit_sha` to specify the commit that will have its comments listed.
 */
export const getByOwnerAndRepoCommitsAndCommitShaComments = api<(paths?: [owner: string, repo: string, commitsha: string], query?: GetByOwnerAndRepoCommitsAndCommitShaCommentsQuery, config?: Config<GetByOwnerAndRepoCommitsAndCommitShaCommentsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/commits/{commit_sha}/comments`

export type GetByOwnerAndRepoCommitsAndCommitShaComments = Api<typeof getByOwnerAndRepoCommitsAndCommitShaComments>

/**
 * Create a commit comment
Create a comment for a commit using its `:commit_sha`.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const postByOwnerAndRepoCommitsAndCommitShaComments = api<(paths?: [owner: string, repo: string, commitsha: string], body?: UnnamedModel$72, config?: Config<any, UnnamedModel$72>) => any>`POST /repos/{owner}/{repo}/commits/{commit_sha}/comments`

export type PostByOwnerAndRepoCommitsAndCommitShaComments = Api<typeof postByOwnerAndRepoCommitsAndCommitShaComments>

/**
 * List pull requests associated with a commit
Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests) endpoint.
 */
export const getByOwnerAndRepoCommitsAndCommitShaPulls = api<(paths?: [owner: string, repo: string, commitsha: string], query?: GetByOwnerAndRepoCommitsAndCommitShaPullsQuery, config?: Config<GetByOwnerAndRepoCommitsAndCommitShaPullsQuery, any>) => Pull_request_simple[]>`GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls`

export type GetByOwnerAndRepoCommitsAndCommitShaPulls = Api<typeof getByOwnerAndRepoCommitsAndCommitShaPulls>

/**
 * Get a commit
Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.

**Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.

You can pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.

To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getByOwnerAndRepoCommitsAndRef = api<(paths?: [owner: string, repo: string, ref: string], query?: GetByOwnerAndRepoCommitsAndRefQuery, config?: Config<GetByOwnerAndRepoCommitsAndRefQuery, any>) => any>`GET /repos/{owner}/{repo}/commits/{ref}`

export type GetByOwnerAndRepoCommitsAndRef = Api<typeof getByOwnerAndRepoCommitsAndRef>

/**
 * List check runs for a Git reference
**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.

Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
 */
export const getByOwnerAndRepoCommitsAndRefCheckRuns = api<(paths?: [owner: string, repo: string, ref: string], query?: GetByOwnerAndRepoCommitsAndRefCheckRunsQuery, config?: Config<GetByOwnerAndRepoCommitsAndRefCheckRunsQuery, any>) => UnnamedModel$77>`GET /repos/{owner}/{repo}/commits/{ref}/check-runs`

export type GetByOwnerAndRepoCommitsAndRefCheckRuns = Api<typeof getByOwnerAndRepoCommitsAndRefCheckRuns>

/**
 * List check suites for a Git reference
**Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.

Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
 */
export const getByOwnerAndRepoCommitsAndRefCheckSuites = api<(paths?: [owner: string, repo: string, ref: string], query?: GetByOwnerAndRepoCommitsAndRefCheckSuitesQuery, config?: Config<GetByOwnerAndRepoCommitsAndRefCheckSuitesQuery, any>) => UnnamedModel$78>`GET /repos/{owner}/{repo}/commits/{ref}/check-suites`

export type GetByOwnerAndRepoCommitsAndRefCheckSuites = Api<typeof getByOwnerAndRepoCommitsAndRefCheckSuites>

/**
 * Get the combined status for a specific reference
Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.


Additionally, a combined `state` is returned. The `state` is one of:

*   **failure** if any of the contexts report as `error` or `failure`
*   **pending** if there are no statuses or a context is `pending`
*   **success** if the latest status for all contexts is `success`
 */
export const getByOwnerAndRepoCommitsAndRefStatus = api<(paths?: [owner: string, repo: string, ref: string], query?: GetByOwnerAndRepoCommitsAndRefStatusQuery, config?: Config<GetByOwnerAndRepoCommitsAndRefStatusQuery, any>) => Combined_commit_status>`GET /repos/{owner}/{repo}/commits/{ref}/status`

export type GetByOwnerAndRepoCommitsAndRefStatus = Api<typeof getByOwnerAndRepoCommitsAndRefStatus>

/**
 * List commit statuses for a reference
Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.

This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 */
export const getByOwnerAndRepoCommitsAndRefStatuses = api<(paths?: [owner: string, repo: string, ref: string], query?: GetByOwnerAndRepoCommitsAndRefStatusesQuery, config?: Config<GetByOwnerAndRepoCommitsAndRefStatusesQuery, any>) => Status[]>`GET /repos/{owner}/{repo}/commits/{ref}/statuses`

export type GetByOwnerAndRepoCommitsAndRefStatuses = Api<typeof getByOwnerAndRepoCommitsAndRefStatuses>

/**
 * Compare two commits
The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.

The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.

The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.

**Working with large comparisons**

The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits) to enumerate all commits in the range.

For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
to generate. You can typically resolve this error by using a smaller commit range.

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getByOwnerAndRepoCompareAndBasehead = api<(paths?: [owner: string, repo: string, basehead: string], config?: Config<any, any>) => Commit_comparison>`GET /repos/{owner}/{repo}/compare/{basehead}`

export type GetByOwnerAndRepoCompareAndBasehead = Api<typeof getByOwnerAndRepoCompareAndBasehead>

/**
 * Create a content attachment
Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` and `repository` `full_name` of the content reference from the [`content_reference` event](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#content_reference) to create an attachment.

The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/enterprise-server@3.0/apps/using-content-attachments/)" for details about content attachments.

You must use an [installation access token](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
 */
export const postByOwnerAndRepoContentReferencesAndContentReferenceIdAttachments = api<(paths?: [owner: string, repo: string, contentreferenceid: number], body?: UnnamedModel$79, config?: Config<any, UnnamedModel$79>) => Content_reference_attachment>`POST /repos/{owner}/{repo}/content_references/{content_reference_id}/attachments`

export type PostByOwnerAndRepoContentReferencesAndContentReferenceIdAttachments = Api<typeof postByOwnerAndRepoContentReferencesAndContentReferenceIdAttachments>

/**
 * Get repository content
Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
`:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.

Files and symlinks support [a custom media type](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for
retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
type](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
object format.

**Note**:
*   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/enterprise-server@3.0/rest/reference/git#trees).
*   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
API](https://docs.github.com/enterprise-server@3.0/rest/reference/git#get-a-tree).
*   This API supports files up to 1 megabyte in size.

#### If the content is a directory
The response will be an array of objects, one object for each item in the directory.
When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
_should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
In the next major version of the API, the type will be returned as "submodule".

#### If the content is a symlink
If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
describing the symlink itself.

#### If the content is a submodule
The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
the submodule at that specific commit.

If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
github.com URLs (`html_url` and `_links["html"]`) will have null values.
 */
export const getByOwnerAndRepoContentsAndPath = api<(paths?: [owner: string, repo: string, path: string], query?: GetByOwnerAndRepoContentsAndPathQuery, config?: Config<GetByOwnerAndRepoContentsAndPathQuery, any>) => any>`GET /repos/{owner}/{repo}/contents/{path}`

export type GetByOwnerAndRepoContentsAndPath = Api<typeof getByOwnerAndRepoContentsAndPath>

/**
 * Create or update file contents
Creates a new file or replaces an existing file in a repository.
 */
export const putByOwnerAndRepoContentsAndPath = api<(paths?: [owner: string, repo: string, path: string], body?: UnnamedModel$82, config?: Config<any, UnnamedModel$82>) => File_commit>`PUT /repos/{owner}/{repo}/contents/{path}`

export type PutByOwnerAndRepoContentsAndPath = Api<typeof putByOwnerAndRepoContentsAndPath>

/**
 * Delete a file
Deletes a file in a repository.

You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.

The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.

You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
 */
export const deleteByOwnerAndRepoContentsAndPath = api<(paths?: [owner: string, repo: string, path: string], body?: UnnamedModel$91, config?: Config<any, UnnamedModel$91>) => any>`DELETE /repos/{owner}/{repo}/contents/{path}`

export type DeleteByOwnerAndRepoContentsAndPath = Api<typeof deleteByOwnerAndRepoContentsAndPath>

/**
 * List repository contributors
Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.

GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
 */
export const getByOwnerAndRepoContributors = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoContributorsQuery, config?: Config<GetByOwnerAndRepoContributorsQuery, any>) => Contributor[]>`GET /repos/{owner}/{repo}/contributors`

export type GetByOwnerAndRepoContributors = Api<typeof getByOwnerAndRepoContributors>

/**
 * List deployments
Simple filtering of deployments is available via query parameters:
 */
export const getByOwnerAndRepoDeployments = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoDeploymentsQuery, config?: Config<GetByOwnerAndRepoDeploymentsQuery, any>) => Deployment[]>`GET /repos/{owner}/{repo}/deployments`

export type GetByOwnerAndRepoDeployments = Api<typeof getByOwnerAndRepoDeployments>

/**
 * Create a deployment
Deployments offer a few configurable parameters with certain defaults.

The `ref` parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them
before we merge a pull request.

The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
makes it easier to track which environments have requested deployments. The default environment is `production`.

The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
return a failure response.

By default, [commit statuses](https://docs.github.com/enterprise-server@3.0/rest/reference/commits#commit-statuses) for every submitted context must be in a `success`
state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
not require any contexts or create any commit statuses, the deployment will always succeed.

The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
field that will be passed on when a deployment event is dispatched.

The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
application with debugging enabled.

Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.

#### Merged branch response
You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
a deployment. This auto-merge happens when:
*   Auto-merge option is enabled in the repository
*   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
*   There are no merge conflicts

If there are no new commits in the base branch, a new request to create a deployment should give a successful
response.

#### Merge conflict response
This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.

#### Failed commit status checks
This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
 */
export const postByOwnerAndRepoDeployments = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$92, config?: Config<any, UnnamedModel$92>) => any>`POST /repos/{owner}/{repo}/deployments`

export type PostByOwnerAndRepoDeployments = Api<typeof postByOwnerAndRepoDeployments>

/**
 * Get a deployment
 */
export const getByOwnerAndRepoDeploymentsAndDeploymentId = api<(paths?: [owner: string, repo: string, deploymentid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/deployments/{deployment_id}`

export type GetByOwnerAndRepoDeploymentsAndDeploymentId = Api<typeof getByOwnerAndRepoDeploymentsAndDeploymentId>

/**
 * Delete a deployment
If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with `repo` or `repo_deployment` scopes can delete a deployment.

To set a deployment as inactive, you must:

*   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
*   Mark the active deployment as inactive by adding any non-successful deployment status.

For more information, see "[Create a deployment](https://docs.github.com/enterprise-server@3.0/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-deployment-status)."
 */
export const deleteByOwnerAndRepoDeploymentsAndDeploymentId = api<(paths?: [owner: string, repo: string, deploymentid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/deployments/{deployment_id}`

export type DeleteByOwnerAndRepoDeploymentsAndDeploymentId = Api<typeof deleteByOwnerAndRepoDeploymentsAndDeploymentId>

/**
 * List deployment statuses
Users with pull access can view deployment statuses for a deployment:
 */
export const getByOwnerAndRepoDeploymentsAndDeploymentIdStatuses = api<(paths?: [owner: string, repo: string, deploymentid: number], query?: GetByOwnerAndRepoDeploymentsAndDeploymentIdStatusesQuery, config?: Config<GetByOwnerAndRepoDeploymentsAndDeploymentIdStatusesQuery, any>) => Deployment_status[]>`GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses`

export type GetByOwnerAndRepoDeploymentsAndDeploymentIdStatuses = Api<typeof getByOwnerAndRepoDeploymentsAndDeploymentIdStatuses>

/**
 * Create a deployment status
Users with `push` access can create deployment statuses for a given deployment.

GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
 */
export const postByOwnerAndRepoDeploymentsAndDeploymentIdStatuses = api<(paths?: [owner: string, repo: string, deploymentid: number], body?: UnnamedModel$93, config?: Config<any, UnnamedModel$93>) => any>`POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses`

export type PostByOwnerAndRepoDeploymentsAndDeploymentIdStatuses = Api<typeof postByOwnerAndRepoDeploymentsAndDeploymentIdStatuses>

/**
 * Get a deployment status
Users with pull access can view a deployment status for a deployment:
 */
export const getByOwnerAndRepoDeploymentsAndDeploymentIdStatusesAndStatusId = api<(paths?: [owner: string, repo: string, deploymentid: number, statusid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}`

export type GetByOwnerAndRepoDeploymentsAndDeploymentIdStatusesAndStatusId = Api<typeof getByOwnerAndRepoDeploymentsAndDeploymentIdStatusesAndStatusId>

/**
 * Create a repository dispatch event
You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#repository_dispatch)."

The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.

This endpoint requires write access to the repository by providing either:

  - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
  - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.

This input example shows how you can use the `client_payload` as a test to debug your workflow.
 */
export const postByOwnerAndRepoDispatches = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$94, config?: Config<any, UnnamedModel$94>) => any>`POST /repos/{owner}/{repo}/dispatches`

export type PostByOwnerAndRepoDispatches = Api<typeof postByOwnerAndRepoDispatches>

/**
 * List repository events
 */
export const getByOwnerAndRepoEvents = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoEventsQuery, config?: Config<GetByOwnerAndRepoEventsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/events`

export type GetByOwnerAndRepoEvents = Api<typeof getByOwnerAndRepoEvents>

/**
 * List forks
 */
export const getByOwnerAndRepoForks = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoForksQuery, config?: Config<GetByOwnerAndRepoForksQuery, any>) => any[]>`GET /repos/{owner}/{repo}/forks`

export type GetByOwnerAndRepoForks = Api<typeof getByOwnerAndRepoForks>

/**
 * Create a fork
Create a fork for the authenticated user.

**Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
 */
export const postByOwnerAndRepoForks = api<(paths?: [owner: string, repo: string], body?: any | null, config?: Config<any, any | null>) => any>`POST /repos/{owner}/{repo}/forks`

export type PostByOwnerAndRepoForks = Api<typeof postByOwnerAndRepoForks>

/**
 * Create a blob
 */
export const postByOwnerAndRepoGitBlobs = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$95, config?: Config<any, UnnamedModel$95>) => any>`POST /repos/{owner}/{repo}/git/blobs`

export type PostByOwnerAndRepoGitBlobs = Api<typeof postByOwnerAndRepoGitBlobs>

/**
 * Get a blob
The `content` in the response will always be Base64 encoded.

_Note_: This API supports blobs up to 100 megabytes in size.
 */
export const getByOwnerAndRepoGitBlobsAndFileSha = api<(paths?: [owner: string, repo: string, filesha: string], config?: Config<any, any>) => Blob>`GET /repos/{owner}/{repo}/git/blobs/{file_sha}`

export type GetByOwnerAndRepoGitBlobsAndFileSha = Api<typeof getByOwnerAndRepoGitBlobsAndFileSha>

/**
 * Create a commit
Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const postByOwnerAndRepoGitCommits = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$98, config?: Config<any, UnnamedModel$98>) => any>`POST /repos/{owner}/{repo}/git/commits`

export type PostByOwnerAndRepoGitCommits = Api<typeof postByOwnerAndRepoGitCommits>

/**
 * Get a commit
Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getByOwnerAndRepoGitCommitsAndCommitSha = api<(paths?: [owner: string, repo: string, commitsha: string], config?: Config<any, any>) => Git_commit>`GET /repos/{owner}/{repo}/git/commits/{commit_sha}`

export type GetByOwnerAndRepoGitCommitsAndCommitSha = Api<typeof getByOwnerAndRepoGitCommitsAndCommitSha>

/**
 * List matching references
Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.

When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.

**Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".

If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 */
export const getByOwnerAndRepoGitMatchingRefsAndRef = api<(paths?: [owner: string, repo: string, ref: string], query?: GetByOwnerAndRepoGitMatchingRefsAndRefQuery, config?: Config<GetByOwnerAndRepoGitMatchingRefsAndRefQuery, any>) => Git_ref[]>`GET /repos/{owner}/{repo}/git/matching-refs/{ref}`

export type GetByOwnerAndRepoGitMatchingRefsAndRef = Api<typeof getByOwnerAndRepoGitMatchingRefsAndRef>

/**
 * Get a reference
Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.

**Note:** You need to explicitly [request a pull request](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 */
export const getByOwnerAndRepoGitRefAndRef = api<(paths?: [owner: string, repo: string, ref: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/git/ref/{ref}`

export type GetByOwnerAndRepoGitRefAndRef = Api<typeof getByOwnerAndRepoGitRefAndRef>

/**
 * Create a reference
Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 */
export const postByOwnerAndRepoGitRefs = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$105, config?: Config<any, UnnamedModel$105>) => any>`POST /repos/{owner}/{repo}/git/refs`

export type PostByOwnerAndRepoGitRefs = Api<typeof postByOwnerAndRepoGitRefs>

/**
 * Update a reference
 */
export const patchByOwnerAndRepoGitRefsAndRef = api<(paths?: [owner: string, repo: string, ref: string], body?: UnnamedModel$106, config?: Config<any, UnnamedModel$106>) => any>`PATCH /repos/{owner}/{repo}/git/refs/{ref}`

export type PatchByOwnerAndRepoGitRefsAndRef = Api<typeof patchByOwnerAndRepoGitRefsAndRef>

/**
 * Delete a reference
 */
export const deleteByOwnerAndRepoGitRefsAndRef = api<(paths?: [owner: string, repo: string, ref: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/git/refs/{ref}`

export type DeleteByOwnerAndRepoGitRefsAndRef = Api<typeof deleteByOwnerAndRepoGitRefsAndRef>

/**
 * Create a tag object
Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/enterprise-server@3.0/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/enterprise-server@3.0/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.

**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const postByOwnerAndRepoGitTags = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$108, config?: Config<any, UnnamedModel$108>) => any>`POST /repos/{owner}/{repo}/git/tags`

export type PostByOwnerAndRepoGitTags = Api<typeof postByOwnerAndRepoGitTags>

/**
 * Get a tag
**Signature verification object**

The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:

| Name | Type | Description |
| ---- | ---- | ----------- |
| `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
| `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
| `signature` | `string` | The signature that was extracted from the commit. |
| `payload` | `string` | The value that was signed. |

These are the possible values for `reason` in the `verification` object:

| Value | Description |
| ----- | ----------- |
| `expired_key` | The key that made the signature is expired. |
| `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
| `gpgverify_error` | There was an error communicating with the signature verification service. |
| `gpgverify_unavailable` | The signature verification service is currently unavailable. |
| `unsigned` | The object does not include a signature. |
| `unknown_signature_type` | A non-PGP signature was found in the commit. |
| `no_user` | No user was associated with the `committer` email address in the commit. |
| `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
| `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
| `unknown_key` | The key that made the signature has not been registered with any user's account. |
| `malformed_signature` | There was an error parsing the signature. |
| `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
| `valid` | None of the above errors applied, so the signature is considered to be verified. |
 */
export const getByOwnerAndRepoGitTagsAndTagSha = api<(paths?: [owner: string, repo: string, tagsha: string], config?: Config<any, any>) => Git_tag>`GET /repos/{owner}/{repo}/git/tags/{tag_sha}`

export type GetByOwnerAndRepoGitTagsAndTagSha = Api<typeof getByOwnerAndRepoGitTagsAndTagSha>

/**
 * Create a tree
The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.

If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/enterprise-server@3.0/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/enterprise-server@3.0/rest/reference/git#update-a-reference)."
 */
export const postByOwnerAndRepoGitTrees = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$112, config?: Config<any, UnnamedModel$112>) => any>`POST /repos/{owner}/{repo}/git/trees`

export type PostByOwnerAndRepoGitTrees = Api<typeof postByOwnerAndRepoGitTrees>

/**
 * Get a tree
Returns a single tree using the SHA1 value for that tree.

If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
 */
export const getByOwnerAndRepoGitTreesAndTreeSha = api<(paths?: [owner: string, repo: string, treesha: string], query?: GetByOwnerAndRepoGitTreesAndTreeShaQuery, config?: Config<GetByOwnerAndRepoGitTreesAndTreeShaQuery, any>) => Git_tree>`GET /repos/{owner}/{repo}/git/trees/{tree_sha}`

export type GetByOwnerAndRepoGitTreesAndTreeSha = Api<typeof getByOwnerAndRepoGitTreesAndTreeSha>

/**
 * List repository webhooks
 */
export const getByOwnerAndRepoHooks = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoHooksQuery, config?: Config<GetByOwnerAndRepoHooksQuery, any>) => Hook[]>`GET /repos/{owner}/{repo}/hooks`

export type GetByOwnerAndRepoHooks = Api<typeof getByOwnerAndRepoHooks>

/**
 * Create a repository webhook
Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
share the same `config` as long as those webhooks do not have any `events` that overlap.
 */
export const postByOwnerAndRepoHooks = api<(paths?: [owner: string, repo: string], body?: any | null, config?: Config<any, any | null>) => any>`POST /repos/{owner}/{repo}/hooks`

export type PostByOwnerAndRepoHooks = Api<typeof postByOwnerAndRepoHooks>

/**
 * Get a repository webhook
Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
 */
export const getByOwnerAndRepoHooksAndHookId = api<(paths?: [owner: string, repo: string, hookid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/hooks/{hook_id}`

export type GetByOwnerAndRepoHooksAndHookId = Api<typeof getByOwnerAndRepoHooksAndHookId>

/**
 * Update a repository webhook
Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
 */
export const patchByOwnerAndRepoHooksAndHookId = api<(paths?: [owner: string, repo: string, hookid: number], body?: UnnamedModel$116, config?: Config<any, UnnamedModel$116>) => any>`PATCH /repos/{owner}/{repo}/hooks/{hook_id}`

export type PatchByOwnerAndRepoHooksAndHookId = Api<typeof patchByOwnerAndRepoHooksAndHookId>

/**
 * Delete a repository webhook
 */
export const deleteByOwnerAndRepoHooksAndHookId = api<(paths?: [owner: string, repo: string, hookid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/hooks/{hook_id}`

export type DeleteByOwnerAndRepoHooksAndHookId = Api<typeof deleteByOwnerAndRepoHooksAndHookId>

/**
 * Get a webhook configuration for a repository
Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."

Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
 */
export const getByOwnerAndRepoHooksAndHookIdConfig = api<(paths?: [owner: string, repo: string, hookid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/hooks/{hook_id}/config`

export type GetByOwnerAndRepoHooksAndHookIdConfig = Api<typeof getByOwnerAndRepoHooksAndHookIdConfig>

/**
 * Update a webhook configuration for a repository
Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."

Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
 */
export const patchByOwnerAndRepoHooksAndHookIdConfig = api<(paths?: [owner: string, repo: string, hookid: number], body?: UnnamedModel$117, config?: Config<any, UnnamedModel$117>) => any>`PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config`

export type PatchByOwnerAndRepoHooksAndHookIdConfig = Api<typeof patchByOwnerAndRepoHooksAndHookIdConfig>

/**
 * Ping a repository webhook
This will trigger a [ping event](https://docs.github.com/enterprise-server@3.0/webhooks/#ping-event) to be sent to the hook.
 */
export const postByOwnerAndRepoHooksAndHookIdPings = api<(paths?: [owner: string, repo: string, hookid: number], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/hooks/{hook_id}/pings`

export type PostByOwnerAndRepoHooksAndHookIdPings = Api<typeof postByOwnerAndRepoHooksAndHookIdPings>

/**
 * Test the push repository webhook
This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.

**Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
 */
export const postByOwnerAndRepoHooksAndHookIdTests = api<(paths?: [owner: string, repo: string, hookid: number], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/hooks/{hook_id}/tests`

export type PostByOwnerAndRepoHooksAndHookIdTests = Api<typeof postByOwnerAndRepoHooksAndHookIdTests>

/**
 * Get a repository installation for the authenticated app
Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.

You must use a [JWT](https://docs.github.com/enterprise-server@3.0/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
 */
export const getByOwnerAndRepoInstallation = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/installation`

export type GetByOwnerAndRepoInstallation = Api<typeof getByOwnerAndRepoInstallation>

/**
 * List repository invitations
When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
 */
export const getByOwnerAndRepoInvitations = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoInvitationsQuery, config?: Config<GetByOwnerAndRepoInvitationsQuery, any>) => Repository_invitation[]>`GET /repos/{owner}/{repo}/invitations`

export type GetByOwnerAndRepoInvitations = Api<typeof getByOwnerAndRepoInvitations>

/**
 * Update a repository invitation
 */
export const patchByOwnerAndRepoInvitationsAndInvitationId = api<(paths?: [owner: string, repo: string, invitationid: number], body?: UnnamedModel$118, config?: Config<any, UnnamedModel$118>) => any>`PATCH /repos/{owner}/{repo}/invitations/{invitation_id}`

export type PatchByOwnerAndRepoInvitationsAndInvitationId = Api<typeof patchByOwnerAndRepoInvitationsAndInvitationId>

/**
 * Delete a repository invitation
 */
export const deleteByOwnerAndRepoInvitationsAndInvitationId = api<(paths?: [owner: string, repo: string, invitationid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/invitations/{invitation_id}`

export type DeleteByOwnerAndRepoInvitationsAndInvitationId = Api<typeof deleteByOwnerAndRepoInvitationsAndInvitationId>

/**
 * List repository issues
List issues in a repository.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const getByOwnerAndRepoIssues = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoIssuesQuery, config?: Config<GetByOwnerAndRepoIssuesQuery, any>) => any[]>`GET /repos/{owner}/{repo}/issues`

export type GetByOwnerAndRepoIssues = Api<typeof getByOwnerAndRepoIssues>

/**
 * Create an issue
Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.

This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const postByOwnerAndRepoIssues = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$119, config?: Config<any, UnnamedModel$119>) => any>`POST /repos/{owner}/{repo}/issues`

export type PostByOwnerAndRepoIssues = Api<typeof postByOwnerAndRepoIssues>

/**
 * List issue comments for a repository
By default, Issue Comments are ordered by ascending ID.
 */
export const getByOwnerAndRepoIssuesComments = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoIssuesCommentsQuery, config?: Config<GetByOwnerAndRepoIssuesCommentsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/issues/comments`

export type GetByOwnerAndRepoIssuesComments = Api<typeof getByOwnerAndRepoIssuesComments>

/**
 * Get an issue comment
 */
export const getByOwnerAndRepoIssuesCommentsAndCommentId = api<(paths?: [owner: string, repo: string, commentid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/issues/comments/{comment_id}`

export type GetByOwnerAndRepoIssuesCommentsAndCommentId = Api<typeof getByOwnerAndRepoIssuesCommentsAndCommentId>

/**
 * Update an issue comment
 */
export const patchByOwnerAndRepoIssuesCommentsAndCommentId = api<(paths?: [owner: string, repo: string, commentid: number], body?: UnnamedModel$120, config?: Config<any, UnnamedModel$120>) => any>`PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}`

export type PatchByOwnerAndRepoIssuesCommentsAndCommentId = Api<typeof patchByOwnerAndRepoIssuesCommentsAndCommentId>

/**
 * Delete an issue comment
 */
export const deleteByOwnerAndRepoIssuesCommentsAndCommentId = api<(paths?: [owner: string, repo: string, commentid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}`

export type DeleteByOwnerAndRepoIssuesCommentsAndCommentId = Api<typeof deleteByOwnerAndRepoIssuesCommentsAndCommentId>

/**
 * List reactions for an issue comment
List the reactions to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments).
 */
export const getByOwnerAndRepoIssuesCommentsAndCommentIdReactions = api<(paths?: [owner: string, repo: string, commentid: number], query?: GetByOwnerAndRepoIssuesCommentsAndCommentIdReactionsQuery, config?: Config<GetByOwnerAndRepoIssuesCommentsAndCommentIdReactionsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions`

export type GetByOwnerAndRepoIssuesCommentsAndCommentIdReactions = Api<typeof getByOwnerAndRepoIssuesCommentsAndCommentIdReactions>

/**
 * Create reaction for an issue comment
Create a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
 */
export const postByOwnerAndRepoIssuesCommentsAndCommentIdReactions = api<(paths?: [owner: string, repo: string, commentid: number], body?: UnnamedModel$121, config?: Config<any, UnnamedModel$121>) => any>`POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions`

export type PostByOwnerAndRepoIssuesCommentsAndCommentIdReactions = Api<typeof postByOwnerAndRepoIssuesCommentsAndCommentIdReactions>

/**
 * Delete an issue comment reaction
**Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.

Delete a reaction to an [issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#comments).
 */
export const deleteByOwnerAndRepoIssuesCommentsAndCommentIdReactionsAndReactionId = api<(paths?: [owner: string, repo: string, commentid: number, reactionid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}`

export type DeleteByOwnerAndRepoIssuesCommentsAndCommentIdReactionsAndReactionId = Api<typeof deleteByOwnerAndRepoIssuesCommentsAndCommentIdReactionsAndReactionId>

/**
 * List issue events for a repository
 */
export const getByOwnerAndRepoIssuesEvents = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoIssuesEventsQuery, config?: Config<GetByOwnerAndRepoIssuesEventsQuery, any>) => Issue_event[]>`GET /repos/{owner}/{repo}/issues/events`

export type GetByOwnerAndRepoIssuesEvents = Api<typeof getByOwnerAndRepoIssuesEvents>

/**
 * Get an issue event
 */
export const getByOwnerAndRepoIssuesEventsAndEventId = api<(paths?: [owner: string, repo: string, eventid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/issues/events/{event_id}`

export type GetByOwnerAndRepoIssuesEventsAndEventId = Api<typeof getByOwnerAndRepoIssuesEventsAndEventId>

/**
 * Get an issue
The API returns a [`301 Moved Permanently` status](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
[transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
to the [`issues`](https://docs.github.com/enterprise-server@3.0/webhooks/event-payloads/#issues) webhook.

**Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
request id, use the "[List pull requests](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#list-pull-requests)" endpoint.
 */
export const getByOwnerAndRepoIssuesAndIssueNumber = api<(paths?: [owner: string, repo: string, issuenumber: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/issues/{issue_number}`

export type GetByOwnerAndRepoIssuesAndIssueNumber = Api<typeof getByOwnerAndRepoIssuesAndIssueNumber>

/**
 * Update an issue
Issue owners and users with push access can edit an issue.
 */
export const patchByOwnerAndRepoIssuesAndIssueNumber = api<(paths?: [owner: string, repo: string, issuenumber: number], body?: UnnamedModel$122, config?: Config<any, UnnamedModel$122>) => any>`PATCH /repos/{owner}/{repo}/issues/{issue_number}`

export type PatchByOwnerAndRepoIssuesAndIssueNumber = Api<typeof patchByOwnerAndRepoIssuesAndIssueNumber>

/**
 * Add assignees to an issue
Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 */
export const postByOwnerAndRepoIssuesAndIssueNumberAssignees = api<(paths?: [owner: string, repo: string, issuenumber: number], body?: UnnamedModel$123, config?: Config<any, UnnamedModel$123>) => any>`POST /repos/{owner}/{repo}/issues/{issue_number}/assignees`

export type PostByOwnerAndRepoIssuesAndIssueNumberAssignees = Api<typeof postByOwnerAndRepoIssuesAndIssueNumberAssignees>

/**
 * Remove assignees from an issue
Removes one or more assignees from an issue.
 */
export const deleteByOwnerAndRepoIssuesAndIssueNumberAssignees = api<(paths?: [owner: string, repo: string, issuenumber: number], body?: UnnamedModel$124, config?: Config<any, UnnamedModel$124>) => any>`DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees`

export type DeleteByOwnerAndRepoIssuesAndIssueNumberAssignees = Api<typeof deleteByOwnerAndRepoIssuesAndIssueNumberAssignees>

/**
 * List issue comments
Issue Comments are ordered by ascending ID.
 */
export const getByOwnerAndRepoIssuesAndIssueNumberComments = api<(paths?: [owner: string, repo: string, issuenumber: number], query?: GetByOwnerAndRepoIssuesAndIssueNumberCommentsQuery, config?: Config<GetByOwnerAndRepoIssuesAndIssueNumberCommentsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/issues/{issue_number}/comments`

export type GetByOwnerAndRepoIssuesAndIssueNumberComments = Api<typeof getByOwnerAndRepoIssuesAndIssueNumberComments>

/**
 * Create an issue comment
This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const postByOwnerAndRepoIssuesAndIssueNumberComments = api<(paths?: [owner: string, repo: string, issuenumber: number], body?: UnnamedModel$125, config?: Config<any, UnnamedModel$125>) => any>`POST /repos/{owner}/{repo}/issues/{issue_number}/comments`

export type PostByOwnerAndRepoIssuesAndIssueNumberComments = Api<typeof postByOwnerAndRepoIssuesAndIssueNumberComments>

/**
 * List issue events
 */
export const getByOwnerAndRepoIssuesAndIssueNumberEvents = api<(paths?: [owner: string, repo: string, issuenumber: number], query?: GetByOwnerAndRepoIssuesAndIssueNumberEventsQuery, config?: Config<GetByOwnerAndRepoIssuesAndIssueNumberEventsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/issues/{issue_number}/events`

export type GetByOwnerAndRepoIssuesAndIssueNumberEvents = Api<typeof getByOwnerAndRepoIssuesAndIssueNumberEvents>

/**
 * List labels for an issue
 */
export const getByOwnerAndRepoIssuesAndIssueNumberLabels = api<(paths?: [owner: string, repo: string, issuenumber: number], query?: GetByOwnerAndRepoIssuesAndIssueNumberLabelsQuery, config?: Config<GetByOwnerAndRepoIssuesAndIssueNumberLabelsQuery, any>) => Label[]>`GET /repos/{owner}/{repo}/issues/{issue_number}/labels`

export type GetByOwnerAndRepoIssuesAndIssueNumberLabels = Api<typeof getByOwnerAndRepoIssuesAndIssueNumberLabels>

/**
 * Add labels to an issue
 */
export const postByOwnerAndRepoIssuesAndIssueNumberLabels = api<(paths?: [owner: string, repo: string, issuenumber: number], body?: any, config?: Config<any, any>) => any[]>`POST /repos/{owner}/{repo}/issues/{issue_number}/labels`

export type PostByOwnerAndRepoIssuesAndIssueNumberLabels = Api<typeof postByOwnerAndRepoIssuesAndIssueNumberLabels>

/**
 * Set labels for an issue
Removes any previous labels and sets the new labels for an issue.
 */
export const putByOwnerAndRepoIssuesAndIssueNumberLabels = api<(paths?: [owner: string, repo: string, issuenumber: number], body?: any, config?: Config<any, any>) => any[]>`PUT /repos/{owner}/{repo}/issues/{issue_number}/labels`

export type PutByOwnerAndRepoIssuesAndIssueNumberLabels = Api<typeof putByOwnerAndRepoIssuesAndIssueNumberLabels>

/**
 * Remove all labels from an issue
 */
export const deleteByOwnerAndRepoIssuesAndIssueNumberLabels = api<(paths?: [owner: string, repo: string, issuenumber: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels`

export type DeleteByOwnerAndRepoIssuesAndIssueNumberLabels = Api<typeof deleteByOwnerAndRepoIssuesAndIssueNumberLabels>

/**
 * Remove a label from an issue
Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
 */
export const deleteByOwnerAndRepoIssuesAndIssueNumberLabelsAndName = api<(paths?: [owner: string, repo: string, issuenumber: number, name: string], config?: Config<any, any>) => any[]>`DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}`

export type DeleteByOwnerAndRepoIssuesAndIssueNumberLabelsAndName = Api<typeof deleteByOwnerAndRepoIssuesAndIssueNumberLabelsAndName>

/**
 * Lock an issue
Users with push access can lock an issue or pull request's conversation.

Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#http-verbs)."
 */
export const putByOwnerAndRepoIssuesAndIssueNumberLock = api<(paths?: [owner: string, repo: string, issuenumber: number], body?: any | null, config?: Config<any, any | null>) => any>`PUT /repos/{owner}/{repo}/issues/{issue_number}/lock`

export type PutByOwnerAndRepoIssuesAndIssueNumberLock = Api<typeof putByOwnerAndRepoIssuesAndIssueNumberLock>

/**
 * Unlock an issue
Users with push access can unlock an issue's conversation.
 */
export const deleteByOwnerAndRepoIssuesAndIssueNumberLock = api<(paths?: [owner: string, repo: string, issuenumber: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock`

export type DeleteByOwnerAndRepoIssuesAndIssueNumberLock = Api<typeof deleteByOwnerAndRepoIssuesAndIssueNumberLock>

/**
 * List reactions for an issue
List the reactions to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues).
 */
export const getByOwnerAndRepoIssuesAndIssueNumberReactions = api<(paths?: [owner: string, repo: string, issuenumber: number], query?: GetByOwnerAndRepoIssuesAndIssueNumberReactionsQuery, config?: Config<GetByOwnerAndRepoIssuesAndIssueNumberReactionsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/issues/{issue_number}/reactions`

export type GetByOwnerAndRepoIssuesAndIssueNumberReactions = Api<typeof getByOwnerAndRepoIssuesAndIssueNumberReactions>

/**
 * Create reaction for an issue
Create a reaction to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
 */
export const postByOwnerAndRepoIssuesAndIssueNumberReactions = api<(paths?: [owner: string, repo: string, issuenumber: number], body?: UnnamedModel$126, config?: Config<any, UnnamedModel$126>) => any>`POST /repos/{owner}/{repo}/issues/{issue_number}/reactions`

export type PostByOwnerAndRepoIssuesAndIssueNumberReactions = Api<typeof postByOwnerAndRepoIssuesAndIssueNumberReactions>

/**
 * Delete an issue reaction
**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.

Delete a reaction to an [issue](https://docs.github.com/enterprise-server@3.0/rest/reference/issues/).
 */
export const deleteByOwnerAndRepoIssuesAndIssueNumberReactionsAndReactionId = api<(paths?: [owner: string, repo: string, issuenumber: number, reactionid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}`

export type DeleteByOwnerAndRepoIssuesAndIssueNumberReactionsAndReactionId = Api<typeof deleteByOwnerAndRepoIssuesAndIssueNumberReactionsAndReactionId>

/**
 * List timeline events for an issue
 */
export const getByOwnerAndRepoIssuesAndIssueNumberTimeline = api<(paths?: [owner: string, repo: string, issuenumber: number], query?: GetByOwnerAndRepoIssuesAndIssueNumberTimelineQuery, config?: Config<GetByOwnerAndRepoIssuesAndIssueNumberTimelineQuery, any>) => Record<string, any>[]>`GET /repos/{owner}/{repo}/issues/{issue_number}/timeline`

export type GetByOwnerAndRepoIssuesAndIssueNumberTimeline = Api<typeof getByOwnerAndRepoIssuesAndIssueNumberTimeline>

/**
 * List deploy keys
 */
export const getByOwnerAndRepoKeys = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoKeysQuery, config?: Config<GetByOwnerAndRepoKeysQuery, any>) => Deploy_key[]>`GET /repos/{owner}/{repo}/keys`

export type GetByOwnerAndRepoKeys = Api<typeof getByOwnerAndRepoKeys>

/**
 * Create a deploy key
You can create a read-only deploy key.
 */
export const postByOwnerAndRepoKeys = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$127, config?: Config<any, UnnamedModel$127>) => any>`POST /repos/{owner}/{repo}/keys`

export type PostByOwnerAndRepoKeys = Api<typeof postByOwnerAndRepoKeys>

/**
 * Get a deploy key
 */
export const getByOwnerAndRepoKeysAndKeyId = api<(paths?: [owner: string, repo: string, keyid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/keys/{key_id}`

export type GetByOwnerAndRepoKeysAndKeyId = Api<typeof getByOwnerAndRepoKeysAndKeyId>

/**
 * Delete a deploy key
Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 */
export const deleteByOwnerAndRepoKeysAndKeyId = api<(paths?: [owner: string, repo: string, keyid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/keys/{key_id}`

export type DeleteByOwnerAndRepoKeysAndKeyId = Api<typeof deleteByOwnerAndRepoKeysAndKeyId>

/**
 * List labels for a repository
 */
export const getByOwnerAndRepoLabels = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoLabelsQuery, config?: Config<GetByOwnerAndRepoLabelsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/labels`

export type GetByOwnerAndRepoLabels = Api<typeof getByOwnerAndRepoLabels>

/**
 * Create a label
 */
export const postByOwnerAndRepoLabels = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$128, config?: Config<any, UnnamedModel$128>) => any>`POST /repos/{owner}/{repo}/labels`

export type PostByOwnerAndRepoLabels = Api<typeof postByOwnerAndRepoLabels>

/**
 * Get a label
 */
export const getByOwnerAndRepoLabelsAndName = api<(paths?: [owner: string, repo: string, name: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/labels/{name}`

export type GetByOwnerAndRepoLabelsAndName = Api<typeof getByOwnerAndRepoLabelsAndName>

/**
 * Update a label
 */
export const patchByOwnerAndRepoLabelsAndName = api<(paths?: [owner: string, repo: string, name: string], body?: UnnamedModel$129, config?: Config<any, UnnamedModel$129>) => any>`PATCH /repos/{owner}/{repo}/labels/{name}`

export type PatchByOwnerAndRepoLabelsAndName = Api<typeof patchByOwnerAndRepoLabelsAndName>

/**
 * Delete a label
 */
export const deleteByOwnerAndRepoLabelsAndName = api<(paths?: [owner: string, repo: string, name: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/labels/{name}`

export type DeleteByOwnerAndRepoLabelsAndName = Api<typeof deleteByOwnerAndRepoLabelsAndName>

/**
 * List repository languages
Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
 */
export const getByOwnerAndRepoLanguages = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => Record<string, any>>`GET /repos/{owner}/{repo}/languages`

export type GetByOwnerAndRepoLanguages = Api<typeof getByOwnerAndRepoLanguages>

/**
 * Get the license for a repository
This method returns the contents of the repository's license file, if one is detected.

Similar to [Get repository content](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
 */
export const getByOwnerAndRepoLicense = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => License_content>`GET /repos/{owner}/{repo}/license`

export type GetByOwnerAndRepoLicense = Api<typeof getByOwnerAndRepoLicense>

/**
 * Merge a branch
 */
export const postByOwnerAndRepoMerges = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$131, config?: Config<any, UnnamedModel$131>) => any>`POST /repos/{owner}/{repo}/merges`

export type PostByOwnerAndRepoMerges = Api<typeof postByOwnerAndRepoMerges>

/**
 * List milestones
 */
export const getByOwnerAndRepoMilestones = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoMilestonesQuery, config?: Config<GetByOwnerAndRepoMilestonesQuery, any>) => Milestone[]>`GET /repos/{owner}/{repo}/milestones`

export type GetByOwnerAndRepoMilestones = Api<typeof getByOwnerAndRepoMilestones>

/**
 * Create a milestone
 */
export const postByOwnerAndRepoMilestones = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$132, config?: Config<any, UnnamedModel$132>) => any>`POST /repos/{owner}/{repo}/milestones`

export type PostByOwnerAndRepoMilestones = Api<typeof postByOwnerAndRepoMilestones>

/**
 * Get a milestone
 */
export const getByOwnerAndRepoMilestonesAndMilestoneNumber = api<(paths?: [owner: string, repo: string, milestonenumber: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/milestones/{milestone_number}`

export type GetByOwnerAndRepoMilestonesAndMilestoneNumber = Api<typeof getByOwnerAndRepoMilestonesAndMilestoneNumber>

/**
 * Update a milestone
 */
export const patchByOwnerAndRepoMilestonesAndMilestoneNumber = api<(paths?: [owner: string, repo: string, milestonenumber: number], body?: UnnamedModel$133, config?: Config<any, UnnamedModel$133>) => any>`PATCH /repos/{owner}/{repo}/milestones/{milestone_number}`

export type PatchByOwnerAndRepoMilestonesAndMilestoneNumber = Api<typeof patchByOwnerAndRepoMilestonesAndMilestoneNumber>

/**
 * Delete a milestone
 */
export const deleteByOwnerAndRepoMilestonesAndMilestoneNumber = api<(paths?: [owner: string, repo: string, milestonenumber: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/milestones/{milestone_number}`

export type DeleteByOwnerAndRepoMilestonesAndMilestoneNumber = Api<typeof deleteByOwnerAndRepoMilestonesAndMilestoneNumber>

/**
 * List labels for issues in a milestone
 */
export const getByOwnerAndRepoMilestonesAndMilestoneNumberLabels = api<(paths?: [owner: string, repo: string, milestonenumber: number], query?: GetByOwnerAndRepoMilestonesAndMilestoneNumberLabelsQuery, config?: Config<GetByOwnerAndRepoMilestonesAndMilestoneNumberLabelsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels`

export type GetByOwnerAndRepoMilestonesAndMilestoneNumberLabels = Api<typeof getByOwnerAndRepoMilestonesAndMilestoneNumberLabels>

/**
 * List repository notifications for the authenticated user
List all notifications for the current user.
 */
export const getByOwnerAndRepoNotifications = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoNotificationsQuery, config?: Config<GetByOwnerAndRepoNotificationsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/notifications`

export type GetByOwnerAndRepoNotifications = Api<typeof getByOwnerAndRepoNotifications>

/**
 * Mark repository notifications as read
Marks all notifications in a repository as "read" removes them from the [default view on GitHub Enterprise Server](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub Enterprise Server will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
 */
export const putByOwnerAndRepoNotifications = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$134, config?: Config<any, UnnamedModel$134>) => any>`PUT /repos/{owner}/{repo}/notifications`

export type PutByOwnerAndRepoNotifications = Api<typeof putByOwnerAndRepoNotifications>

/**
 * Get a GitHub Enterprise Server Pages site
 */
export const getByOwnerAndRepoPages = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => Page>`GET /repos/{owner}/{repo}/pages`

export type GetByOwnerAndRepoPages = Api<typeof getByOwnerAndRepoPages>

/**
 * Create a GitHub Enterprise Server Pages site
Configures a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
 */
export const postByOwnerAndRepoPages = api<(paths?: [owner: string, repo: string], body?: any | null, config?: Config<any, any | null>) => any>`POST /repos/{owner}/{repo}/pages`

export type PostByOwnerAndRepoPages = Api<typeof postByOwnerAndRepoPages>

/**
 * Update information about a GitHub Enterprise Server Pages site
Updates information for a GitHub Enterprise Server Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
 */
export const putByOwnerAndRepoPages = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$135, config?: Config<any, UnnamedModel$135>) => any>`PUT /repos/{owner}/{repo}/pages`

export type PutByOwnerAndRepoPages = Api<typeof putByOwnerAndRepoPages>

/**
 * Delete a GitHub Enterprise Server Pages site
 */
export const deleteByOwnerAndRepoPages = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/pages`

export type DeleteByOwnerAndRepoPages = Api<typeof deleteByOwnerAndRepoPages>

/**
 * List GitHub Enterprise Server Pages builds
 */
export const getByOwnerAndRepoPagesBuilds = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoPagesBuildsQuery, config?: Config<GetByOwnerAndRepoPagesBuildsQuery, any>) => Page_build[]>`GET /repos/{owner}/{repo}/pages/builds`

export type GetByOwnerAndRepoPagesBuilds = Api<typeof getByOwnerAndRepoPagesBuilds>

/**
 * Request a GitHub Enterprise Server Pages build
You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.

Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
 */
export const postByOwnerAndRepoPagesBuilds = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`POST /repos/{owner}/{repo}/pages/builds`

export type PostByOwnerAndRepoPagesBuilds = Api<typeof postByOwnerAndRepoPagesBuilds>

/**
 * Get latest Pages build
 */
export const getByOwnerAndRepoPagesBuildsLatest = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/pages/builds/latest`

export type GetByOwnerAndRepoPagesBuildsLatest = Api<typeof getByOwnerAndRepoPagesBuildsLatest>

/**
 * Get GitHub Enterprise Server Pages build
 */
export const getByOwnerAndRepoPagesBuildsAndBuildId = api<(paths?: [owner: string, repo: string, buildid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/pages/builds/{build_id}`

export type GetByOwnerAndRepoPagesBuildsAndBuildId = Api<typeof getByOwnerAndRepoPagesBuildsAndBuildId>

/**
 * List pre-receive hooks for a repository
List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.
 */
export const getByOwnerAndRepoPreReceiveHooks = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoPreReceiveHooksQuery, config?: Config<GetByOwnerAndRepoPreReceiveHooksQuery, any>) => Repository_pre_receive_hook[]>`GET /repos/{owner}/{repo}/pre-receive-hooks`

export type GetByOwnerAndRepoPreReceiveHooks = Api<typeof getByOwnerAndRepoPreReceiveHooks>

/**
 * Get a pre-receive hook for a repository
 */
export const getByOwnerAndRepoPreReceiveHooksAndPreReceiveHookId = api<(paths?: [owner: string, repo: string, prereceivehookid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}`

export type GetByOwnerAndRepoPreReceiveHooksAndPreReceiveHookId = Api<typeof getByOwnerAndRepoPreReceiveHooksAndPreReceiveHookId>

/**
 * Update pre-receive hook enforcement for a repository
For pre-receive hooks which are allowed to be configured at the repo level, you can set `enforcement`
 */
export const patchByOwnerAndRepoPreReceiveHooksAndPreReceiveHookId = api<(paths?: [owner: string, repo: string, prereceivehookid: number], body?: UnnamedModel$137, config?: Config<any, UnnamedModel$137>) => any>`PATCH /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}`

export type PatchByOwnerAndRepoPreReceiveHooksAndPreReceiveHookId = Api<typeof patchByOwnerAndRepoPreReceiveHooksAndPreReceiveHookId>

/**
 * Remove pre-receive hook enforcement for a repository
Deletes any overridden enforcement on this repository for the specified hook.

Responds with effective values inherited from owner and/or global level.
 */
export const deleteByOwnerAndRepoPreReceiveHooksAndPreReceiveHookId = api<(paths?: [owner: string, repo: string, prereceivehookid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}`

export type DeleteByOwnerAndRepoPreReceiveHooksAndPreReceiveHookId = Api<typeof deleteByOwnerAndRepoPreReceiveHooksAndPreReceiveHookId>

/**
 * List repository projects
Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const getByOwnerAndRepoProjects = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoProjectsQuery, config?: Config<GetByOwnerAndRepoProjectsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/projects`

export type GetByOwnerAndRepoProjects = Api<typeof getByOwnerAndRepoProjects>

/**
 * Create a repository project
Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 */
export const postByOwnerAndRepoProjects = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$138, config?: Config<any, UnnamedModel$138>) => any>`POST /repos/{owner}/{repo}/projects`

export type PostByOwnerAndRepoProjects = Api<typeof postByOwnerAndRepoProjects>

/**
 * List pull requests
Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
 */
export const getByOwnerAndRepoPulls = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoPullsQuery, config?: Config<GetByOwnerAndRepoPullsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/pulls`

export type GetByOwnerAndRepoPulls = Api<typeof getByOwnerAndRepoPulls>

/**
 * Create a pull request
Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.

You can create a new pull request.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
 */
export const postByOwnerAndRepoPulls = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$139, config?: Config<any, UnnamedModel$139>) => any>`POST /repos/{owner}/{repo}/pulls`

export type PostByOwnerAndRepoPulls = Api<typeof postByOwnerAndRepoPulls>

/**
 * List review comments in a repository
Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
 */
export const getByOwnerAndRepoPullsComments = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoPullsCommentsQuery, config?: Config<GetByOwnerAndRepoPullsCommentsQuery, any>) => Pull_request_review_comment[]>`GET /repos/{owner}/{repo}/pulls/comments`

export type GetByOwnerAndRepoPullsComments = Api<typeof getByOwnerAndRepoPullsComments>

/**
 * Get a review comment for a pull request
Provides details for a review comment.
 */
export const getByOwnerAndRepoPullsCommentsAndCommentId = api<(paths?: [owner: string, repo: string, commentid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/pulls/comments/{comment_id}`

export type GetByOwnerAndRepoPullsCommentsAndCommentId = Api<typeof getByOwnerAndRepoPullsCommentsAndCommentId>

/**
 * Update a review comment for a pull request
Enables you to edit a review comment.
 */
export const patchByOwnerAndRepoPullsCommentsAndCommentId = api<(paths?: [owner: string, repo: string, commentid: number], body?: UnnamedModel$144, config?: Config<any, UnnamedModel$144>) => any>`PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}`

export type PatchByOwnerAndRepoPullsCommentsAndCommentId = Api<typeof patchByOwnerAndRepoPullsCommentsAndCommentId>

/**
 * Delete a review comment for a pull request
Deletes a review comment.
 */
export const deleteByOwnerAndRepoPullsCommentsAndCommentId = api<(paths?: [owner: string, repo: string, commentid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}`

export type DeleteByOwnerAndRepoPullsCommentsAndCommentId = Api<typeof deleteByOwnerAndRepoPullsCommentsAndCommentId>

/**
 * List reactions for a pull request review comment
List the reactions to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#review-comments).
 */
export const getByOwnerAndRepoPullsCommentsAndCommentIdReactions = api<(paths?: [owner: string, repo: string, commentid: number], query?: GetByOwnerAndRepoPullsCommentsAndCommentIdReactionsQuery, config?: Config<GetByOwnerAndRepoPullsCommentsAndCommentIdReactionsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions`

export type GetByOwnerAndRepoPullsCommentsAndCommentIdReactions = Api<typeof getByOwnerAndRepoPullsCommentsAndCommentIdReactions>

/**
 * Create reaction for a pull request review comment
Create a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
 */
export const postByOwnerAndRepoPullsCommentsAndCommentIdReactions = api<(paths?: [owner: string, repo: string, commentid: number], body?: UnnamedModel$145, config?: Config<any, UnnamedModel$145>) => any>`POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions`

export type PostByOwnerAndRepoPullsCommentsAndCommentIdReactions = Api<typeof postByOwnerAndRepoPullsCommentsAndCommentIdReactions>

/**
 * Delete a pull request comment reaction
**Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`

Delete a reaction to a [pull request review comment](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#review-comments).
 */
export const deleteByOwnerAndRepoPullsCommentsAndCommentIdReactionsAndReactionId = api<(paths?: [owner: string, repo: string, commentid: number, reactionid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}`

export type DeleteByOwnerAndRepoPullsCommentsAndCommentIdReactionsAndReactionId = Api<typeof deleteByOwnerAndRepoPullsCommentsAndCommentIdReactionsAndReactionId>

/**
 * Get a pull request
Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

Lists details of a pull request by providing its number.

When you get, [create](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#update-a-pull-request) a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/enterprise-server@3.0/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".

The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.

The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:

*   If merged as a [merge commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
*   If merged via a [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
*   If [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.

Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
 */
export const getByOwnerAndRepoPullsAndPullNumber = api<(paths?: [owner: string, repo: string, pullnumber: number], config?: Config<any, any>) => Pull_request>`GET /repos/{owner}/{repo}/pulls/{pull_number}`

export type GetByOwnerAndRepoPullsAndPullNumber = Api<typeof getByOwnerAndRepoPullsAndPullNumber>

/**
 * Update a pull request
Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.

To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
 */
export const patchByOwnerAndRepoPullsAndPullNumber = api<(paths?: [owner: string, repo: string, pullnumber: number], body?: UnnamedModel$155, config?: Config<any, UnnamedModel$155>) => any>`PATCH /repos/{owner}/{repo}/pulls/{pull_number}`

export type PatchByOwnerAndRepoPullsAndPullNumber = Api<typeof patchByOwnerAndRepoPullsAndPullNumber>

/**
 * List review comments on a pull request
Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
 */
export const getByOwnerAndRepoPullsAndPullNumberComments = api<(paths?: [owner: string, repo: string, pullnumber: number], query?: GetByOwnerAndRepoPullsAndPullNumberCommentsQuery, config?: Config<GetByOwnerAndRepoPullsAndPullNumberCommentsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/pulls/{pull_number}/comments`

export type GetByOwnerAndRepoPullsAndPullNumberComments = Api<typeof getByOwnerAndRepoPullsAndPullNumberComments>

/**
 * Create a review comment for a pull request

Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/enterprise-server@3.0/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.

You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).

**Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const postByOwnerAndRepoPullsAndPullNumberComments = api<(paths?: [owner: string, repo: string, pullnumber: number], body?: UnnamedModel$156, config?: Config<any, UnnamedModel$156>) => any>`POST /repos/{owner}/{repo}/pulls/{pull_number}/comments`

export type PostByOwnerAndRepoPullsAndPullNumberComments = Api<typeof postByOwnerAndRepoPullsAndPullNumberComments>

/**
 * Create a reply for a review comment
Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const postByOwnerAndRepoPullsAndPullNumberCommentsAndCommentIdReplies = api<(paths?: [owner: string, repo: string, pullnumber: number, commentid: number], body?: UnnamedModel$157, config?: Config<any, UnnamedModel$157>) => any>`POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies`

export type PostByOwnerAndRepoPullsAndPullNumberCommentsAndCommentIdReplies = Api<typeof postByOwnerAndRepoPullsAndPullNumberCommentsAndCommentIdReplies>

/**
 * List commits on a pull request
Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-commits) endpoint.
 */
export const getByOwnerAndRepoPullsAndPullNumberCommits = api<(paths?: [owner: string, repo: string, pullnumber: number], query?: GetByOwnerAndRepoPullsAndPullNumberCommitsQuery, config?: Config<GetByOwnerAndRepoPullsAndPullNumberCommitsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/pulls/{pull_number}/commits`

export type GetByOwnerAndRepoPullsAndPullNumberCommits = Api<typeof getByOwnerAndRepoPullsAndPullNumberCommits>

/**
 * List pull requests files
**Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
 */
export const getByOwnerAndRepoPullsAndPullNumberFiles = api<(paths?: [owner: string, repo: string, pullnumber: number], query?: GetByOwnerAndRepoPullsAndPullNumberFilesQuery, config?: Config<GetByOwnerAndRepoPullsAndPullNumberFilesQuery, any>) => any[]>`GET /repos/{owner}/{repo}/pulls/{pull_number}/files`

export type GetByOwnerAndRepoPullsAndPullNumberFiles = Api<typeof getByOwnerAndRepoPullsAndPullNumberFiles>

/**
 * Check if a pull request has been merged
 */
export const getByOwnerAndRepoPullsAndPullNumberMerge = api<(paths?: [owner: string, repo: string, pullnumber: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/pulls/{pull_number}/merge`

export type GetByOwnerAndRepoPullsAndPullNumberMerge = Api<typeof getByOwnerAndRepoPullsAndPullNumberMerge>

/**
 * Merge a pull request
This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const putByOwnerAndRepoPullsAndPullNumberMerge = api<(paths?: [owner: string, repo: string, pullnumber: number], body?: any | null, config?: Config<any, any | null>) => Pull_request_merge_result>`PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge`

export type PutByOwnerAndRepoPullsAndPullNumberMerge = Api<typeof putByOwnerAndRepoPullsAndPullNumberMerge>

/**
 * List requested reviewers for a pull request
 */
export const getByOwnerAndRepoPullsAndPullNumberRequestedReviewers = api<(paths?: [owner: string, repo: string, pullnumber: number], query?: GetByOwnerAndRepoPullsAndPullNumberRequestedReviewersQuery, config?: Config<GetByOwnerAndRepoPullsAndPullNumberRequestedReviewersQuery, any>) => Pull_request_review_request>`GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`

export type GetByOwnerAndRepoPullsAndPullNumberRequestedReviewers = Api<typeof getByOwnerAndRepoPullsAndPullNumberRequestedReviewers>

/**
 * Request reviewers for a pull request
This endpoint triggers [notifications](https://docs.github.com/enterprise-server@3.0/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const postByOwnerAndRepoPullsAndPullNumberRequestedReviewers = api<(paths?: [owner: string, repo: string, pullnumber: number], body?: UnnamedModel$158, config?: Config<any, UnnamedModel$158>) => any>`POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`

export type PostByOwnerAndRepoPullsAndPullNumberRequestedReviewers = Api<typeof postByOwnerAndRepoPullsAndPullNumberRequestedReviewers>

/**
 * Remove requested reviewers from a pull request
 */
export const deleteByOwnerAndRepoPullsAndPullNumberRequestedReviewers = api<(paths?: [owner: string, repo: string, pullnumber: number], body?: UnnamedModel$159, config?: Config<any, UnnamedModel$159>) => any>`DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers`

export type DeleteByOwnerAndRepoPullsAndPullNumberRequestedReviewers = Api<typeof deleteByOwnerAndRepoPullsAndPullNumberRequestedReviewers>

/**
 * List reviews for a pull request
The list of reviews returns in chronological order.
 */
export const getByOwnerAndRepoPullsAndPullNumberReviews = api<(paths?: [owner: string, repo: string, pullnumber: number], query?: GetByOwnerAndRepoPullsAndPullNumberReviewsQuery, config?: Config<GetByOwnerAndRepoPullsAndPullNumberReviewsQuery, any>) => Pull_request_review[]>`GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews`

export type GetByOwnerAndRepoPullsAndPullNumberReviews = Api<typeof getByOwnerAndRepoPullsAndPullNumberReviews>

/**
 * Create a review for a pull request
This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.

Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.

**Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/enterprise-server@3.0/rest/reference/pulls#get-a-pull-request) endpoint.

The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
 */
export const postByOwnerAndRepoPullsAndPullNumberReviews = api<(paths?: [owner: string, repo: string, pullnumber: number], body?: UnnamedModel$164, config?: Config<any, UnnamedModel$164>) => any>`POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews`

export type PostByOwnerAndRepoPullsAndPullNumberReviews = Api<typeof postByOwnerAndRepoPullsAndPullNumberReviews>

/**
 * Get a review for a pull request
 */
export const getByOwnerAndRepoPullsAndPullNumberReviewsAndReviewId = api<(paths?: [owner: string, repo: string, pullnumber: number, reviewid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`

export type GetByOwnerAndRepoPullsAndPullNumberReviewsAndReviewId = Api<typeof getByOwnerAndRepoPullsAndPullNumberReviewsAndReviewId>

/**
 * Update a review for a pull request
Update the review summary comment with new text.
 */
export const putByOwnerAndRepoPullsAndPullNumberReviewsAndReviewId = api<(paths?: [owner: string, repo: string, pullnumber: number, reviewid: number], body?: UnnamedModel$165, config?: Config<any, UnnamedModel$165>) => any>`PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`

export type PutByOwnerAndRepoPullsAndPullNumberReviewsAndReviewId = Api<typeof putByOwnerAndRepoPullsAndPullNumberReviewsAndReviewId>

/**
 * Delete a pending review for a pull request
 */
export const deleteByOwnerAndRepoPullsAndPullNumberReviewsAndReviewId = api<(paths?: [owner: string, repo: string, pullnumber: number, reviewid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}`

export type DeleteByOwnerAndRepoPullsAndPullNumberReviewsAndReviewId = Api<typeof deleteByOwnerAndRepoPullsAndPullNumberReviewsAndReviewId>

/**
 * List comments for a pull request review
List comments for a specific pull request review.
 */
export const getByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdComments = api<(paths?: [owner: string, repo: string, pullnumber: number, reviewid: number], query?: GetByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdCommentsQuery, config?: Config<GetByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdCommentsQuery, any>) => Review_comment[]>`GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments`

export type GetByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdComments = Api<typeof getByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdComments>

/**
 * Dismiss a review for a pull request
**Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
 */
export const putByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdDismissals = api<(paths?: [owner: string, repo: string, pullnumber: number, reviewid: number], body?: UnnamedModel$167, config?: Config<any, UnnamedModel$167>) => any>`PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals`

export type PutByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdDismissals = Api<typeof putByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdDismissals>

/**
 * Submit a review for a pull request
 */
export const postByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdEvents = api<(paths?: [owner: string, repo: string, pullnumber: number, reviewid: number], body?: UnnamedModel$168, config?: Config<any, UnnamedModel$168>) => any>`POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events`

export type PostByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdEvents = Api<typeof postByOwnerAndRepoPullsAndPullNumberReviewsAndReviewIdEvents>

/**
 * Update a pull request branch
Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
 */
export const putByOwnerAndRepoPullsAndPullNumberUpdateBranch = api<(paths?: [owner: string, repo: string, pullnumber: number], body?: any | null, config?: Config<any, any | null>) => any>`PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch`

export type PutByOwnerAndRepoPullsAndPullNumberUpdateBranch = Api<typeof putByOwnerAndRepoPullsAndPullNumberUpdateBranch>

/**
 * Get a repository README
Gets the preferred README for a repository.

READMEs support [custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const getByOwnerAndRepoReadme = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoReadmeQuery, config?: Config<GetByOwnerAndRepoReadmeQuery, any>) => Content_file>`GET /repos/{owner}/{repo}/readme`

export type GetByOwnerAndRepoReadme = Api<typeof getByOwnerAndRepoReadme>

/**
 * Get a repository README for a directory
Gets the README from a repository directory.

READMEs support [custom media types](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
 */
export const getByOwnerAndRepoReadmeAndDir = api<(paths?: [owner: string, repo: string, dir: string], query?: GetByOwnerAndRepoReadmeAndDirQuery, config?: Config<GetByOwnerAndRepoReadmeAndDirQuery, any>) => any>`GET /repos/{owner}/{repo}/readme/{dir}`

export type GetByOwnerAndRepoReadmeAndDir = Api<typeof getByOwnerAndRepoReadmeAndDir>

/**
 * List releases
This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-repository-tags).

Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
 */
export const getByOwnerAndRepoReleases = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoReleasesQuery, config?: Config<GetByOwnerAndRepoReleasesQuery, any>) => Release[]>`GET /repos/{owner}/{repo}/releases`

export type GetByOwnerAndRepoReleases = Api<typeof getByOwnerAndRepoReleases>

/**
 * Create a release
Users with push access to the repository can create a release.

This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/enterprise-server@3.0/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
 */
export const postByOwnerAndRepoReleases = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$170, config?: Config<any, UnnamedModel$170>) => any>`POST /repos/{owner}/{repo}/releases`

export type PostByOwnerAndRepoReleases = Api<typeof postByOwnerAndRepoReleases>

/**
 * Get a release asset
To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 */
export const getByOwnerAndRepoReleasesAssetsAndAssetId = api<(paths?: [owner: string, repo: string, assetid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/releases/assets/{asset_id}`

export type GetByOwnerAndRepoReleasesAssetsAndAssetId = Api<typeof getByOwnerAndRepoReleasesAssetsAndAssetId>

/**
 * Update a release asset
Users with push access to the repository can edit a release asset.
 */
export const patchByOwnerAndRepoReleasesAssetsAndAssetId = api<(paths?: [owner: string, repo: string, assetid: number], body?: UnnamedModel$171, config?: Config<any, UnnamedModel$171>) => any>`PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}`

export type PatchByOwnerAndRepoReleasesAssetsAndAssetId = Api<typeof patchByOwnerAndRepoReleasesAssetsAndAssetId>

/**
 * Delete a release asset
 */
export const deleteByOwnerAndRepoReleasesAssetsAndAssetId = api<(paths?: [owner: string, repo: string, assetid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}`

export type DeleteByOwnerAndRepoReleasesAssetsAndAssetId = Api<typeof deleteByOwnerAndRepoReleasesAssetsAndAssetId>

/**
 * Get the latest release
View the latest published full release for the repository.

The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
 */
export const getByOwnerAndRepoReleasesLatest = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/releases/latest`

export type GetByOwnerAndRepoReleasesLatest = Api<typeof getByOwnerAndRepoReleasesLatest>

/**
 * Get a release by tag name
Get a published release with the specified tag.
 */
export const getByOwnerAndRepoReleasesTagsAndTag = api<(paths?: [owner: string, repo: string, tag: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/releases/tags/{tag}`

export type GetByOwnerAndRepoReleasesTagsAndTag = Api<typeof getByOwnerAndRepoReleasesTagsAndTag>

/**
 * Get a release
**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia).
 */
export const getByOwnerAndRepoReleasesAndReleaseId = api<(paths?: [owner: string, repo: string, releaseid: number], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/releases/{release_id}`

export type GetByOwnerAndRepoReleasesAndReleaseId = Api<typeof getByOwnerAndRepoReleasesAndReleaseId>

/**
 * Update a release
Users with push access to the repository can edit a release.
 */
export const patchByOwnerAndRepoReleasesAndReleaseId = api<(paths?: [owner: string, repo: string, releaseid: number], body?: UnnamedModel$172, config?: Config<any, UnnamedModel$172>) => any>`PATCH /repos/{owner}/{repo}/releases/{release_id}`

export type PatchByOwnerAndRepoReleasesAndReleaseId = Api<typeof patchByOwnerAndRepoReleasesAndReleaseId>

/**
 * Delete a release
Users with push access to the repository can delete a release.
 */
export const deleteByOwnerAndRepoReleasesAndReleaseId = api<(paths?: [owner: string, repo: string, releaseid: number], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/releases/{release_id}`

export type DeleteByOwnerAndRepoReleasesAndReleaseId = Api<typeof deleteByOwnerAndRepoReleasesAndReleaseId>

/**
 * List release assets
 */
export const getByOwnerAndRepoReleasesAndReleaseIdAssets = api<(paths?: [owner: string, repo: string, releaseid: number], query?: GetByOwnerAndRepoReleasesAndReleaseIdAssetsQuery, config?: Config<GetByOwnerAndRepoReleasesAndReleaseIdAssetsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/releases/{release_id}/assets`

export type GetByOwnerAndRepoReleasesAndReleaseIdAssets = Api<typeof getByOwnerAndRepoReleasesAndReleaseIdAssets>

/**
 * Upload a release asset
This endpoint makes use of [a Hypermedia relation](https://docs.github.com/enterprise-server@3.0/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
the response of the [Create a release endpoint](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#create-a-release) to upload a release asset.

You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.

Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:

`application/zip`

GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
you'll still need to pass your authentication to be able to upload an asset.

When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.

**Notes:**
*   GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#list-assets-for-a-release)"
endpoint lists the renamed filenames. For more information and help, contact [GitHub Enterprise Server Support](https://support.github.com/contact?tags=dotcom-rest-api).
*   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
 */
export const postByOwnerAndRepoReleasesAndReleaseIdAssets = api<(paths?: [owner: string, repo: string, releaseid: number], query?: PostByOwnerAndRepoReleasesAndReleaseIdAssetsQuery, config?: Config<PostByOwnerAndRepoReleasesAndReleaseIdAssetsQuery, any>) => any>`POST /repos/{owner}/{repo}/releases/{release_id}/assets`

export type PostByOwnerAndRepoReleasesAndReleaseIdAssets = Api<typeof postByOwnerAndRepoReleasesAndReleaseIdAssets>

/**
 * List stargazers
Lists the people that have starred the repository.

You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/enterprise-server@3.0/rest/overview/media-types/) via the `Accept` header:
 */
export const getByOwnerAndRepoStargazers = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoStargazersQuery, config?: Config<GetByOwnerAndRepoStargazersQuery, any>) => any>`GET /repos/{owner}/{repo}/stargazers`

export type GetByOwnerAndRepoStargazers = Api<typeof getByOwnerAndRepoStargazers>

/**
 * Get the weekly commit activity
Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 */
export const getByOwnerAndRepoStatsCodeFrequency = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => number[][]>`GET /repos/{owner}/{repo}/stats/code_frequency`

export type GetByOwnerAndRepoStatsCodeFrequency = Api<typeof getByOwnerAndRepoStatsCodeFrequency>

/**
 * Get the last year of commit activity
Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
 */
export const getByOwnerAndRepoStatsCommitActivity = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => Commit_activity[]>`GET /repos/{owner}/{repo}/stats/commit_activity`

export type GetByOwnerAndRepoStatsCommitActivity = Api<typeof getByOwnerAndRepoStatsCommitActivity>

/**
 * Get all contributor commit activity

Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:

*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
*   `a` - Number of additions
*   `d` - Number of deletions
*   `c` - Number of commits
 */
export const getByOwnerAndRepoStatsContributors = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => Contributor_activity[]>`GET /repos/{owner}/{repo}/stats/contributors`

export type GetByOwnerAndRepoStatsContributors = Api<typeof getByOwnerAndRepoStatsContributors>

/**
 * Get the weekly commit count
Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.

The array order is oldest week (index 0) to most recent week.
 */
export const getByOwnerAndRepoStatsParticipation = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => Participation_stats>`GET /repos/{owner}/{repo}/stats/participation`

export type GetByOwnerAndRepoStatsParticipation = Api<typeof getByOwnerAndRepoStatsParticipation>

/**
 * Get the hourly commit count for each day
Each array contains the day number, hour number, and number of commits:

*   `0-6`: Sunday - Saturday
*   `0-23`: Hour of day
*   Number of commits

For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
 */
export const getByOwnerAndRepoStatsPunchCard = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any[]>`GET /repos/{owner}/{repo}/stats/punch_card`

export type GetByOwnerAndRepoStatsPunchCard = Api<typeof getByOwnerAndRepoStatsPunchCard>

/**
 * Create a commit status
Users with push access in a repository can create commit statuses for a given SHA.

Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
 */
export const postByOwnerAndRepoStatusesAndSha = api<(paths?: [owner: string, repo: string, sha: string], body?: UnnamedModel$174, config?: Config<any, UnnamedModel$174>) => any>`POST /repos/{owner}/{repo}/statuses/{sha}`

export type PostByOwnerAndRepoStatusesAndSha = Api<typeof postByOwnerAndRepoStatusesAndSha>

/**
 * List watchers
Lists the people watching the specified repository.
 */
export const getByOwnerAndRepoSubscribers = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoSubscribersQuery, config?: Config<GetByOwnerAndRepoSubscribersQuery, any>) => any[]>`GET /repos/{owner}/{repo}/subscribers`

export type GetByOwnerAndRepoSubscribers = Api<typeof getByOwnerAndRepoSubscribers>

/**
 * Get a repository subscription
 */
export const getByOwnerAndRepoSubscription = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => Repository_subscription>`GET /repos/{owner}/{repo}/subscription`

export type GetByOwnerAndRepoSubscription = Api<typeof getByOwnerAndRepoSubscription>

/**
 * Set a repository subscription
If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#delete-a-repository-subscription) completely.
 */
export const putByOwnerAndRepoSubscription = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$175, config?: Config<any, UnnamedModel$175>) => any>`PUT /repos/{owner}/{repo}/subscription`

export type PutByOwnerAndRepoSubscription = Api<typeof putByOwnerAndRepoSubscription>

/**
 * Delete a repository subscription
This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/enterprise-server@3.0/rest/reference/activity#set-a-repository-subscription).
 */
export const deleteByOwnerAndRepoSubscription = api<(paths?: [owner: string, repo: string], config?: Config<any, any>) => any>`DELETE /repos/{owner}/{repo}/subscription`

export type DeleteByOwnerAndRepoSubscription = Api<typeof deleteByOwnerAndRepoSubscription>

/**
 * List repository tags
 */
export const getByOwnerAndRepoTags = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoTagsQuery, config?: Config<GetByOwnerAndRepoTagsQuery, any>) => Tag[]>`GET /repos/{owner}/{repo}/tags`

export type GetByOwnerAndRepoTags = Api<typeof getByOwnerAndRepoTags>

/**
 * Download a repository archive (tar)
Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
`master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
the `Location` header to make a second `GET` request.
**Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const getByOwnerAndRepoTarballAndRef = api<(paths?: [owner: string, repo: string, ref: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/tarball/{ref}`

export type GetByOwnerAndRepoTarballAndRef = Api<typeof getByOwnerAndRepoTarballAndRef>

/**
 * List repository teams
 */
export const getByOwnerAndRepoTeams = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoTeamsQuery, config?: Config<GetByOwnerAndRepoTeamsQuery, any>) => any[]>`GET /repos/{owner}/{repo}/teams`

export type GetByOwnerAndRepoTeams = Api<typeof getByOwnerAndRepoTeams>

/**
 * Get all repository topics
 */
export const getByOwnerAndRepoTopics = api<(paths?: [owner: string, repo: string], query?: GetByOwnerAndRepoTopicsQuery, config?: Config<GetByOwnerAndRepoTopicsQuery, any>) => Topic>`GET /repos/{owner}/{repo}/topics`

export type GetByOwnerAndRepoTopics = Api<typeof getByOwnerAndRepoTopics>

/**
 * Replace all repository topics
 */
export const putByOwnerAndRepoTopics = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$177, config?: Config<any, UnnamedModel$177>) => any>`PUT /repos/{owner}/{repo}/topics`

export type PutByOwnerAndRepoTopics = Api<typeof putByOwnerAndRepoTopics>

/**
 * Transfer a repository
A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://docs.github.com/articles/about-repository-transfers/).
 */
export const postByOwnerAndRepoTransfer = api<(paths?: [owner: string, repo: string], body?: UnnamedModel$178, config?: Config<any, UnnamedModel$178>) => any>`POST /repos/{owner}/{repo}/transfer`

export type PostByOwnerAndRepoTransfer = Api<typeof postByOwnerAndRepoTransfer>

/**
 * Download a repository archive (zip)
Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
`master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
the `Location` header to make a second `GET` request.
**Note**: For private repositories, these links are temporary and expire after five minutes.
 */
export const getByOwnerAndRepoZipballAndRef = api<(paths?: [owner: string, repo: string, ref: string], config?: Config<any, any>) => any>`GET /repos/{owner}/{repo}/zipball/{ref}`

export type GetByOwnerAndRepoZipballAndRef = Api<typeof getByOwnerAndRepoZipballAndRef>

/**
 * Create a repository using a template
Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/enterprise-server@3.0/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.

**OAuth scope requirements**

When using [OAuth](https://docs.github.com/enterprise-server@3.0/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:

*   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
*   `repo` scope to create a private repository
 */
export const postByTemplateOwnerAndTemplateRepoGenerate = api<(paths?: [templateowner: string, templaterepo: string], body?: UnnamedModel$179, config?: Config<any, UnnamedModel$179>) => any>`POST /repos/{template_owner}/{template_repo}/generate`

export type PostByTemplateOwnerAndTemplateRepoGenerate = Api<typeof postByTemplateOwnerAndTemplateRepoGenerate>
